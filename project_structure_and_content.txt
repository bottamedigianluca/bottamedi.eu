STRUTTURA DEL PROGETTO:
=======================
sito web opus 4/
|-- .gitignore
|-- index.html
|-- package-lock.json
|-- package.json
|-- postcss.config.js
|-- tailwind.config.ts
|-- tsconfig.json
|-- tsconfig.node.json
|-- vite.config.ts
|-- public/
    |-- favicon.svg
    |-- logo-bottamedi.png
    |-- manifest.json
    |-- images/
        |-- albicocche_ingrosso_magazzino.webp
        |-- angurie.webp
        |-- arance_felici.webp
        |-- banchetto.webp
        |-- banco_frigo_disidratata_specialita.webp
        |-- banco_varieta_autunno.webp
        |-- bottamedi_ananas_fruitpoint_freschi.webp
        |-- bottamedi_dettaglio_frutta_disidratata_vaschette.webp
        |-- bottamedi_mele_melinda_montagna_cassetta.webp
        |-- bottamedi_mele_pink_lady_confezione.webp
        |-- bottamedi_sacchetti_frutta_disidratata_mista.webp
        |-- kiwi-cuore.webp
        |-- kiwi-gialli-bg.webp
        |-- mappa-banchetto-bottamedi.webp
        |-- mappa-ingrosso-bottamedi.webp
        |-- melinda_golden.webp
        |-- meloni_sattin_dettaglio.webp
        |-- pomodori_cuore_bue.webp
        |-- poster.webp
        |-- zucche_decorate_banco.webp
    |-- videos/
        |-- hero-video-verdure-rotanti.mp4
|-- src/
    |-- app.tsx
    |-- index.css
    |-- main.tsx
    |-- utils/
        |-- animations.ts
        |-- constants.ts
        |-- helpers.ts
    |-- components/
        |-- ui/
            |-- Button.tsx
            |-- Card.tsx
            |-- Loading.tsx
            |-- Modal.tsx
            |-- Particles.tsx
        |-- 3d/
            |-- FloatingFruits.tsx
            |-- HeroScene.tsx
            |-- ParticleSystem.tsx
        |-- sections/
            |-- AboutSection.tsx
            |-- Banchettosection.tsx
            |-- ContactSection.tsx
            |-- HeroSection.tsx
            |-- ProductsSection.tsx
            |-- ServicesSection.tsx
            |-- Wholesalecontact.tsx
        |-- types/
            |-- index.ts
        |-- layout/
            |-- Footer.tsx
            |-- Header.tsx
            |-- MobileDock.tsx
            |-- Navigation.tsx
        |-- assets/
            |-- icons/
                |-- index.ts
            |-- fonts/
                |-- clash-display.woff2
    |-- hooks/
        |-- useIntersectionObserver.ts
        |-- useLocalStorage.ts
        |-- useScrollDirection.ts


CONTENUTO DEI FILE:
===================


--- FILE: .gitignore ---
node_modules


--- FILE: index.html ---
<!DOCTYPE html>
<html lang="it" class="scroll-smooth">
<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="apple-touch-icon" href="/favicon.svg" /> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  
  <!-- 🚀 PRECONNECT OTTIMIZZAZIONI -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="dns-prefetch" href="//maps.googleapis.com">
  <link rel="dns-prefetch" href="//www.google-analytics.com">
  <link rel="dns-prefetch" href="//maps.app.goo.gl">
  
  <!-- SEO OTTIMIZZATO per bottamedi.eu -->
  <title>Bottamedi Frutta e Verdura Mezzolombardo | Ingrosso HORECA e Dettaglio Trentino Alto Adige | Dal 1974</title>
  
  <meta name="description" content="🍎 Bottamedi: 50 anni di frutta e verdura fresca a Mezzolombardo. Banchetto dettaglio e ingrosso HORECA per ristoranti. Qualità Trentino Alto Adige dal 1974." />
  
  <meta name="keywords" content="frutta verdura Mezzolombardo, ingrosso ortofrutta Trentino, banchetto frutta Mezzolombardo, HORECA ristoranti Trento, frutta fresca Alto Adige, verdura biologica Trentino, Bottamedi frutta, ingrosso alimentari Mezzolombardo, dettaglio ortofrutta, fornitore ristoranti Trento, mele Melinda, prodotti tipici trentini, frutta stagione Trentino, verdure fresche Mezzolombardo, consegna frutta ristoranti, Via Cavalleggeri Udine, Via de Gasperi Mezzolombardo" />
  
  <!-- 🎯 GEO-TARGETING MIGLIORATO -->
  <meta name="geo.region" content="IT-TN" />
  <meta name="geo.placename" content="Mezzolombardo, Trentino Alto Adige" />
  <meta name="geo.position" content="46.2137;11.0978" />
  <meta name="ICBM" content="46.2137, 11.0978" />
  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
  <meta name="googlebot" content="index, follow" />
  
  <!-- 🚀 PERFORMANCE HINTS -->
  <meta http-equiv="x-dns-prefetch-control" content="on">
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <link rel="preload" href="/videos/hero-video-verdure-rotanti.mp4" as="video" type="video/mp4">
  <link rel="preload" href="/images/poster.webp" as="image">
  <link rel="preload" href="/logo-bottamedi.png" as="image">
  
  <!-- Fonts with fallback -->
  <noscript>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
  </noscript>
  
  <!-- Business Schema.org AGGIORNATO -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "name": "Bottamedi Frutta e Verdura",
    "description": "Ingrosso e dettaglio frutta e verdura fresca a Mezzolombardo dal 1974. Servizi HORECA per ristoranti e banchetto per privati nel Trentino Alto Adige.",
    "foundingDate": "1974",
    "email": "bottamedipierluigi@virgilio.it",
    "telephone": ["+39 351 577 6198", "+39 0461 602534"],
    "url": "https://www.bottamedi.eu",
    "logo": "https://www.bottamedi.eu/logo-bottamedi.png",
    "image": "https://www.bottamedi.eu/images/banchetto.webp",
    "priceRange": "€€",
    "currenciesAccepted": "EUR",
    "paymentAccepted": "Cash, Credit Card, Bank Transfer",
    "address": [
      {
        "@type": "PostalAddress",
        "streetAddress": "Via Cavalleggeri Udine",
        "addressLocality": "Mezzolombardo",
        "addressRegion": "Trentino Alto Adige",
        "postalCode": "38017",
        "addressCountry": "IT"
      },
      {
        "@type": "PostalAddress", 
        "streetAddress": "Via Alcide de Gasperi, 47",
        "addressLocality": "Mezzolombardo",
        "addressRegion": "Trentino Alto Adige", 
        "postalCode": "38017",
        "addressCountry": "IT"
      }
    ],
    "geo": [
      {
        "@type": "GeoCoordinates",
        "latitude": 46.210472,
        "longitude": 11.097015
      },
      {
        "@type": "GeoCoordinates",
        "latitude": 46.213210,
        "longitude": 11.098930
      }
    ],
    "openingHours": "Mo-Sa 07:00-19:30",
    "category": ["Grocery Store", "Wholesale Food", "Fresh Produce", "HORECA Supplier"],
    "serviceArea": {
      "@type": "Place",
      "name": "Trentino Alto Adige, Veneto Nord, Lombardia Est"
    },
    "hasOfferCatalog": {
      "@type": "OfferCatalog",
      "name": "Prodotti Bottamedi",
      "itemListElement": [
        {
          "@type": "Offer",
          "name": "Frutta Fresca Stagionale",
          "description": "Mele Melinda, pesche, kiwi, agrumi selezionati"
        },
        {
          "@type": "Offer", 
          "name": "Verdure Fresche Locali",
          "description": "Pomodori cuore di bue, zucche, verdure di stagione"
        },
        {
          "@type": "Offer",
          "name": "Servizio Ingrosso HORECA",
          "description": "Fornitura giornaliera per ristoranti, hotel, pizzerie"
        }
      ]
    },
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": "4.8",
      "reviewCount": "127",
      "bestRating": "5"
    },
    "review": [
      {
        "@type": "Review",
        "reviewRating": {
          "@type": "Rating",
          "ratingValue": "5"
        },
        "author": {
          "@type": "Person",
          "name": "Marco Rossi"
        },
        "reviewBody": "Frutta e verdura sempre freschissima, personale cordiale e prezzi onesti. Il mio banchetto di fiducia da anni!"
      }
    ],
    "sameAs": [
      "https://www.facebook.com/profile.php?id=100063456281899",
      "https://instagram.com/banchetto.bottamedi"
    ]
  }
  </script>
  
  <!-- Open Graph AGGIORNATO -->
  <meta property="og:type" content="website" />
  <meta property="og:site_name" content="Bottamedi Frutta e Verdura" />
  <meta property="og:title" content="Bottamedi: Frutta e Verdura Fresca Mezzolombardo dal 1974 | Trentino Alto Adige" />
  <meta property="og:description" content="🍎 50 anni di tradizione familiare. Banchetto dettaglio e ingrosso HORECA. Frutta e verdura fresca selezionata ogni giorno nel cuore del Trentino." />
  <meta property="og:image" content="https://www.bottamedi.eu/images/banchetto.webp" />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta property="og:image:alt" content="Banchetto Bottamedi con varietà di frutta e verdura fresca a Mezzolombardo" />
  <meta property="og:url" content="https://www.bottamedi.eu" />
  <meta property="og:locale" content="it_IT" />
  
  <!-- Twitter Card AGGIORNATO -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Bottamedi Frutta e Verdura Mezzolombardo | Dal 1974" />
  <meta name="twitter:description" content="🍎 Frutta e verdura fresca, ingrosso HORECA e banchetto dettaglio nel Trentino Alto Adige" />
  <meta name="twitter:image" content="https://www.bottamedi.eu/images/banchetto.webp" />
  
  <!-- Canonical URL AGGIORNATO -->
  <link rel="canonical" href="https://www.bottamedi.eu" />
  
  <!-- Hreflang AGGIORNATO -->
  <link rel="alternate" hreflang="it" href="https://www.bottamedi.eu" />
  <link rel="alternate" hreflang="de" href="https://www.bottamedi.eu/de" />
  <link rel="alternate" hreflang="x-default" href="https://www.bottamedi.eu" />
  
  <!-- PWA Manifest -->
  <link rel="manifest" href="/manifest.json" />
  
  <!-- Critical CSS OTTIMIZZATO per performance -->
  <style>
    * { 
      box-sizing: border-box; 
    }
    
    html { 
      scroll-behavior: smooth; 
      -webkit-text-size-adjust: 100%;
    }
    
    body { 
      margin: 0; 
      font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      background: #ffffff;
      line-height: 1.6;
      color: #171717;
    }
    
    /* 🎯 LOADING SCREEN OTTIMIZZATO */
    .loading-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 50%, #bbf7d0 100%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
    }
    
    .loading-logo {
      width: 100px;
      height: auto;
      margin-bottom: 16px;
      animation: logoFloat 2s ease-in-out infinite;
      filter: drop-shadow(0 8px 16px rgba(34, 197, 94, 0.2));
      will-change: transform;
    }
    
    .loading-text {
      color: #22c55e;
      font-size: 18px;
      font-weight: 600;
      font-family: 'Playfair Display', serif;
      margin-bottom: 16px;
      animation: textPulse 1.5s ease-in-out infinite;
      will-change: opacity;
    }
    
    .loading-spinner {
      width: 32px;
      height: 32px;
      border: 2px solid rgba(34, 197, 94, 0.3);
      border-top: 2px solid #22c55e;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      will-change: transform;
    }
    
    /* 🎬 ANIMAZIONI OTTIMIZZATE */
    @keyframes logoFloat {
      0%, 100% { transform: translateY(0px) scale(1); }
      50% { transform: translateY(-8px) scale(1.02); }
    }
    
    @keyframes textPulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.8; }
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loaded .loading-screen {
      opacity: 0;
      visibility: hidden;
      pointer-events: none;
    }
    
    /* 🚀 PERFORMANCE OPTIMIZATIONS */
    .gpu-accelerated {
      transform: translateZ(0);
      will-change: transform;
      backface-visibility: hidden;
    }
    
    /* 🎭 GALLERY FADE-IN SMOOTH */
    .gallery-item {
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }
    
    .gallery-item.loaded {
      opacity: 1;
      transform: translateY(0);
    }
    
    /* 🔄 SMOOTH LOADING SPINNER */
    .loading-spinner-custom {
      width: 32px;
      height: 32px;
      border: 3px solid rgba(34, 197, 94, 0.2);
      border-top: 3px solid #22c55e;
      border-radius: 50%;
      animation: spin-smooth 1s linear infinite;
    }
    
    @keyframes spin-smooth {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* 🎯 MOBILE DOCK FORCE VISIBILITY */
    .mobile-dock-force {
      position: fixed !important;
      z-index: 99999 !important;
      bottom: 24px !important;
      left: 16px !important;
      right: 16px !important;
      pointer-events: auto !important;
    }
    
    /* 📱 REDUCE MOTION per accessibility */
    @media (prefers-reduced-motion: reduce) {
      * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
      
      .loading-logo, .loading-text {
        animation: none;
      }
      
      .gallery-item {
        transition: none;
      }
    }
    
    /* 📷 IMAGE LAZY LOADING HINT */
    img[loading="lazy"] {
      content-visibility: auto;
    }
  </style>
  
  <!-- Theme e PWA -->
  <meta name="theme-color" content="#22c55e" />
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  <meta name="apple-mobile-web-app-title" content="Bottamedi" />
  
  <!-- 📊 GOOGLE ANALYTICS 4 OTTIMIZZATO -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'GA_MEASUREMENT_ID', {
      page_title: 'Bottamedi Frutta e Verdura Mezzolombardo',
      page_location: 'https://www.bottamedi.eu',
      custom_map: {'custom_parameter_1': 'trentino_alto_adige'},
      // 🎯 EVENTI PERSONALIZZATI
      custom_parameter_mobile_dock: true,
      custom_parameter_business_type: 'horeca_retail'
    });
    
    // 📱 TRACK MOBILE DOCK INTERACTIONS  
    window.trackMobileDock = function(action, submenu) {
      gtag('event', 'mobile_dock_interaction', {
        event_category: 'engagement',
        event_label: action,
        custom_parameter_submenu: submenu || 'main'
      });
    };
  </script>
</head>
<body>
  <!-- Loading Screen OTTIMIZZATO -->
  <div class="loading-screen" id="loading-screen">
    <img 
      src="/logo-bottamedi.png" 
      alt="Bottamedi Logo - Frutta e Verdura Mezzolombardo dal 1974" 
      class="loading-logo"
      width="100"
      height="100"
      onerror="this.style.display='none'; document.querySelector('.loading-fallback').style.display='block';"
    />
    
    <div class="loading-fallback" style="display: none;">
      <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #22c55e, #16a34a); border-radius: 16px; display: flex; align-items: center; justify-content: center; font-size: 24px; font-weight: bold; color: white; margin-bottom: 16px; animation: logoFloat 2s ease-in-out infinite;">
        B
      </div>
    </div>
    
    <div class="loading-text">BOTTAMEDI</div>
    <div class="loading-spinner"></div>
  </div>
  
  <!-- React Root -->
  <div id="root"></div>
  
  <!-- Scripts -->
  <script type="module" src="/src/main.tsx"></script>
  
  <!-- 🚀 OTTIMIZZAZIONE CARICAMENTO -->
  <script>
    // Performance monitoring ottimizzato
    if ('PerformanceObserver' in window) {
      const perfObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            console.log('LCP:', entry.startTime);
            // Track LCP in Analytics
            gtag('event', 'web_vitals', {
              event_category: 'performance',
              event_label: 'LCP',
              value: Math.round(entry.startTime)
            });
          }
        }
      });
      
      try {
        perfObserver.observe({ entryTypes: ['largest-contentful-paint'] });
      } catch (e) {
        // Fallback silenzioso
      }
    }
    
    // Caricamento ottimizzato
    function hideLoadingScreen() {
      document.body.classList.add('loaded');
      setTimeout(() => {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
          loadingScreen.remove();
        }
      }, 300);
    }
    
    // Timing ottimizzato
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(hideLoadingScreen, 800);
      });
    } else {
      setTimeout(hideLoadingScreen, 800);
    }
    
    // Service Worker con error handling
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then(registration => {
            console.log('SW registered:', registration.scope);
          })
          .catch(error => {
            console.log('SW registration failed:', error);
          });
      });
    }
  </script>

  <!-- Schema FAQ AGGIORNATO -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": "Dove si trova Bottamedi a Mezzolombardo?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Bottamedi ha due sedi a Mezzolombardo: il banchetto dettaglio in Via Cavalleggeri Udine e l'ingrosso HORECA in Via Alcide de Gasperi 47. Entrambe nel centro di Mezzolombardo, Trentino Alto Adige."
        }
      },
      {
        "@type": "Question",
        "name": "Come contattare Bottamedi per l'ingrosso HORECA?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Per il servizio ingrosso HORECA contatta Bottamedi al +39 351 577 6198 o via email a bottamedipierluigi@virgilio.it. Forniamo ristoranti, hotel e pizzerie in tutto il Trentino Alto Adige con consegne 6 giorni su 7."
        }
      },
      {
        "@type": "Question",
        "name": "Quali sono gli orari del banchetto Bottamedi?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Il banchetto Bottamedi è aperto dal Lunedì al Sabato dalle 07:00 alle 19:30. Siamo chiusi la Domenica per garantire la selezione quotidiana dei prodotti più freschi."
        }
      },
      {
        "@type": "Question",
        "name": "Che prodotti offre Bottamedi?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Bottamedi offre oltre 100 varietà di frutta e verdura fresca: mele Melinda, prodotti biologici del Trentino, frutta di stagione, verdure locali e specialità del territorio. Selezione quotidiana alle prime ore del mattino."
        }
      }
    ]
  }
  </script>

  <!-- Breadcrumb Schema AGGIORNATO -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": "https://www.bottamedi.eu"
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Trentino Alto Adige",
        "item": "https://www.bottamedi.eu/trentino-alto-adige"
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": "Mezzolombardo",
        "item": "https://www.bottamedi.eu/mezzolombardo"
      }
    ]
  }
  </script>

  <!-- Organization Schema AGGIORNATO -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "Bottamedi Frutta e Verdura",
    "alternateName": "Bottamedi Mezzolombardo",
    "description": "Azienda familiare specializzata nella vendita di frutta e verdura fresca nel Trentino Alto Adige dal 1974. Servizi ingrosso HORECA e dettaglio.",
    "foundingDate": "1974",
    "founder": {
      "@type": "Person",
      "name": "Luigi Bottamedi"
    },
    "employee": [
      {
        "@type": "Person",
        "name": "Pierluigi Bottamedi",
        "jobTitle": "Titolare",
        "email": "bottamedipierluigi@virgilio.it"
      }
    ],
    "contactPoint": {
      "@type": "ContactPoint",
      "telephone": "+39 351 577 6198",
      "email": "bottamedipierluigi@virgilio.it",
      "contactType": "sales",
      "availableLanguage": ["Italian", "German"]
    },
    "knowsAbout": [
      "Frutta fresca",
      "Verdura biologica", 
      "Ingrosso alimentari",
      "Prodotti locali Trentino",
      "Mele Melinda",
      "Servizi HORECA"
    ],
    "areaServed": [
      {
        "@type": "Place",
        "name": "Trentino Alto Adige"
      },
      {
        "@type": "Place", 
        "name": "Veneto"
      },
      {
        "@type": "Place",
        "name": "Lombardia"
      }
    ],
    "memberOf": {
      "@type": "Organization",
      "name": "Associazione Commercianti Mezzolombardo"
    },
    "url": "https://www.bottamedi.eu",
    "sameAs": [
      "https://www.facebook.com/profile.php?id=100063456281899",
      "https://instagram.com/banchetto.bottamedi"
    ]
  }
  </script>

</body>
</html>

--- FILE: package-lock.json ---
[Contenuto di 'package-lock.json' omesso (configurazione o tipo di file)]

--- FILE: package.json ---
{
  "name": "bottamedi-frutta-verdura-optimized",
  "private": true,
  "version": "2.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "framer-motion": "^10.18.0",
    "react-intersection-observer": "^9.8.0",
    "react-helmet-async": "^2.0.4"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "typescript": "^5.3.0",
    "vite": "^5.0.0",
    "autoprefixer": "^10.4.17",
    "postcss": "^8.4.33",
    "tailwindcss": "^3.4.1"
  }
}

--- FILE: postcss.config.js ---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- FILE: tailwind.config.ts ---
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        display: ['Clash Display', 'Inter', 'system-ui', 'sans-serif'],
        body: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
      colors: {
        brand: {
          50: '#f0fdf4',
          100: '#dcfce7',
          200: '#bbf7d0',
          300: '#86efac',
          400: '#4ade80',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
          800: '#166534',
          900: '#14532d',
          950: '#052e16',
        },
        accent: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          300: '#fcd34d',
          400: '#fbbf24',
          500: '#f59e0b',
          600: '#d97706',
          700: '#b45309',
          800: '#92400e',
          900: '#78350f',
          950: '#451a03',
        },
        neutral: {
          50: '#fafafa',
          100: '#f5f5f5',
          200: '#e5e5e5',
          300: '#d4d4d4',
          400: '#a3a3a3',
          500: '#737373',
          600: '#525252',
          700: '#404040',
          800: '#262626',
          900: '#171717',
          950: '#0a0a0a',
        }
      },
      animation: {
        'fade-in': 'fadeIn 0.6s ease-out forwards',
        'fade-in-up': 'fadeInUp 0.8s ease-out forwards',
        'slide-in': 'slideIn 0.6s ease-out forwards',
        'scale-in': 'scaleIn 0.5s ease-out forwards',
        'float': 'float 6s ease-in-out infinite',
        'glow': 'glow 2s ease-in-out infinite alternate',
        'shimmer': 'shimmer 2s linear infinite',
        'magnetic': 'magnetic 0.3s ease-out',
        'breath': 'breath 4s ease-in-out infinite',
        'particle': 'particle 3s linear infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        fadeInUp: {
          '0%': { opacity: '0', transform: 'translateY(30px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' }
        },
        slideIn: {
          '0%': { transform: 'translateX(-100%)' },
          '100%': { transform: 'translateX(0)' }
        },
        scaleIn: {
          '0%': { transform: 'scale(0.9)', opacity: '0' },
          '100%': { transform: 'scale(1)', opacity: '1' }
        },
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-20px)' }
        },
        glow: {
          '0%': { boxShadow: '0 0 20px rgba(34, 197, 94, 0.5)' },
          '100%': { boxShadow: '0 0 40px rgba(34, 197, 94, 0.8)' }
        },
        shimmer: {
          '0%': { transform: 'translateX(-100%)' },
          '100%': { transform: 'translateX(100%)' }
        },
        magnetic: {
          '0%': { transform: 'scale(1)' },
          '50%': { transform: 'scale(1.05)' },
          '100%': { transform: 'scale(1)' }
        },
        breath: {
          '0%, 100%': { transform: 'scale(1)' },
          '50%': { transform: 'scale(1.02)' }
        },
        particle: {
          '0%': { transform: 'translateY(0) rotate(0deg)', opacity: '1' },
          '100%': { transform: 'translateY(-100px) rotate(360deg)', opacity: '0' }
        }
      },
      backdropBlur: {
        xs: '2px',
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
        'mesh-gradient': 'linear-gradient(45deg, #22c55e, #84cc16, #eab308, #f97316)',
      },
      blur: {
        '4xl': '72px',
        '5xl': '96px',
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ],
}

--- FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    /* Path mapping for cleaner imports */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"], // Confermato che punta a src/components/ (plurale)
      "@/hooks/*": ["./src/hooks/*"],
      "@/utils/*": ["./src/utils/*"],
      "@/types/*": ["./src/components/types/*"], // CORRETTO: Ora punta a src/components/types/
      "@/assets/*": ["./src/components/assets/*"] // CORRETTO: Ora punta a src/components/assets/
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

--- FILE: tsconfig.node.json ---
{
  "compilerOptions": {
    "composite": true,
    "sketchLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "noEmit": true
  },
  "include": ["vite.config.ts"]
}

--- FILE: vite.config.ts ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

export default defineConfig({
  plugins: [
    react()
  ],
  build: {
    target: 'esnext',
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          animations: ['framer-motion']
        }
      }
    }
  },
  optimizeDeps: {
    include: ['react', 'react-dom', 'framer-motion']
  },
  server: {
    port: 3000,
    open: true,
    cors: true
  },
  preview: {
    port: 3000
  }
})

--- FILE: public/favicon.svg ---
[Contenuto di 'favicon.svg' omesso (configurazione o tipo di file)]

--- FILE: public/logo-bottamedi.png ---
[Contenuto di 'logo-bottamedi.png' omesso (configurazione o tipo di file)]

--- FILE: public/manifest.json ---
{
  "name": "Bottamedi Frutta e Verdura - Mezzolombardo Trentino",
  "short_name": "Bottamedi",
  "description": "Frutta e verdura fresca dal 1974. Banchetto dettaglio e ingrosso HORECA a Mezzolombardo, Trentino Alto Adige.",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#22c55e",
  "orientation": "portrait-primary",
  "scope": "/",
  "lang": "it",
  "categories": ["food", "business", "shopping"],
  "icons": [
    {
      "src": "/favicon.svg",
      "sizes": "any",
      "type": "image/svg+xml",
      "purpose": "any maskable"
    },
    {
      "src": "/logo-bottamedi.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "/logo-bottamedi.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any"
    }
  ],
  "screenshots": [
    {
      "src": "/images/banchetto.webp",
      "sizes": "1280x720",
      "type": "image/webp",
      "form_factor": "wide",
      "label": "Il nostro banchetto di frutta e verdura fresca"
    }
  ],
  "shortcuts": [
    {
      "name": "Chiama Banchetto",
      "short_name": "Chiama",
      "description": "Chiama direttamente il banchetto",
      "url": "tel:+393515776198",
      "icons": [{ "src": "/favicon.svg", "sizes": "96x96" }]
    },
    {
      "name": "Dove Siamo",
      "short_name": "Mappa",
      "description": "Visualizza la nostra posizione",
      "url": "https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6",
      "icons": [{ "src": "/favicon.svg", "sizes": "96x96" }]
    }
  ],
  "related_applications": [],
  "prefer_related_applications": false,
  "dir": "ltr",
  "iarc_rating_id": "",
  "share_target": {
    "action": "/contact",
    "method": "GET",
    "params": {
      "title": "title",
      "text": "text",
      "url": "url"
    }
  }
}

--- FILE: public/images/albicocche_ingrosso_magazzino.webp ---
[Contenuto di 'albicocche_ingrosso_magazzino.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/angurie.webp ---
[Contenuto di 'angurie.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/arance_felici.webp ---
[Contenuto di 'arance_felici.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/banchetto.webp ---
[Contenuto di 'banchetto.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/banco_frigo_disidratata_specialita.webp ---
[Contenuto di 'banco_frigo_disidratata_specialita.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/banco_varieta_autunno.webp ---
[Contenuto di 'banco_varieta_autunno.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_ananas_fruitpoint_freschi.webp ---
[Contenuto di 'bottamedi_ananas_fruitpoint_freschi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_dettaglio_frutta_disidratata_vaschette.webp ---
[Contenuto di 'bottamedi_dettaglio_frutta_disidratata_vaschette.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_mele_melinda_montagna_cassetta.webp ---
[Contenuto di 'bottamedi_mele_melinda_montagna_cassetta.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_mele_pink_lady_confezione.webp ---
[Contenuto di 'bottamedi_mele_pink_lady_confezione.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_sacchetti_frutta_disidratata_mista.webp ---
[Contenuto di 'bottamedi_sacchetti_frutta_disidratata_mista.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/kiwi-cuore.webp ---
[Contenuto di 'kiwi-cuore.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/kiwi-gialli-bg.webp ---
[Contenuto di 'kiwi-gialli-bg.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/mappa-banchetto-bottamedi.webp ---
[Contenuto di 'mappa-banchetto-bottamedi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/mappa-ingrosso-bottamedi.webp ---
[Contenuto di 'mappa-ingrosso-bottamedi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/melinda_golden.webp ---
[Contenuto di 'melinda_golden.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/meloni_sattin_dettaglio.webp ---
[Contenuto di 'meloni_sattin_dettaglio.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/pomodori_cuore_bue.webp ---
[Contenuto di 'pomodori_cuore_bue.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/poster.webp ---
[Contenuto di 'poster.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/zucche_decorate_banco.webp ---
[Contenuto di 'zucche_decorate_banco.webp' omesso (configurazione o tipo di file)]

--- FILE: public/videos/hero-video-verdure-rotanti.mp4 ---
[Contenuto di 'hero-video-verdure-rotanti.mp4' omesso (configurazione o tipo di file)]

--- FILE: src/app.tsx ---
import React, { Suspense, useEffect, useState } from 'react'
import { Helmet } from 'react-helmet-async'
import { motion, AnimatePresence, useScroll, useSpring } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

// Lazy load components for better performance
const Header = React.lazy(() => import('./components/layout/Header'))
const HeroSection = React.lazy(() => import('./components/sections/HeroSection'))
const AboutSection = React.lazy(() => import('./components/sections/AboutSection'))
const BanchettoSection = React.lazy(() => import('./components/sections/Banchettosection'))
const ServicesSection = React.lazy(() => import('./components/sections/ServicesSection'))
const ProductsSection = React.lazy(() => import('./components/sections/ProductsSection'))
const ContactSection = React.lazy(() => import('./components/sections/ContactSection'))
const Footer = React.lazy(() => import('./components/layout/Footer'))
const MobileDock = React.lazy(() => import('./components/layout/MobileDock'))

// Performance optimized loading component
const SectionLoader = () => (
  <div className="h-96 flex items-center justify-center">
    <div className="relative">
      <div className="w-8 h-8 border-2 border-green-200 border-t-green-600 rounded-full animate-spin"></div>
    </div>
  </div>
)

// Global state for language and theme
interface AppState {
  language: 'it' | 'de'
  isMenuOpen: boolean
  currentSection: string
}

const App: React.FC = () => {
  const [state, setState] = useState<AppState>({
    language: 'it',
    isMenuOpen: false,
    currentSection: 'hero'
  })

  const { scrollYProgress } = useScroll()
  const scaleX = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001
  })

  // Intersection observer per le sezioni - SEZIONI CORRETTE
  const [heroRef, heroInView] = useInView({ threshold: 0.1 })
  const [aboutRef, aboutInView] = useInView({ threshold: 0.1 })
  const [dettaglioRef, dettaglioInView] = useInView({ threshold: 0.1 }) // CORRETTO
  const [servicesRef, servicesInView] = useInView({ threshold: 0.1 })
  const [productsRef, productsInView] = useInView({ threshold: 0.1 })
  const [contactRef, contactInView] = useInView({ threshold: 0.1 })

  // Language persistence
  useEffect(() => {
    const savedLanguage = localStorage.getItem('bottamedi-language') as 'it' | 'de'
    if (savedLanguage) {
      setState(prev => ({ ...prev, language: savedLanguage }))
    }
  }, [])

  // Detect current section
  useEffect(() => {
    if (heroInView) setState(prev => ({ ...prev, currentSection: 'hero' }))
    else if (aboutInView) setState(prev => ({ ...prev, currentSection: 'about' }))
    else if (dettaglioInView) setState(prev => ({ ...prev, currentSection: 'dettaglio' }))
    else if (servicesInView) setState(prev => ({ ...prev, currentSection: 'services' }))
    else if (productsInView) setState(prev => ({ ...prev, currentSection: 'products' }))
    else if (contactInView) setState(prev => ({ ...prev, currentSection: 'contact' }))
  }, [heroInView, aboutInView, dettaglioInView, servicesInView, productsInView, contactInView])

  const updateLanguage = (language: 'it' | 'de') => {
    setState(prev => ({ ...prev, language }))
    localStorage.setItem('bottamedi-language', language)
    document.documentElement.lang = language
  }

  const toggleMenu = () => {
    setState(prev => ({ ...prev, isMenuOpen: !prev.isMenuOpen }))
  }

  // Page transition variants
  const pageVariants = {
    initial: { opacity: 0, y: 20 },
    in: { opacity: 1, y: 0 },
    out: { opacity: 0, y: -20 }
  }

  const pageTransition = {
    type: 'tween',
    ease: 'anticipate',
    duration: 0.4
  }

  return (
    <>
      <Helmet>
        <title>Bottamedi Frutta e Verdura | Eccellenza Trentina dal 1974</title>
        <meta name="description" content="Scopri 50 anni di tradizione familiare nell'ortofrutta. Freschezza quotidiana e qualità superiore per retail e HORECA a Mezzolombardo, Trentino." />
        <meta name="keywords" content="frutta verdura, mezzolombardo, trentino, ingrosso ortofrutta, HORECA, freschezza, qualità" />
        <link rel="canonical" href="https://www.bottamedi.eu" />
      </Helmet>

      {/* Progress bar ottimizzato */}
      <motion.div
        className="fixed top-0 left-0 right-0 h-1 bg-gradient-to-r from-green-500 to-green-600 transform-gpu z-50"
        style={{ scaleX, transformOrigin: '0%' }}
      />

      {/* Background mesh gradient semplificato */}
      <div className="fixed inset-0 opacity-10 pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-green-300 rounded-full mix-blend-multiply filter blur-5xl animate-pulse"></div>
        <div className="absolute top-3/4 right-1/4 w-96 h-96 bg-green-400 rounded-full mix-blend-multiply filter blur-5xl animate-pulse" style={{ animationDelay: '2s' }}></div>
      </div>

      <motion.div
        initial="initial"
        animate="in"
        exit="out"
        variants={pageVariants}
        transition={pageTransition}
        className="relative min-h-screen bg-white"
      >
        {/* Header */}
        <Suspense fallback={<div className="h-20 bg-white/80 backdrop-blur-md" />}>
          <Header
            language={state.language}
            onLanguageChange={updateLanguage}
            isMenuOpen={state.isMenuOpen}
            onToggleMenu={toggleMenu}
          />
        </Suspense>

        {/* Main content */}
        <main className="relative">
          {/* Hero Section */}
          <div ref={heroRef}>
            <Suspense fallback={<SectionLoader />}>
              <HeroSection language={state.language} inView={heroInView} />
            </Suspense>
          </div>

          {/* About Section */}
          <div ref={aboutRef}>
            <Suspense fallback={<SectionLoader />}>
              <AboutSection language={state.language} inView={aboutInView} />
            </Suspense>
          </div>

          {/* Banchetto Section - CORRETTO */}
          <div ref={dettaglioRef}>
            <Suspense fallback={<SectionLoader />}>
              <BanchettoSection language={state.language} inView={dettaglioInView} />
            </Suspense>
          </div>

          {/* Services Section */}
          <div ref={servicesRef}>
            <Suspense fallback={<SectionLoader />}>
              <ServicesSection language={state.language} inView={servicesInView} />
            </Suspense>
          </div>

          {/* Products Section */}
          <div ref={productsRef}>
            <Suspense fallback={<SectionLoader />}>
              <ProductsSection language={state.language} inView={productsInView} />
            </Suspense>
          </div>

          {/* Contact Section */}
          <div ref={contactRef}>
            <Suspense fallback={<SectionLoader />}>
              <ContactSection language={state.language} inView={contactInView} />
            </Suspense>
          </div>
        </main>

        {/* Footer */}
        <Suspense fallback={<div className="h-64 bg-neutral-900" />}>
          <Footer language={state.language} />
        </Suspense>

        {/* Mobile Dock */}
        <Suspense fallback={null}>
          <MobileDock language={state.language} />
        </Suspense>

        {/* Mobile menu overlay */}
        <AnimatePresence>
          {state.isMenuOpen && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden"
              onClick={toggleMenu}
            />
          )}
        </AnimatePresence>
      </motion.div>
    </>
  )
}

export default App

--- FILE: src/index.css ---
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* Performance optimized CSS custom properties */
:root {
  --brand-primary: #22c55e;
  --brand-secondary: #f59e0b;
  --text-primary: #171717;
  --text-secondary: #525252;
  --surface-primary: #ffffff;
  --surface-secondary: #fafafa;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  --radius-sm: 0.375rem;
  --radius-md: 0.75rem;
  --radius-lg: 1rem;
  --transition-fast: 150ms ease-out;
  --transition-normal: 300ms ease-out;
  --transition-slow: 500ms ease-out;
}

/* Hardware acceleration for smooth animations */
* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
  scroll-padding-top: 80px;
}

body {
  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  line-height: 1.6;
  color: var(--text-primary);
  background-color: var(--surface-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  font-feature-settings: 'kern' 1;
}

/* Optimized focus styles */
*:focus {
  outline: 2px solid var(--brand-primary);
  outline-offset: 2px;
}

*:focus:not(:focus-visible) {
  outline: none;
}

/* Smooth scrolling for reduced motion users */
@media (prefers-reduced-motion: reduce) {
  html {
    scroll-behavior: auto;
  }
  
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  :root {
    --brand-primary: #000000;
    --text-primary: #000000;
    --text-secondary: #000000;
  }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  :root {
    --text-primary: #fafafa;
    --text-secondary: #d4d4d4;
    --surface-primary: #171717;
    --surface-secondary: #262626;
  }
}

/* Performance optimized utilities */
.hardware-accelerated {
  transform: translateZ(0);
  will-change: transform;
}

.gpu-optimized {
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000px;
}

.smooth-edges {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: var(--surface-secondary);
}

::-webkit-scrollbar-thumb {
  background: var(--brand-primary);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: color-mix(in srgb, var(--brand-primary) 80%, black);
}

/* Optimized button base styles */
.btn-base {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  text-decoration: none;
  border: none;
  cursor: pointer;
  transition: all var(--transition-normal);
  transform: translateZ(0);
  will-change: transform, box-shadow;
}

.btn-base:hover {
  transform: translateY(-2px) translateZ(0);
}

.btn-base:active {
  transform: translateY(0) translateZ(0);
}

/* Glass morphism utility */
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

/* Magnetic hover effect */
.magnetic {
  transition: transform var(--transition-normal) cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.magnetic:hover {
  transform: scale(1.05) translateZ(0);
}

/* Shimmer effect */
.shimmer {
  position: relative;
  overflow: hidden;
}

.shimmer::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.3),
    transparent
  );
  animation: shimmer 2s infinite;
  z-index: 1;
}

@keyframes shimmer {
  0% { left: -100%; }
  100% { left: 100%; }
}

/* Blob animation */
.blob {
  border-radius: 50% 40% 30% 70% / 60% 30% 70% 40%;
  animation: blob 7s ease-in-out infinite;
}

@keyframes blob {
  0% { border-radius: 50% 40% 30% 70% / 60% 30% 70% 40%; }
  25% { border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%; }
  50% { border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%; }
  75% { border-radius: 40% 60% 60% 40% / 60% 50% 40% 50%; }
  100% { border-radius: 50% 40% 30% 70% / 60% 30% 70% 40%; }
}

/* Typography scale */
.text-display-xl {
  font-size: clamp(3rem, 8vw, 6rem);
  line-height: 1.1;
  font-weight: 800;
  letter-spacing: -0.02em;
}

.text-display-lg {
  font-size: clamp(2rem, 5vw, 3.5rem);
  line-height: 1.2;
  font-weight: 700;
  letter-spacing: -0.01em;
}

/* Performance hints */
.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}

.will-change-auto {
  will-change: auto;
}

--- FILE: src/main.tsx ---
import React, { Suspense } from 'react'
import { createRoot } from 'react-dom/client'
import { HelmetProvider } from 'react-helmet-async'
import { MotionConfig } from 'framer-motion'
import './index.css'

// Lazy load the main App component
const App = React.lazy(() => import('./App'))

// Performance optimized loading component
const LoadingFallback = () => (
  <div className="fixed inset-0 bg-gradient-to-br from-green-50 to-green-100 flex items-center justify-center">
    <div className="relative">
      <div className="w-16 h-16 border-4 border-green-200 border-t-green-600 rounded-full animate-spin"></div>
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="w-2 h-2 bg-green-600 rounded-full animate-pulse"></div>
      </div>
    </div>
  </div>
)

// Get the root element
const container = document.getElementById('root')
if (!container) throw new Error('Failed to find the root element')

// Create root with concurrent features
const root = createRoot(container)

// Render with performance optimizations
root.render(
  <React.StrictMode>
    <HelmetProvider>
      <MotionConfig
        transition={{
          type: "tween",
          duration: 0.3,
          ease: "easeOut"
        }}
        reducedMotion="user"
      >
        <Suspense fallback={<LoadingFallback />}>
          <App />
        </Suspense>
      </MotionConfig>
    </HelmetProvider>
  </React.StrictMode>
)

--- FILE: src/utils/animations.ts ---
import { Variants } from 'framer-motion'

// Common animation variants
export const fadeInUp: Variants = {
  hidden: {
    opacity: 0,
    y: 60,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const fadeInDown: Variants = {
  hidden: {
    opacity: 0,
    y: -60,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const fadeInLeft: Variants = {
  hidden: {
    opacity: 0,
    x: -60,
  },
  visible: {
    opacity: 1,
    x: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const fadeInRight: Variants = {
  hidden: {
    opacity: 0,
    x: 60,
  },
  visible: {
    opacity: 1,
    x: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const scaleIn: Variants = {
  hidden: {
    opacity: 0,
    scale: 0.8,
  },
  visible: {
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const slideInUp: Variants = {
  hidden: {
    y: '100%',
    opacity: 0,
  },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.8,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Stagger animations
export const staggerContainer: Variants = {
  hidden: {},
  visible: {
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.3,
    },
  },
}

export const staggerItem: Variants = {
  hidden: {
    opacity: 0,
    y: 20,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Text animations
export const textReveal: Variants = {
  hidden: {
    y: '100%',
    opacity: 0,
  },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.8,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const letterReveal: Variants = {
  hidden: {
    opacity: 0,
    y: 50,
    rotateX: -90,
  },
  visible: {
    opacity: 1,
    y: 0,
    rotateX: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Hover animations
export const magneticHover = {
  scale: 1.05,
  y: -5,
  transition:{
    duration: 0.3,
    ease: [0.25, 0.46, 0.45, 0.94],
  },
}

export const buttonHover = {
  scale: 1.02,
  y: -2,
  boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.15)',
  transition: {
    duration: 0.2,
    ease: 'easeOut',
  },
}

export const cardHover = {
  y: -10,
  scale: 1.02,
  boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
  transition: {
    duration: 0.3,
    ease: [0.25, 0.46, 0.45, 0.94],
  },
}

// Page transitions
export const pageTransition: Variants = {
  initial: {
    opacity: 0,
    y: 20,
  },
  in: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
  out: {
    opacity: 0,
    y: -20,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Loading animations
export const spinner = {
  animate: {
    rotate: 360,
    transition: {
      duration: 1,
      repeat: Infinity,
      ease: 'linear',
    },
  },
}

export const pulse = {
  animate: {
    scale: [1, 1.05, 1],
    opacity: [1, 0.8, 1],
    transition: {
      duration: 2,
      repeat: Infinity,
      ease: 'easeInOut',
    },
  },
}

// Parallax helper
export const createParallaxVariants = (strength: number = 50) => ({
  hidden: { y: 0 },
  visible: { y: -strength },
})

// Morphing animations
export const morphButton: Variants = {
  idle: {
    borderRadius: '24px',
    scale: 1,
  },
  hover: {
    borderRadius: '32px',
    scale: 1.05,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
  tap: {
    scale: 0.95,
    transition: {
      duration: 0.1,
    },
  },
}

// Timeline animations
export const timelineVariants: Variants = {
  hidden: {
    scaleY: 0,
    originY: 0,
  },
  visible: {
    scaleY: 1,
    transition: {
      duration: 1.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const timelineItemVariants: Variants = {
  hidden: {
    opacity: 0,
    x: -50,
  },
  visible: (i: number) => ({
    opacity: 1,
    x: 0,
    transition: {
      delay: i * 0.3,
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  }),
}

// Gallery animations
export const galleryItemVariants: Variants = {
  hidden: {
    opacity: 0,
    scale: 0.8,
    y: 20,
  },
  visible: (i: number) => ({
    opacity: 1,
    scale: 1,
    y: 0,
    transition: {
      delay: i * 0.1,
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  }),
}

// Navigation animations
export const menuSlide: Variants = {
  closed: {
    x: '-100%',
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
  open: {
    x: 0,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const menuItemSlide: Variants = {
  closed: {
    x: -20,
    opacity: 0,
  },
  open: (i: number) => ({
    x: 0,
    opacity: 1,
    transition: {
      delay: i * 0.1,
      duration: 0.3,
    },
  }),
}

// Custom easing curves
export const easings = {
  easeInOutCubic: [0.25, 0.46, 0.45, 0.94],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeOutExpo: [0.19, 1, 0.22, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6],
}

// Animation configuration
export const animationConfig = {
  fast: { duration: 0.2 },
  normal: { duration: 0.3 },
  slow: { duration: 0.5 },
  slower: { duration: 0.8 },
}

// Utility functions
export const createStaggerAnimation = (
  delay: number = 0.1,
  delayChildren: number = 0
) => ({
  hidden: {},
  visible: {
    transition: {
      staggerChildren: delay,
      delayChildren,
    },
  },
})

export const createSlideAnimation = (
  direction: 'up' | 'down' | 'left' | 'right' = 'up',
  distance: number = 60
) => {
  const directions = {
    up: { y: distance },
    down: { y: -distance },
    left: { x: distance },
    right: { x: -distance },
  }

  return {
    hidden: {
      opacity: 0,
      ...directions[direction],
    },
    visible: {
      opacity: 1,
      x: 0,
      y: 0,
      transition: {
        duration: 0.6,
        ease: easings.easeInOutCubic,
      },
    },
  }
}

export const createScaleAnimation = (
  initialScale: number = 0.8,
  finalScale: number = 1
) => ({
  hidden: {
    opacity: 0,
    scale: initialScale,
  },
  visible: {
    opacity: 1,
    scale: finalScale,
    transition: {
      duration: 0.5,
      ease: easings.easeOutQuart,
    },
  },
})

// Page-specific animations
export const heroAnimations = {
  title: {
    hidden: { opacity: 0, y: 100, scale: 0.8 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        duration: 0.8,
        ease: easings.easeInOutCubic,
        staggerChildren: 0.1,
      },
    },
  },
  subtitle: {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        delay: 0.5,
        duration: 0.8,
        ease: easings.easeInOutCubic,
      },
    },
  },
}

export const sectionAnimations = {
  container: staggerContainer,
  item: staggerItem,
  title: fadeInUp,
  subtitle: fadeInUp,
}

// Export all animations
export const animations = {
  fadeInUp,
  fadeInDown,
  fadeInLeft,
  fadeInRight,
  scaleIn,
  slideInUp,
  staggerContainer,
  staggerItem,
  textReveal,
  letterReveal,
  magneticHover,
  buttonHover,
  cardHover,
  pageTransition,
  spinner,
  pulse,
  morphButton,
  timelineVariants,
  timelineItemVariants,
  galleryItemVariants,
  menuSlide,
  menuItemSlide,
  heroAnimations,
  sectionAnimations,
}

export default animations

--- FILE: src/utils/constants.ts ---
// Company Information
export const COMPANY_INFO = {
  name: 'BOTTAMEDI',
  fullName: 'Frutta e Verdura di Pierluigi Bottamedi',
  tagline: {
    it: 'Dal 1974, la passione per la qualità',
    de: 'Seit 1974, Leidenschaft für Qualität'
  },
  description: {
    it: 'Cinquant\'anni di eccellenza nell\'ortofrutta. Freschezza quotidiana e qualità superiore dal cuore del Trentino Alto Adige.',
    de: 'Fünfzig Jahre Exzellenz in Obst und Gemüse. Tägliche Frische und höchste Qualität aus dem Herzen Südtirols.'
  },
  foundedYear: 1974,
  vatNumber: '02273530226'
} as const

// Contact Information
export const CONTACT_INFO = {
  retail: {
    name: {
      it: 'Banchetto (Dettaglio)',
      de: 'Marktstand (Detail)'
    },
    address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
    phone: '351 577 6198',
    phoneFormatted: '+39 351 577 6198',
    email: 'bottamedipierluigi@virgilio.it',
    hours: {
      it: 'Lun-Sab: 07:00-19:30',
      de: 'Mo-Sa: 07:00-19:30'
    },
    coordinates: {
      lat: 46.210472,
      lng: 11.097015
    },
    googleMapsUrl: 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN'
  },
  horeca: {
    name: {
      it: 'Ingrosso HORECA',
      de: 'Großhandel HORECA'
    },
    address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
    phone: '0461 602534',
    phoneFormatted: '+39 0461 602534',
    email: 'bottamedipierluigi@virgilio.it',
    coordinates: {
      lat: 46.213210,
      lng: 11.098930
    },
    googleMapsUrl: 'https://www.google.com/maps/search/?api=1&query=Bottamedi+Ingrosso+Ortofrutta+Via+Alcide+de+Gasperi+47+Mezzolombardo'
  },
  general: {
    email: 'bottamedipierluigi@virgilio.it',
    website: 'https://www.bottamedi.eu'
  }
} as const

// Social Media
export const SOCIAL_MEDIA = {
  facebook: {
    url: 'https://www.facebook.com/profile.php?id=100063456281899',
    handle: '@bottamedi'
  },
  instagram: {
    url: 'https://instagram.com/banchetto.bottamedi',
    handle: '@banchetto.bottamedi'
  },
  whatsapp: {
    url: 'https://wa.me/393515776198',
    number: '+39 351 577 6198'
  }
} as const

// Navigation - SEZIONI CORRETTE
export const NAVIGATION = {
  items: [
    { id: 'hero', label: { it: 'Home', de: 'Home' } },
    { id: 'about', label: { it: 'La Nostra Storia', de: 'Unsere Geschichte' } },
    { id: 'dettaglio', label: { it: 'Al Banchetto', de: 'Marktstand' } }, // CORRETTO
    { id: 'services', label: { it: 'Servizi', de: 'Dienstleistungen' } },
    { id: 'products', label: { it: 'Prodotti', de: 'Produkte' } },
    { id: 'contact', label: { it: 'Contatti', de: 'Kontakt' } }
  ]
} as const

// Validation Rules - AGGIUNTO
export const VALIDATION_RULES = {
  email: {
    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    message: {
      it: 'Email non valida',
      de: 'Ungültige E-Mail'
    }
  },
  phone: {
    pattern: /^[\+]?[0-9\s\-\(\)]{8,15}$/,
    message: {
      it: 'Numero di telefono non valido',
      de: 'Ungültige Telefonnummer'
    }
  },
  name: {
    minLength: 2,
    maxLength: 50,
    pattern: /^[a-zA-ZÀ-ÿ\s\-']+$/,
    message: {
      it: 'Nome non valido',
      de: 'Ungültiger Name'
    }
  },
  message: {
    minLength: 10,
    maxLength: 1000,
    message: {
      it: 'Messaggio troppo breve o lungo',
      de: 'Nachricht zu kurz oder zu lang'
    }
  }
} as const

// Products Categories
export const PRODUCT_CATEGORIES = {
  seasonal: {
    id: 'seasonal',
    name: { it: 'Frutta di Stagione', de: 'Saisonales Obst' },
    icon: '🍎',
    color: 'from-red-500 to-pink-500'
  },
  vegetables: {
    id: 'vegetables',
    name: { it: 'Verdure Fresche', de: 'Frisches Gemüse' },
    icon: '🥕',
    color: 'from-green-500 to-emerald-500'
  },
  specialty: {
    id: 'specialty',
    name: { it: 'Specialità', de: 'Spezialitäten' },
    icon: '✨',
    color: 'from-amber-500 to-orange-500'
  }
} as const

// Services
export const SERVICES = {
  retail: {
    id: 'retail',
    title: { it: 'Vendita al Dettaglio', de: 'Einzelhandel' },
    icon: '🛒',
    color: 'from-brand-500 to-brand-600'
  },
  horeca: {
    id: 'horeca',
    title: { it: 'Servizi HORECA', de: 'HORECA-Service' },
    icon: '🏨',
    color: 'from-accent-500 to-accent-600'
  },
  consulting: {
    id: 'consulting',
    title: { it: 'Consulenza Specializzata', de: 'Fachberatung' },
    icon: '💡',
    color: 'from-emerald-500 to-emerald-600'
  }
} as const

// SEO Meta Data
export const SEO_META = {
  title: {
    it: 'Bottamedi Frutta e Verdura Mezzolombardo | Ingrosso e Dettaglio Trentino Alto Adige',
    de: 'Bottamedi Obst und Gemüse Mezzolombardo | Großhandel und Einzelhandel Südtirol'
  },
  description: {
    it: 'Bottamedi: da 50 anni qualità e freschezza in frutta e verdura a Mezzolombardo. Servizio ingrosso HORECA in Trentino Alto Adige e vendita al dettaglio al Banchetto.',
    de: 'Bottamedi: seit 50 Jahren Qualität und Frische bei Obst und Gemüse in Mezzolombardo. HORECA-Großhandelsservice in Südtirol und Einzelhandel am Marktstand.'
  },
  keywords: {
    it: 'frutta e verdura, mezzolombardo, trentino alto adige, ingrosso ortofrutta, dettaglio frutta verdura, Bottamedi, prodotti freschi, qualità, famiglia, HORECA, ristoranti, hotel, catering, Melinda, prodotti tipici trentini, consegna frutta verdura, ingrosso alimentari trentino',
    de: 'obst und gemüse, mezzolombardo, südtirol, trentino, großhandel obst gemüse, einzelhandel obst gemüse, Bottamedi, frische produkte, qualität, familie, HORECA, restaurants, hotels, catering, Melinda, typische südtiroler produkte, obst gemüse lieferung, lebensmittel großhandel südtirol'
  },
  ogImage: '/images/banco_varieta_autunno.webp'
} as const

// Timeline Data
export const TIMELINE_DATA = {
  items: [
    {
      year: '1974',
      title: { 
        it: 'Le Radici del Sapore', 
        de: 'Die Wurzeln des Geschmacks' 
      },
      description: {
        it: 'Tutto ha inizio con nonno Luigi. Con dedizione e rispetto per la terra del Trentino Alto Adige, piantò il seme di un\'attività basata sulla qualità e fiducia.',
        de: 'Alles beginnt mit Großvater Luigi. Mit Hingabe und Respekt für das Südtiroler Land pflanzte er den Samen eines Geschäfts, das auf Qualität und Vertrauen basiert.'
      },
      image: '/images/melinda_golden.webp'
    },
    {
      year: '1990',
      title: { 
        it: 'L\'Orizzonte si Allarga', 
        de: 'Der Horizont erweitert sich' 
      },
      description: {
        it: 'L\'eredità cresce con papà Giovanni. Albe ai mercati, ricerca delle primizie migliori, consolidamento dei rapporti: il servizio si struttura.',
        de: 'Das Erbe wächst mit Vater Giovanni. Frühe Morgenstunden auf den Märkten, Suche nach den besten Früchten, Festigung der Beziehungen: der Service strukturiert sich.'
      },
      image: '/images/pomodori_cuore_bue.webp'
    },
    {
      year: 'Oggi',
      title: { 
        it: 'Il Futuro nelle Nostre Mani', 
        de: 'Die Zukunft in unseren Händen' 
      },
      description: {
        it: 'Oggi, Pierluigi e la famiglia Bottamedi continuano la tradizione, unendo esperienza e innovazione per il futuro dell\'ortofrutta del Trentino Alto Adige.',
        de: 'Heute führen Pierluigi und die Familie Bottamedi die Tradition fort und verbinden Erfahrung mit Innovation für die Zukunft des Südtiroler Obst- und Gemüsesektors.'
      },
      image: '/images/kiwi-cuore.webp'
    }
  ]
} as const

// Values Data
export const VALUES_DATA = {
  items: [
    {
      icon: '🌱',
      title: { it: 'Freschezza', de: 'Frische' },
      description: {
        it: 'Selezioniamo quotidianamente solo i prodotti migliori',
        de: 'Wir wählen täglich nur die besten Produkte aus'
      }
    },
    {
      icon: '⭐',
      title: { it: 'Qualità', de: 'Qualität' },
      description: {
        it: 'Standard elevati garantiti da tre generazioni di esperienza',
        de: 'Hohe Standards garantiert durch drei Generationen Erfahrung'
      }
    },
    {
      icon: '❤️',
      title: { it: 'Passione', de: 'Leidenschaft' },
      description: {
        it: 'L\'amore per il nostro lavoro si riflette in ogni prodotto',
        de: 'Die Liebe zu unserer Arbeit spiegelt sich in jedem Produkt wider'
      }
    },
    {
      icon: '🏔️',
      title: { it: 'Territorio', de: 'Territorium' },
      description: {
        it: 'Valorizziamo i sapori autentici del Trentino Alto Adige',
        de: 'Wir schätzen die authentischen Aromen Südtirols'
      }
    }
  ]
} as const

// Brand Colors
export const BRAND_COLORS = {
  primary: {
    50: '#f0fdf4',
    100: '#dcfce7',
    200: '#bbf7d0',
    300: '#86efac',
    400: '#4ade80',
    500: '#22c55e',
    600: '#16a34a',
    700: '#15803d',
    800: '#166534',
    900: '#14532d',
    950: '#052e16'
  },
  accent: {
    50: '#fffbeb',
    100: '#fef3c7',
    200: '#fde68a',
    300: '#fcd34d',
    400: '#fbbf24',
    500: '#f59e0b',
    600: '#d97706',
    700: '#b45309',
    800: '#92400e',
    900: '#78350f',
    950: '#451a03'
  }
} as const

// Animation Durations - OTTIMIZZATI
export const ANIMATION_DURATION = {
  fast: 150,
  normal: 250,
  slow: 400,
  slower: 600
} as const

// Breakpoints
export const BREAKPOINTS = {
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px'
} as const

// Z-Index Layers
export const Z_INDEX = {
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  modal: 1040,
  popover: 1050,
  tooltip: 1060,
  toast: 1070
} as const

// Local Storage Keys
export const STORAGE_KEYS = {
  language: 'bottamedi-language',
  theme: 'bottamedi-theme',
  newsletter: 'bottamedi-newsletter-subscribed',
  cookieConsent: 'bottamedi-cookie-consent'
} as const

// Performance Thresholds
export const PERFORMANCE_THRESHOLDS = {
  loadTime: {
    good: 1000,
    needsImprovement: 1500,
    poor: 2500
  },
  firstContentfulPaint: {
    good: 1200,
    needsImprovement: 2000,
    poor: 3000
  },
  largestContentfulPaint: {
    good: 1800,
    needsImprovement: 2500,
    poor: 3500
  },
  cumulativeLayoutShift: {
    good: 0.1,
    needsImprovement: 0.25,
    poor: 0.25
  }
} as const

// Feature Flags - OTTIMIZZATI
export const FEATURE_FLAGS = {
  enableAnalytics: false, // Disabilitato in dev
  enableNewsletter: true,
  enableCookieConsent: false, // Disabilitato in dev
  enableParticles: false, // Disabilitato per performance
  enableAnimations: true,
  enableLazyLoading: true,
  enableServiceWorker: false, // Disabilitato in dev
  enableOfflineMode: false,
  enableDarkMode: false
} as const

// Default Export
export default {
  COMPANY_INFO,
  CONTACT_INFO,
  SOCIAL_MEDIA,
  NAVIGATION,
  PRODUCT_CATEGORIES,
  SERVICES,
  BRAND_COLORS,
  ANIMATION_DURATION,
  BREAKPOINTS,
  Z_INDEX,
  STORAGE_KEYS,
  SEO_META,
  TIMELINE_DATA,
  VALUES_DATA,
  PERFORMANCE_THRESHOLDS,
  FEATURE_FLAGS,
  VALIDATION_RULES
} as const

--- FILE: src/utils/helpers.ts ---
import { VALIDATION_RULES, STORAGE_KEYS } from './constants'

// String utilities
export const capitalizeFirst = (str: string): string => {
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()
}

export const capitalizeWords = (str: string): string => {
  return str.replace(/\w\S*/g, (txt) => 
    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
  )
}

export const slugify = (str: string): string => {
  return str
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '') // Remove special characters
    .replace(/[\s_-]+/g, '-') // Replace spaces and underscores with hyphens
    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
}

export const truncateText = (text: string, maxLength: number, suffix = '...'): string => {
  if (text.length <= maxLength) return text
  return text.substring(0, maxLength - suffix.length) + suffix
}

export const stripHtml = (html: string): string => {
  const div = document.createElement('div')
  div.innerHTML = html
  return div.textContent || div.innerText || ''
}

// Number utilities
export const formatPrice = (price: number, currency = '€'): string => {
  return new Intl.NumberFormat('it-IT', {
    style: 'currency',
    currency: currency === '€' ? 'EUR' : currency,
  }).format(price)
}

export const formatNumber = (num: number, locale = 'it-IT'): string => {
  return new Intl.NumberFormat(locale).format(num)
}

export const clamp = (value: number, min: number, max: number): number => {
  return Math.min(Math.max(value, min), max)
}

export const roundToDecimals = (num: number, decimals: number): number => {
  return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals)
}

export const generateRandomId = (length = 8): string => {
  return Math.random().toString(36).substring(2, 2 + length)
}

// Date utilities
export const formatDate = (date: Date | string, locale = 'it-IT'): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return new Intl.DatetimeFormat(locale, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(dateObj)
}

export const formatTime = (date: Date | string, locale = 'it-IT'): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return new Intl.DateTimeFormat(locale, {
    hour: '2-digit',
    minute: '2-digit',
  }).format(dateObj)
}

export const formatDateTime = (date: Date | string, locale = 'it-IT'): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return new Intl.DateTimeFormat(locale, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  }).format(dateObj)
}

export const isToday = (date: Date | string): boolean => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  const today = new Date()
  return dateObj.toDateString() === today.toDateString()
}

export const daysSince = (date: Date | string): number => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  const today = new Date()
  const diffTime = Math.abs(today.getTime() - dateObj.getTime())
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24))
}

// Validation utilities
export const validateEmail = (email: string): boolean => {
  return VALIDATION_RULES.email.pattern.test(email)
}

export const validatePhone = (phone: string): boolean => {
  return VALIDATION_RULES.phone.pattern.test(phone)
}

export const validateName = (name: string): boolean => {
  return name.length >= VALIDATION_RULES.name.minLength && 
         name.length <= VALIDATION_RULES.name.maxLength &&
         VALIDATION_RULES.name.pattern.test(name)
}

export const validateMessage = (message: string): boolean => {
  return message.length >= VALIDATION_RULES.message.minLength && 
         message.length <= VALIDATION_RULES.message.maxLength
}

// URL utilities
export const isValidUrl = (url: string): boolean => {
  try {
    new URL(url)
    return true
  } catch {
    return false
  }
}

export const getUrlParams = (url = window.location.href): URLSearchParams => {
  return new URL(url).searchParams
}

export const buildUrl = (base: string, params: Record<string, string>): string => {
  const url = new URL(base)
  Object.entries(params).forEach(([key, value]) => {
    url.searchParams.set(key, value)
  })
  return url.toString()
}

export const getBaseDomain = (url: string): string => {
  try {
    return new URL(url).hostname
  } catch {
    return ''
  }
}

// Local Storage utilities
export const setLocalStorage = (key: string, value: any): void => {
  try {
    localStorage.setItem(key, JSON.stringify(value))
  } catch (error) {
    console.warn('Failed to save to localStorage:', error)
  }
}

export const getLocalStorage = <T>(key: string, defaultValue: T): T => {
  try {
    const item = localStorage.getItem(key)
    return item ? JSON.parse(item) : defaultValue
  } catch (error) {
    console.warn('Failed to read from localStorage:', error)
    return defaultValue
  }
}

export const removeLocalStorage = (key: string): void => {
  try {
    localStorage.removeItem(key)
  } catch (error) {
    console.warn('Failed to remove from localStorage:', error)
  }
}

export const clearLocalStorage = (): void => {
  try {
    localStorage.clear()
  } catch (error) {
    console.warn('Failed to clear localStorage:', error)
  }
}

// Session Storage utilities
export const setSessionStorage = (key: string, value: any): void => {
  try {
    sessionStorage.setItem(key, JSON.stringify(value))
  } catch (error) {
    console.warn('Failed to save to sessionStorage:', error)
  }
}

export const getSessionStorage = <T>(key: string, defaultValue: T): T => {
  try {
    const item = sessionStorage.getItem(key)
    return item ? JSON.parse(item) : defaultValue
  } catch (error) {
    console.warn('Failed to read from sessionStorage:', error)
    return defaultValue
  }
}

// Cookie utilities
export const setCookie = (name: string, value: string, days: number): void => {
  const expires = new Date()
  expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000)
  document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict`
}

export const getCookie = (name: string): string | null => {
  const nameEQ = name + '='
  const ca = document.cookie.split(';')
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i]
    while (c.charAt(0) === ' ') c = c.substring(1, c.length)
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length)
  }
  return null
}

export const deleteCookie = (name: string): void => {
  setCookie(name, '', -1)
}

// Array utilities
export const shuffle = <T>(array: T[]): T[] => {
  const shuffled = [...array]
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
  }
  return shuffled
}

export const chunk = <T>(array: T[], size: number): T[][] => {
  const chunks: T[][] = []
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size))
  }
  return chunks
}

export const unique = <T>(array: T[]): T[] => {
  return [...new Set(array)]
}

export const groupBy = <T>(array: T[], key: keyof T): Record<string, T[]> => {
  return array.reduce((groups, item) => {
    const group = String(item[key])
    groups[group] = groups[group] || []
    groups[group].push(item)
    return groups
  }, {} as Record<string, T[]>)
}

export const sortBy = <T>(array: T[], key: keyof T, direction: 'asc' | 'desc' = 'asc'): T[] => {
  return [...array].sort((a, b) => {
    const aVal = a[key]
    const bVal = b[key]
    
    if (aVal < bVal) return direction === 'asc' ? -1 : 1
    if (aVal > bVal) return direction === 'asc' ? 1 : -1
    return 0
  })
}

// Object utilities
export const pick = <T, K extends keyof T>(obj: T, keys: K[]): Pick<T, K> => {
  const result = {} as Pick<T, K>
  keys.forEach(key => {
    if (key in obj) {
      result[key] = obj[key]
    }
  })
  return result
}

export const omit = <T, K extends keyof T>(obj: T, keys: K[]): Omit<T, K> => {
  const result = { ...obj }
  keys.forEach(key => {
    delete result[key]
  })
  return result
}

export const deepClone = <T>(obj: T): T => {
  if (obj === null || typeof obj !== 'object') return obj
  if (obj instanceof Date) return new Date(obj.getTime()) as unknown as T
  if (obj instanceof Array) return obj.map(item => deepClone(item)) as unknown as T
  if (typeof obj === 'object') {
    const clonedObj = {} as T
    Object.keys(obj).forEach(key => {
      (clonedObj as any)[key] = deepClone((obj as any)[key])
    })
    return clonedObj
  }
  return obj
}

export const isEmpty = (value: any): boolean => {
  if (value == null) return true
  if (typeof value === 'string') return value.trim().length === 0
  if (Array.isArray(value)) return value.length === 0
  if (typeof value === 'object') return Object.keys(value).length === 0
  return false
}

// DOM utilities
export const scrollToElement = (elementId: string, offset = 0): void => {
  const element = document.getElementById(elementId)
  if (element) {
    const elementPosition = element.getBoundingClientRect().top + window.pageYOffset
    window.scrollTo({
      top: elementPosition - offset,
      behavior: 'smooth'
    })
  }
}

export const scrollToTop = (): void => {
  window.scrollTo({
    top: 0,
    behavior: 'smooth'
  })
}

export const getElementPosition = (element: HTMLElement): { x: number; y: number } => {
  const rect = element.getBoundingClientRect()
  return {
    x: rect.left + window.scrollX,
    y: rect.top + window.scrollY
  }
}

export const isElementInViewport = (element: HTMLElement): boolean => {
  const rect = element.getBoundingClientRect()
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
    rect.right <= (window.innerWidth || document.documentElement.clientWidth)
  )
}

export const getScrollPercentage = (): number => {
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop
  const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight
  return (scrollTop / scrollHeight) * 100
}

// Image utilities
export const preloadImage = (src: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const img = new Image()
    img.onload = () => resolve()
    img.onerror = reject
    img.src = src
  })
}

export const preloadImages = (urls: string[]): Promise<void[]> => {
  return Promise.all(urls.map(preloadImage))
}

export const getImageDimensions = (src: string): Promise<{ width: number; height: number }> => {
  return new Promise((resolve, reject) => {
    const img = new Image()
    img.onload = () => resolve({ width: img.width, height: img.height })
    img.onerror = reject
    img.src = src
  })
}

// Performance utilities
export const debounce = <T extends (...args: any[]) => any>(
  func: T,
  wait: number
): ((...args: Parameters<T>) => void) => {
  let timeout: NodeJS.Timeout | null = null
  
  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

export const throttle = <T extends (...args: any[]) => any>(
  func: T,
  limit: number
): ((...args: Parameters<T>) => void) => {
  let inThrottle: boolean
  
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args)
      inThrottle = true
      setTimeout(() => inThrottle = false, limit)
    }
  }
}

export const memoize = <T extends (...args: any[]) => any>(fn: T): T => {
  const cache = new Map()
  
  return ((...args: Parameters<T>) => {
    const key = JSON.stringify(args)
    if (cache.has(key)) {
      return cache.get(key)
    }
    const result = fn(...args)
    cache.set(key, result)
    return result
  }) as T
}

// Device detection
export const isMobile = (): boolean => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
}

export const isIOS = (): boolean => {
  return /iPad|iPhone|iPod/.test(navigator.userAgent)
}

export const isAndroid = (): boolean => {
  return /Android/.test(navigator.userAgent)
}

export const isSafari = (): boolean => {
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
}

export const getTouchSupport = (): boolean => {
  return 'ontouchstart' in window || navigator.maxTouchPoints > 0
}

// Browser utilities
export const copyToClipboard = async (text: string): Promise<boolean> => {
  try {
    await navigator.clipboard.writeText(text)
    return true
  } catch (error) {
    // Fallback for older browsers
    const textArea = document.createElement('textarea')
    textArea.value = text
    document.body.appendChild(textArea)
    textArea.focus()
    textArea.select()
    try {
      document.execCommand('copy')
      document.body.removeChild(textArea)
      return true
    } catch (fallbackError) {
      document.body.removeChild(textArea)
      return false
    }
  }
}

export const downloadFile = (blob: Blob, filename: string): void => {
  const url = window.URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.style.display = 'none'
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  window.URL.revokeObjectURL(url)
  document.body.removeChild(a)
}

export const shareContent = async (data: ShareData): Promise<boolean> => {
  if (navigator.share) {
    try {
      await navigator.share(data)
      return true
    } catch (error) {
      console.warn('Native sharing failed:', error)
    }
  }
  
  // Fallback: copy URL to clipboard
  if (data.url) {
    return await copyToClipboard(data.url)
  }
  
  return false
}

// Language utilities
export const getLanguageFromStorage = (): 'it' | 'de' => {
  return getLocalStorage(STORAGE_KEYS.language, 'it')
}

export const setLanguageToStorage = (language: 'it' | 'de'): void => {
  setLocalStorage(STORAGE_KEYS.language, language)
}

export const getBrowserLanguage = (): 'it' | 'de' => {
  const lang = navigator.language.toLowerCase()
  if (lang.startsWith('de')) return 'de'
  return 'it' // Default to Italian
}

// Error handling
export const handleError = (error: unknown, context?: string): void => {
  const message = error instanceof Error ? error.message : 'Unknown error'
  console.error(`${context ? `[${context}] ` : ''}${message}`, error)
  
  // In production, you might want to send errors to a logging service
  if (process.env.NODE_ENV === 'production') {
    // logErrorToService(error, context)
  }
}

export const safeJsonParse = <T>(json: string, fallback: T): T => {
  try {
    return JSON.parse(json)
  } catch {
    return fallback
  }
}

// Export all utilities
export const utils = {
  // String
  capitalizeFirst,
  capitalizeWords,
  slugify,
  truncateText,
  stripHtml,
  
  // Number
  formatPrice,
  formatNumber,
  clamp,
  roundToDecimals,
  generateRandomId,
  
  // Date
  formatDate,
  formatTime,
  formatDateTime,
  isToday,
  daysSince,
  
  // Validation
  validateEmail,
  validatePhone,
  validateName,
  validateMessage,
  
  // URL
  isValidUrl,
  getUrlParams,
  buildUrl,
  getBaseDomain,
  
  // Storage
  setLocalStorage,
  getLocalStorage,
  removeLocalStorage,
  clearLocalStorage,
  setSessionStorage,
  getSessionStorage,
  setCookie,
  getCookie,
  deleteCookie,
  
  // Array
  shuffle,
  chunk,
  unique,
  groupBy,
  sortBy,
  
  // Object
  pick,
  omit,
  deepClone,
  isEmpty,
  
  // DOM
  scrollToElement,
  scrollToTop,
  getElementPosition,
  isElementInViewport,
  getScrollPercentage,
  
  // Image
  preloadImage,
  preloadImages,
  getImageDimensions,
  
  // Performance
  debounce,
  throttle,
  memoize,
  
  // Device
  isMobile,
  isIOS,
  isAndroid,
  isSafari,
  getTouchSupport,
  
  // Browser
  copyToClipboard,
  downloadFile,
  shareContent,
  
  // Language
  getLanguageFromStorage,
  setLanguageToStorage,
  getBrowserLanguage,
  
  // Error handling
  handleError,
  safeJsonParse
}

export default utils

--- FILE: src/components/ui/Button.tsx ---
import React from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface ButtonProps extends BaseComponentProps {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  loading?: boolean
  disabled?: boolean
  icon?: React.ReactNode
  iconPosition?: 'left' | 'right'
  fullWidth?: boolean
  onClick?: () => void
  type?: 'button' | 'submit' | 'reset'
  href?: string
  target?: string
  rel?: string
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  loading = false,
  disabled = false,
  icon,
  iconPosition = 'left',
  fullWidth = false,
  onClick,
  type = 'button',
  href,
  target,
  rel,
  className = '',
  ...props
}) => {
  // Base styles
  const baseStyles = `
    relative inline-flex items-center justify-center font-semibold
    rounded-2xl transition-all duration-300 focus:outline-none focus:ring-4
    transform-gpu will-change-transform disabled:cursor-not-allowed
    ${fullWidth ? 'w-full' : ''}
  `

  // Variant styles
  const variants = {
    primary: `
      bg-gradient-to-r from-brand-500 to-brand-600 text-white
      hover:from-brand-600 hover:to-brand-700 hover:shadow-lg hover:shadow-brand-500/25
      focus:ring-brand-500/30 disabled:from-neutral-400 disabled:to-neutral-400
    `,
    secondary: `
      bg-gradient-to-r from-accent-500 to-accent-600 text-white
      hover:from-accent-600 hover:to-accent-700 hover:shadow-lg hover:shadow-accent-500/25
      focus:ring-accent-500/30 disabled:from-neutral-400 disabled:to-neutral-400
    `,
    outline: `
      border-2 border-brand-500 text-brand-600 bg-transparent
      hover:bg-brand-500 hover:text-white hover:shadow-lg
      focus:ring-brand-500/30 disabled:border-neutral-300 disabled:text-neutral-300
    `,
    ghost: `
      text-neutral-700 bg-transparent hover:bg-neutral-100
      focus:ring-neutral-500/30 disabled:text-neutral-300
    `
  }

  // Size styles
  const sizes = {
    sm: 'px-4 py-2 text-sm min-h-[36px]',
    md: 'px-6 py-3 text-base min-h-[44px]',
    lg: 'px-8 py-4 text-lg min-h-[52px]',
    xl: 'px-10 py-5 text-xl min-h-[60px]'
  }

  const buttonClass = `
    ${baseStyles}
    ${variants[variant]}
    ${sizes[size]}
    ${className}
  `.trim()

  // Loading spinner
  const LoadingSpinner = () => (
    <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
  )

  // Button content
  const ButtonContent = () => (
    <>
      {loading && <LoadingSpinner />}
      {!loading && icon && iconPosition === 'left' && (
        <span className="mr-2">{icon}</span>
      )}
      {!loading && <span>{children}</span>}
      {!loading && icon && iconPosition === 'right' && (
        <span className="ml-2">{icon}</span>
      )}
    </>
  )

  // Motion variants
  const motionVariants = {
    hover: { 
      scale: disabled || loading ? 1 : 1.02,
      y: disabled || loading ? 0 : -2
    },
    tap: { 
      scale: disabled || loading ? 1 : 0.98,
      y: disabled || loading ? 0 : 0
    }
  }

  // If href is provided, render as link
  if (href) {
    return (
      <motion.a
        href={href}
        target={target}
        rel={rel}
        className={buttonClass}
        whileHover="hover"
        whileTap="tap"
        variants={motionVariants}
      {...props}
    >
      <ButtonContent />
      
      {/* Ripple effect overlay */}
      <motion.div
        className="absolute inset-0 bg-white/20 rounded-2xl opacity-0 pointer-events-none"
        whileHover={{ opacity: variant === 'ghost' ? 0 : 0.1 }}
        transition={{ duration: 0.2 }}
      />
    </motion.button>
  )
}

export default Buttonants}
        {...props}
      >
        <ButtonContent />
      </motion.a>
    )
  }

  // Render as button
  return (
    <motion.button
      type={type}
      onClick={onClick}
      disabled={disabled || loading}
      className={buttonClass}
      whileHover="hover"
      whileTap="tap"
      variants={motionVari

--- FILE: src/components/ui/Card.tsx ---
import React from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface CardProps extends BaseComponentProps {
  variant?: 'default' | 'elevated' | 'bordered' | 'glass'
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl'
  hover?: boolean
  clickable?: boolean
  onClick?: () => void
}

const Card: React.FC<CardProps> = ({
  children,
  variant = 'default',
  padding = 'md',
  hover = false,
  clickable = false,
  onClick,
  className = '',
  ...props
}) => {
  // Base styles
  const baseStyles = `
    relative bg-white rounded-3xl transition-all duration-300
    transform-gpu will-change-transform
    ${clickable ? 'cursor-pointer' : ''}
  `

  // Variant styles
  const variants = {
    default: 'shadow-sm border border-neutral-100',
    elevated: 'shadow-lg hover:shadow-xl',
    bordered: 'border-2 border-neutral-200',
    glass: 'bg-white/80 backdrop-blur-xl border border-white/20 shadow-lg'
  }

  // Padding styles
  const paddings = {
    none: '',
    sm: 'p-4',
    md: 'p-6',
    lg: 'p-8',
    xl: 'p-12'
  }

  const cardClass = `
    ${baseStyles}
    ${variants[variant]}
    ${paddings[padding]}
    ${className}
  `.trim()

  // Motion variants
  const motionVariants = {
    hover: hover ? {
      y: -8,
      scale: 1.02,
      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
    } : {},
    tap: clickable ? { scale: 0.98 } : {}
  }

  return (
    <motion.div
      className={cardClass}
      onClick={onClick}
      whileHover="hover"
      whileTap="tap"
      variants={motionVariants}
      {...props}
    >
      {children}
      
      {/* Magnetic effect overlay */}
      {(hover || clickable) && (
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-brand-500/5 to-accent-500/5 rounded-3xl opacity-0 pointer-events-none"
          whileHover={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        />
      )}
    </motion.div>
  )
}

// Card components
export const CardHeader: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`pb-6 border-b border-neutral-100 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const CardBody: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`py-6 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const CardFooter: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`pt-6 border-t border-neutral-100 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export default Card

--- FILE: src/components/ui/Loading.tsx ---
import React from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface LoadingProps extends BaseComponentProps {
  variant?: 'spinner' | 'dots' | 'pulse' | 'skeleton'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  color?: 'brand' | 'accent' | 'neutral'
  text?: string
  fullScreen?: boolean
}

const Loading: React.FC<LoadingProps> = ({
  variant = 'spinner',
  size = 'md',
  color = 'brand',
  text,
  fullScreen = false,
  className = '',
  ...props
}) => {
  // Size mappings
  const sizes = {
    sm: { spinner: 'w-4 h-4', text: 'text-sm' },
    md: { spinner: 'w-8 h-8', text: 'text-base' },
    lg: { spinner: 'w-12 h-12', text: 'text-lg' },
    xl: { spinner: 'w-16 h-16', text: 'text-xl' }
  }

  // Color mappings
  const colors = {
    brand: 'text-brand-500',
    accent: 'text-accent-500',
    neutral: 'text-neutral-500'
  }

  // Spinner component
  const Spinner = () => (
    <motion.div
      className={`
        ${sizes[size].spinner} border-2 border-current border-t-transparent 
        rounded-full ${colors[color]}
      `}
      animate={{ rotate: 360 }}
      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
    />
  )

  // Dots component
  const Dots = () => (
    <div className="flex space-x-1">
      {[0, 1, 2].map((i) => (
        <motion.div
          key={i}
          className={`
            ${size === 'sm' ? 'w-2 h-2' : size === 'md' ? 'w-3 h-3' : size === 'lg' ? 'w-4 h-4' : 'w-5 h-5'}
            bg-current rounded-full ${colors[color]}
          `}
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.7, 1, 0.7]
          }}
          transition={{
            duration: 0.6,
            repeat: Infinity,
            delay: i * 0.2
          }}
        />
      ))}
    </div>
  )

  // Pulse component
  const Pulse = () => (
    <motion.div
      className={`
        ${sizes[size].spinner} bg-current rounded-full ${colors[color]}
      `}
      animate={{
        scale: [1, 1.2, 1],
        opacity: [1, 0.7, 1]
      }}
      transition={{
        duration: 1.5,
        repeat: Infinity
      }}
    />
  )

  // Skeleton component
  const Skeleton = () => (
    <div className="space-y-3">
      {[1, 0.8, 0.6].map((width, i) => (
        <motion.div
          key={i}
          className={`
            h-4 bg-neutral-200 rounded-lg
            ${size === 'sm' ? 'h-2' : size === 'md' ? 'h-3' : size === 'lg' ? 'h-4' : 'h-5'}
          `}
          style={{ width: `${width * 100}%` }}
          animate={{ opacity: [0.5, 1, 0.5] }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            delay: i * 0.2
          }}
        />
      ))}
    </div>
  )

  // Component mapping
  const components = {
    spinner: <Spinner />,
    dots: <Dots />,
    pulse: <Pulse />,
    skeleton: <Skeleton />
  }

  // Container styles
  const containerClass = `
    flex flex-col items-center justify-center space-y-4
    ${fullScreen ? 'fixed inset-0 bg-white/80 backdrop-blur-sm z-50' : ''}
    ${className}
  `.trim()

  return (
    <div className={containerClass} {...props}>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
      >
        {components[variant]}
      </motion.div>
      
      {text && (
        <motion.p
          className={`${sizes[size].text} ${colors[color]} font-medium`}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2, duration: 0.3 }}
        >
          {text}
        </motion.p>
      )}
    </div>
  )
}

// Skeleton components for specific layouts
export const SkeletonCard: React.FC<{ lines?: number; showAvatar?: boolean }> = ({ 
  lines = 3, 
  showAvatar = false 
}) => (
  <div className="animate-pulse space-y-4 p-6">
    {showAvatar && (
      <div className="flex items-center space-x-4">
        <div className="w-12 h-12 bg-neutral-200 rounded-full"></div>
        <div className="space-y-2 flex-1">
          <div className="h-4 bg-neutral-200 rounded w-1/4"></div>
          <div className="h-3 bg-neutral-200 rounded w-1/2"></div>
        </div>
      </div>
    )}
    <div className="space-y-3">
      {Array.from({ length: lines }).map((_, i) => (
        <div key={i} className="space-y-2">
          <div className={`h-4 bg-neutral-200 rounded ${i === lines - 1 ? 'w-2/3' : 'w-full'}`}></div>
        </div>
      ))}
    </div>
  </div>
)

export const SkeletonImage: React.FC<{ aspect?: 'square' | 'video' | 'wide' }> = ({ 
  aspect = 'video' 
}) => {
  const aspectClasses = {
    square: 'aspect-square',
    video: 'aspect-video',
    wide: 'aspect-[3/1]'
  }

  return (
    <div className={`animate-pulse bg-neutral-200 rounded-2xl ${aspectClasses[aspect]}`}>
      <div className="flex items-center justify-center h-full">
        <svg className="w-12 h-12 text-neutral-400" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd" />
        </svg>
      </div>
    </div>
  )
}

export default Loading

--- FILE: src/components/ui/Modal.tsx ---
import React, { useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface ModalProps extends BaseComponentProps {
  isOpen: boolean
  onClose: () => void
  title?: string
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
  closeOnOverlayClick?: boolean
  closeOnEscape?: boolean
  showCloseButton?: boolean
  preventScroll?: boolean
}

const Modal: React.FC<ModalProps> = ({
  children,
  isOpen,
  onClose,
  title,
  size = 'md',
  closeOnOverlayClick = true,
  closeOnEscape = true,
  showCloseButton = true,
  preventScroll = true,
  className = '',
  ...props
}) => {
  // Size mappings
  const sizes = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
    full: 'max-w-full mx-4'
  }

  // Handle escape key
  useEffect(() => {
    if (!closeOnEscape) return

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        onClose()
      }
    }

    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [isOpen, onClose, closeOnEscape])

  // Handle body scroll
  useEffect(() => {
    if (!preventScroll) return

    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }

    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen, preventScroll])

  // Handle overlay click
  const handleOverlayClick = (e: React.MouseEvent) => {
    if (closeOnOverlayClick && e.target === e.currentTarget) {
      onClose()
    }
  }

  // Animation variants
  const overlayVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 }
  }

  const modalVariants = {
    hidden: {
      opacity: 0,
      scale: 0.75,
      y: 20
    },
    visible: {
      opacity: 1,
      scale: 1,
      y: 0,
      transition: {
        type: 'spring',
        damping: 25,
        stiffness: 300
      }
    },
    exit: {
      opacity: 0,
      scale: 0.75,
      y: 20,
      transition: {
        duration: 0.2
      }
    }
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          {/* Overlay */}
          <motion.div
            className="fixed inset-0 bg-black/50 backdrop-blur-sm"
            variants={overlayVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            transition={{ duration: 0.3 }}
            onClick={handleOverlayClick}
          />

          {/* Modal Container */}
          <div className="flex min-h-full items-center justify-center p-4">
            <motion.div
              className={`
                relative w-full ${sizes[size]} bg-white rounded-3xl shadow-2xl
                max-h-[90vh] overflow-hidden ${className}
              `}
              variants={modalVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              {...props}
            >
              {/* Header */}
              {(title || showCloseButton) && (
                <div className="flex items-center justify-between p-6 border-b border-neutral-100">
                  {title && (
                    <h2 className="text-2xl font-bold text-neutral-900">
                      {title}
                    </h2>
                  )}
                  
                  {showCloseButton && (
                    <motion.button
                      onClick={onClose}
                      className="w-10 h-10 flex items-center justify-center rounded-xl text-neutral-400 hover:text-neutral-600 hover:bg-neutral-100 transition-colors"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </motion.button>
                  )}
                </div>
              )}

              {/* Content */}
              <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
                {children}
              </div>
            </motion.div>
          </div>
        </div>
      )}
    </AnimatePresence>
  )
}

// Modal components
export const ModalHeader: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`px-6 py-4 border-b border-neutral-100 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const ModalBody: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`p-6 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const ModalFooter: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`px-6 py-4 border-t border-neutral-100 flex items-center justify-end space-x-3 ${className}`}
    {...props}
  >
    {children}
  </div>
)

// Confirmation Modal
interface ConfirmationModalProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: () => void
  title: string
  message: string
  confirmText?: string
  cancelText?: string
  variant?: 'danger' | 'warning' | 'info'
}

export const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message,
  confirmText = 'Conferma',
  cancelText = 'Annulla',
  variant = 'info'
}) => {
  const variantStyles = {
    danger: 'text-red-600 bg-red-50',
    warning: 'text-amber-600 bg-amber-50',
    info: 'text-brand-600 bg-brand-50'
  }

  const buttonStyles = {
    danger: 'bg-red-600 hover:bg-red-700',
    warning: 'bg-amber-600 hover:bg-amber-700',
    info: 'bg-brand-600 hover:bg-brand-700'
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="sm">
      <ModalBody>
        <div className="text-center">
          <div className={`w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center ${variantStyles[variant]}`}>
            {variant === 'danger' && (
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            )}
            {variant === 'warning' && (
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            )}
            {variant === 'info' && (
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            )}
          </div>
          
          <h3 className="text-xl font-bold text-neutral-900 mb-2">
            {title}
          </h3>
          
          <p className="text-neutral-600 mb-6">
            {message}
          </p>

          <div className="flex space-x-3">
            <motion.button
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-neutral-300 text-neutral-700 rounded-xl hover:bg-neutral-50 transition-colors"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {cancelText}
            </motion.button>
            
            <motion.button
              onClick={() => {
                onConfirm()
                onClose()
              }}
              className={`flex-1 px-4 py-2 text-white rounded-xl transition-colors ${buttonStyles[variant]}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {confirmText}
            </motion.button>
          </div>
        </div>
      </ModalBody>
    </Modal>
  )
}

export default Modal

--- FILE: src/components/ui/Particles.tsx ---
import React, { useEffect, useRef } from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface ParticleSystemProps extends BaseComponentProps {
  count?: number
  color?: string
  size?: number
  speed?: number
  direction?: 'up' | 'down' | 'left' | 'right' | 'random'
  shape?: 'circle' | 'square' | 'triangle'
  opacity?: number
  blur?: boolean
}

interface Particle {
  id: number
  x: number
  y: number
  vx: number
  vy: number
  size: number
  opacity: number
  color: string
  life: number
  maxLife: number
}

const Particles: React.FC<ParticleSystemProps> = ({
  count = 50,
  color = '#22c55e',
  size = 4,
  speed = 1,
  direction = 'up',
  shape = 'circle',
  opacity = 0.6,
  blur = false,
  className = '',
  ...props
}) => {
  const containerRef = useRef<HTMLDivElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const particlesRef = useRef<Particle[]>([])
  const animationRef = useRef<number>()

  // Initialize particles
  const initParticles = () => {
    const particles: Particle[] = []
    const container = containerRef.current
    if (!container) return particles

    const { width, height } = container.getBoundingClientRect()

    for (let i = 0; i < count; i++) {
      particles.push({
        id: i,
        x: Math.random() * width,
        y: Math.random() * height,
        vx: (Math.random() - 0.5) * speed,
        vy: getDirectionVelocity() * speed,
        size: size + Math.random() * (size / 2),
        opacity: opacity * (0.5 + Math.random() * 0.5),
        color,
        life: Math.random() * 1000,
        maxLife: 1000 + Math.random() * 2000
      })
    }

    return (
    <div
      ref={containerRef}
      className={`absolute inset-0 pointer-events-none overflow-hidden ${className}`}
      {...props}
    >
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full"
        style={{ filter: blur ? 'blur(0.5px)' : 'none' }}
      />
    </div>
  )
}

// Floating elements component (alternative to canvas-based particles)
interface FloatingElementsProps extends BaseComponentProps {
  count?: number
  children: React.ReactNode
  duration?: number
  delay?: number
}

export const FloatingElements: React.FC<FloatingElementsProps> = ({
  count = 20,
  children,
  duration = 6,
  delay = 0,
  className = '',
  ...props
}) => {
  return (
    <div className={`absolute inset-0 pointer-events-none overflow-hidden ${className}`} {...props}>
      {Array.from({ length: count }).map((_, i) => (
        <motion.div
          key={i}
          className="absolute"
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
          }}
          animate={{
            y: [0, -30, 0],
            x: [0, Math.random() * 20 - 10, 0],
            rotate: [0, Math.random() * 360],
            scale: [1, 1.1, 1],
          }}
          transition={{
            duration: duration + Math.random() * 2,
            repeat: Infinity,
            delay: delay + Math.random() * 2,
            ease: 'easeInOut',
          }}
        >
          {children}
        </motion.div>
      ))}
    </div>
  )
}

// Particle trail effect
interface ParticleTrailProps {
  color?: string
  size?: number
  count?: number
  life?: number
}

export const ParticleTrail: React.FC<ParticleTrailProps> = ({
  color = '#22c55e',
  size = 3,
  count = 10,
  life = 1000
}) => {
  const [particles, setParticles] = React.useState<Array<{
    id: number
    x: number
    y: number
    timestamp: number
  }>>([])

  const handleMouseMove = (e: MouseEvent) => {
    const newParticle = {
      id: Date.now() + Math.random(),
      x: e.clientX,
      y: e.clientY,
      timestamp: Date.now()
    }

    setParticles(prev => [...prev.slice(-count + 1), newParticle])
  }

  useEffect(() => {
    document.addEventListener('mousemove', handleMouseMove)
    
    const cleanup = setInterval(() => {
      const now = Date.now()
      setParticles(prev => prev.filter(p => now - p.timestamp < life))
    }, 100)

    return () => {
      document.removeEventListener('mousemove', handleMouseMove)
      clearInterval(cleanup)
    }
  }, [life, count])

  return (
    <div className="fixed inset-0 pointer-events-none z-50">
      {particles.map((particle) => {
        const age = Date.now() - particle.timestamp
        const opacity = Math.max(0, 1 - age / life)
        
        return (
          <motion.div
            key={particle.id}
            className="absolute rounded-full"
            style={{
              left: particle.x - size / 2,
              top: particle.y - size / 2,
              width: size,
              height: size,
              backgroundColor: color,
              opacity,
            }}
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
          />
        )
      })}
    </div>
  )
}

// Background particles for hero sections
export const HeroParticles: React.FC = () => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {/* Floating fruit icons */}
      <FloatingElements count={15} duration={8}>
        <div className="text-2xl opacity-20">🍎</div>
      </FloatingElements>
      
      <FloatingElements count={12} duration={10} delay={2}>
        <div className="text-xl opacity-15">🥕</div>
      </FloatingElements>
      
      <FloatingElements count={10} duration={12} delay={4}>
        <div className="text-lg opacity-10">🍅</div>
      </FloatingElements>

      {/* Abstract particles */}
      <Particles
        count={30}
        color="rgba(34, 197, 94, 0.1)"
        size={2}
        speed={0.5}
        direction="up"
        shape="circle"
      />
    </div>
  )
}

// Section background particles
export const SectionParticles: React.FC<{
  variant?: 'brand' | 'accent' | 'neutral'
  density?: 'low' | 'medium' | 'high'
}> = ({ variant = 'brand', density = 'low' }) => {
  const colors = {
    brand: 'rgba(34, 197, 94, 0.08)',
    accent: 'rgba(245, 158, 11, 0.08)',
    neutral: 'rgba(115, 115, 115, 0.05)'
  }

  const counts = {
    low: 15,
    medium: 25,
    high: 40
  }

  return (
    <Particles
      count={counts[density]}
      color={colors[variant]}
      size={1.5}
      speed={0.3}
      direction="random"
      shape="circle"
      opacity={0.6}
    />
  )
}

export default Particles particles
  }

  // Get velocity based on direction
  const getDirectionVelocity = () => {
    switch (direction) {
      case 'up':
        return -Math.random() * 2 - 0.5
      case 'down':
        return Math.random() * 2 + 0.5
      case 'left':
        return -Math.random() * 2 - 0.5
      case 'right':
        return Math.random() * 2 + 0.5
      case 'random':
      default:
        return (Math.random() - 0.5) * 2
    }
  }

  // Update particles
  const updateParticles = () => {
    const container = containerRef.current
    if (!container) return

    const { width, height } = container.getBoundingClientRect()

    particlesRef.current = particlesRef.current.map(particle => {
      // Update position
      particle.x += particle.vx
      particle.y += particle.vy
      particle.life += 16 // ~60fps

      // Wrap around edges
      if (particle.x < 0) particle.x = width
      if (particle.x > width) particle.x = 0
      if (particle.y < 0) particle.y = height
      if (particle.y > height) particle.y = 0

      // Reset particle if life exceeded
      if (particle.life > particle.maxLife) {
        particle.x = Math.random() * width
        particle.y = direction === 'up' ? height : direction === 'down' ? 0 : Math.random() * height
        particle.life = 0
      }

      return particle
    })
  }

  // Draw particles
  const drawParticles = () => {
    const canvas = canvasRef.current
    const ctx = canvas?.getContext('2d')
    if (!canvas || !ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // Set blur effect
    if (blur) {
      ctx.filter = 'blur(1px)'
    }

    // Draw each particle
    particlesRef.current.forEach(particle => {
      ctx.save()
      
      // Set opacity based on life
      const lifeRatio = 1 - (particle.life / particle.maxLife)
      ctx.globalAlpha = particle.opacity * lifeRatio

      // Set color
      ctx.fillStyle = particle.color

      // Draw shape
      switch (shape) {
        case 'circle':
          ctx.beginPath()
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2)
          ctx.fill()
          break
        case 'square':
          ctx.fillRect(
            particle.x - particle.size / 2,
            particle.y - particle.size / 2,
            particle.size,
            particle.size
          )
          break
        case 'triangle':
          ctx.beginPath()
          ctx.moveTo(particle.x, particle.y - particle.size)
          ctx.lineTo(particle.x - particle.size, particle.y + particle.size)
          ctx.lineTo(particle.x + particle.size, particle.y + particle.size)
          ctx.closePath()
          ctx.fill()
          break
      }

      ctx.restore()
    })
  }

  // Animation loop
  const animate = () => {
    updateParticles()
    drawParticles()
    animationRef.current = requestAnimationFrame(animate)
  }

  // Resize canvas
  const resizeCanvas = () => {
    const canvas = canvasRef.current
    const container = containerRef.current
    if (!canvas || !container) return

    const { width, height } = container.getBoundingClientRect()
    canvas.width = width
    canvas.height = height
  }

  // Initialize
  useEffect(() => {
    particlesRef.current = initParticles()
    resizeCanvas()
    animate()

    const handleResize = () => {
      resizeCanvas()
      particlesRef.current = initParticles()
    }

    window.addEventListener('resize', handleResize)

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
      window.removeEventListener('resize', handleResize)
    }
  }, [count, color, size, speed, direction, shape, opacity])

  return

--- FILE: src/components/3d/FloatingFruits.tsx ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/3d/HeroScene.tsx ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/3d/ParticleSystem.tsx ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/sections/AboutSection.tsx ---
import React from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface AboutSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'La Nostra Storia',
    subtitle: 'Tre Generazioni di Passione',
    timeline: [
      {
        year: '1974',
        title: 'Le Radici',
        description: 'Tutto iniziò con nonno Lorenzo, che con dedizione e amore, fondò la nostra attività basata su qualità e fiducia.',
        image: '/images/melinda_golden.webp'
      },
      {
        year: '2013',
        title: 'La Crescita',
        description: 'Pierluigi continuò ad espandere l\'attività, consolidando rapporti con fornitori e produttori locali e trasformando la passione in un servizio strutturato.',
        image: '/images/pomodori_cuore_bue.webp'
      },
      {
        year: 'OGGI',
        title: 'Il Futuro',
        description: 'Lorenzo, Pierluigi con i figli e il resto della famiglia continuano la tradizione, unendo esperienza e innovazione per il futuro dell\'ortofrutta del Trentino Alto Adige.',
        image: '/images/kiwi-cuore.webp'
      }
    ],
    values: {
      title: 'I Nostri Valori',
      items: [
        {
          icon: '🌱',
          title: 'Freschezza',
          description: 'Selezioniamo quotidianamente solo i prodotti migliori',
          number: '50',
          label: 'Anni di esperienza'
        },
        {
          icon: '⭐',
          title: 'Qualità',
          description: 'Standard elevati garantiti da tre generazioni di esperienza',
          number: '150+',
          label: 'Prodotti selezionati'
        },
        {
          icon: '❤️',
          title: 'Passione',
          description: 'L\'amore per il nostro lavoro si riflette in ogni prodotto',
          number: '50+',
          label: 'Ristoranti serviti'
        },
        {
          icon: '🏔️',
          title: 'Territorio',
          description: 'Valorizzamo i sapori autentici del Trentino Alto Adige',
          number: '6',
          label: 'Giorni a settimana'
        }
      ]
    }
  },
  de: {
    title: 'Unsere Geschichte',
    subtitle: 'Zwei Generationen Leidenschaft',
    timeline: [
      {
        year: '1974',
        title: 'Die Wurzeln',
        description: 'Alles begann mit Großvater Luigi, der mit Hingabe und Liebe für das Südtiroler Land unser Geschäft auf Qualität und Vertrauen gründete.',
        image: '/images/melinda_golden.webp'
      },
      {
        year: '1990',
        title: 'Das Wachstum',
        description: 'Vater Giovanni erweiterte das Geschäft, festigte Beziehungen zu lokalen Produzenten und verwandelte Leidenschaft in strukturierten Service.',
        image: '/images/pomodori_cuore_bue.webp'
      },
      {
        year: 'Heute',
        title: 'Die Zukunft',
        description: 'Pierluigi und die Familie Bottamedi setzen die Tradition fort und verbinden Erfahrung mit Innovation für die Zukunft der Südtiroler Obst- und Gemüsebranche.',
        image: '/images/kiwi-cuore.webp'
      }
    ],
    values: {
      title: 'Unsere Werte',
      items: [
        {
          icon: '🌱',
          title: 'Frische',
          description: 'Wir wählen täglich nur die besten Produkte aus',
          number: '50',
          label: 'Jahre Erfahrung'
        },
        {
          icon: '⭐',
          title: 'Qualität',
          description: 'Hohe Standards garantiert durch drei Generationen Erfahrung',
          number: '150+',
          label: 'Ausgewählte Produkte'
        },
        {
          icon: '❤️',
          title: 'Leidenschaft',
          description: 'Die Liebe zu unserer Arbeit spiegelt sich in jedem Produkt wider',
          number: '50+',
          label: 'Bediente Restaurants'
        },
        {
          icon: '🏔️',
          title: 'Territorium',
          description: 'Wir schätzen die authentischen Aromen Südtirols',
          number: '6',
          label: 'Tage pro Woche'
        }
      ]
    }
  }
}

const TimelineItem: React.FC<{
  item: any
  index: number
  isEven: boolean
}> = ({ item, index, isEven }) => {
  const [ref, inView] = useInView({
    threshold: 0.3,
    triggerOnce: true
  })

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, x: isEven ? -60 : 60 }}
      animate={inView ? { opacity: 1, x: 0 } : {}}
      transition={{ duration: 0.6, delay: index * 0.2 }}
      className={`flex flex-col lg:flex-row items-center gap-8 ${
        isEven ? 'lg:flex-row-reverse' : ''
      }`}
    >
      {/* Content */}
      <div className="flex-1 space-y-4">
        <div className="relative">
          <motion.div
            initial={{ scale: 0 }}
            animate={inView ? { scale: 1 } : {}}
            transition={{ duration: 0.5, delay: index * 0.2 + 0.3 }}
            className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-br from-brand-500 to-brand-600 rounded-xl text-white font-bold text-lg shadow-lg"
          >
            {item.year}
          </motion.div>
        </div>
        
        <motion.h3
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6, delay: index * 0.2 + 0.4 }}
          className="text-2xl lg:text-3xl font-bold text-neutral-900"
        >
          {item.title}
        </motion.h3>
        
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6, delay: index * 0.2 + 0.5 }}
          className="text-base text-neutral-600 leading-relaxed"
        >
          {item.description}
        </motion.p>
      </div>

      {/* Image */}
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={inView ? { opacity: 1, scale: 1 } : {}}
        transition={{ duration: 0.6, delay: index * 0.2 + 0.2 }}
        className="flex-1 relative group max-w-md"
      >
        <div className="relative overflow-hidden rounded-2xl shadow-xl">
          <img
            src={item.image}
            alt={item.title}
            className="w-full h-64 lg:h-72 object-cover transition-transform duration-500 group-hover:scale-105"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        </div>
      </motion.div>
    </motion.div>
  )
}

// Hook personalizzato per il counter animato
const useCountUp = (endValue: number, startValue: number = 0, duration: number = 2000) => {
  const [count, setCount] = React.useState(startValue)
  const [ref, inView] = useInView({ threshold: 0.3, triggerOnce: true })

  React.useEffect(() => {
    if (!inView) return

    let startTime: number
    const animate = (currentTime: number) => {
      if (!startTime) startTime = currentTime
      const progress = Math.min((currentTime - startTime) / duration, 1)
      
      // Easing function per un'animazione più fluida
      const easeOutQuart = 1 - Math.pow(1 - progress, 4)
      const currentValue = startValue + (endValue - startValue) * easeOutQuart
      
      setCount(Math.floor(currentValue))

      if (progress < 1) {
        requestAnimationFrame(animate)
      } else {
        setCount(endValue)
      }
    }

    requestAnimationFrame(animate)
  }, [inView, endValue, startValue, duration])

  return { ref, count }
}

const ValueCard: React.FC<{
  item: any
  index: number
}> = ({ item, index }) => {
  const { ref, count } = useCountUp(
    parseInt(item.number.replace('+', '')),
    0,
    2000 + index * 200
  )

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 30 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      whileHover={{ y: -5, scale: 1.02 }}
      className="relative group"
    >
      <div className="bg-white rounded-2xl p-6 shadow-md hover:shadow-xl transition-all duration-300 border border-neutral-100 h-full">
        {/* Icon e Counter */}
        <div className="text-center mb-4">
          <motion.div
            whileHover={{ scale: 1.1, rotate: 5 }}
            className="text-4xl mb-3"
          >
            {item.icon}
          </motion.div>
          
          {/* Counter animato - dimensioni responsive */}
          <div className="mb-2">
            <motion.span 
              className="text-2xl sm:text-3xl lg:text-4xl font-bold text-brand-600 block"
              key={count}
              initial={{ scale: 1.2, opacity: 0.8 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              {count}{item.number.includes('+') ? '+' : ''}
            </motion.span>
            <p className="text-xs sm:text-sm text-neutral-500 font-medium">
              {item.label}
            </p>
          </div>
        </div>
        
        {/* Title e Description */}
        <div className="text-center">
          <h3 className="text-lg font-bold text-neutral-900 mb-2">
            {item.title}
          </h3>
          <p className="text-neutral-600 text-sm leading-relaxed">
            {item.description}
          </p>
        </div>
        
        {/* Hover effect */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-brand-500/5 to-accent-500/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"
          initial={false}
        />
      </div>
    </motion.div>
  )
}

const AboutSection: React.FC<AboutSectionProps> = ({ language, inView }) => {
  const { scrollYProgress } = useScroll()
  const y = useTransform(scrollYProgress, [0, 1], [0, -30])
  
  const t = translations[language]

  return (
    <section id="about" className="py-16 lg:py-24 bg-gradient-to-br from-neutral-50 to-white relative overflow-hidden">
      {/* Background decorations - Ottimizzate */}
      <motion.div
        style={{ y }}
        className="absolute top-1/4 left-0 w-48 h-48 bg-brand-200/20 rounded-full blur-3xl"
      />
      <motion.div
        style={{ y }}
        className="absolute bottom-1/4 right-0 w-56 h-56 bg-accent-200/20 rounded-full blur-3xl"
      />

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
        >
          <motion.h2
            className="text-3xl lg:text-5xl font-bold text-neutral-900 mb-4"
            style={{
              background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #f59e0b 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}
          >
            {t.title}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="text-lg text-neutral-600 max-w-2xl mx-auto"
          >
            {t.subtitle}
          </motion.p>
        </motion.div>

        {/* Timeline */}
        <div className="space-y-20 mb-20">
          {t.timeline.map((item, index) => (
            <TimelineItem
              key={index}
              item={item}
              index={index}
              isEven={index % 2 === 0}
            />
          ))}
        </div>

        {/* Values Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="text-center mb-12"
        >
          <h3 className="text-2xl lg:text-4xl font-bold text-neutral-900 mb-6">
            {t.values.title}
          </h3>
        </motion.div>

        {/* Values Cards - Grid responsive */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {t.values.items.map((item, index) => (
            <ValueCard key={index} item={item} index={index} />
          ))}
        </div>
      </div>
    </section>
  )
}

export default AboutSection

--- FILE: src/components/sections/Banchettosection.tsx ---
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface BanchettoSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'Al Banchetto: Colori, Sapori e Freschezza Quotidiana',
    subtitle: 'Vieni a trovarci in Via Cavalleggeri Udine a Mezzolombardo!',
    description: 'Lasciati tentare da un\'esplosione di colori, profumi e dalla migliore frutta e verdura freschissima, selezionata per te ogni giorno con la cura e la passione di famiglia che ci contraddistingue da generazioni.',
    cta: 'Orari e Contatti del Banchetto',
    gallery: [
      {
        src: '/images/banco_varieta_autunno.webp',
        title: 'Abbondanza di Stagione',
        description: 'Ricca esposizione di frutta fresca di stagione, verdure e prodotti tipici del Trentino'
      },
      {
        src: '/images/pomodori_cuore_bue.webp',
        title: 'Verdure dell\'Orto Locale',
        description: 'Pomodori cuore di bue rossi freschi e profumati'
      },
      {
        src: '/images/melinda_golden.webp',
        title: 'Golden Melinda',
        description: 'Mele Golden Melinda fresche e succose'
      },
      {
        src: '/images/angurie.webp',
        title: 'Dolcezza Estiva',
        description: 'Angurie fresche e succose, tagliate e intere'
      },
      {
        src: '/images/meloni_sattin_dettaglio.webp',
        title: 'Meloni Pregiati',
        description: 'Meloni Sattin Dolce Passione profumati e dolci'
      },
      {
        src: '/images/banco_frigo_disidratata_specialita.webp',
        title: 'Tesori del Trentino',
        description: 'Ampia selezione di specialità del Trentino'
      },
      {
        src: '/images/arance_felici.webp',
        title: 'Agrumi Selezionati',
        description: 'Arance fresche e succose La Favorita Felici'
      },
      {
        src: '/images/zucche_decorate_banco.webp',
        title: 'Ti Aspettiamo!',
        description: 'Atmosfera accogliente e stagionale al Banchetto'
      },
      {
        src: '/images/bottamedi_mele_pink_lady_confezione.webp',
        title: 'Mele Pink Lady',
        description: 'Confezione di Mele Pink Lady fresche e croccanti'
      },
      {
        src: '/images/bottamedi_ananas_fruitpoint_freschi.webp',
        title: 'Ananas Esotici di Qualità',
        description: 'Ananas freschi e maturi Fruitpoint'
      },
      {
        src: '/images/bottamedi_sacchetti_frutta_disidratata_mista.webp',
        title: 'Frutta Disidratata Mista',
        description: 'Sacchetti di frutta disidratata mista colorata e gustosa'
      },
      {
        src: '/images/bottamedi_mele_melinda_montagna_cassetta.webp',
        title: 'Mela di Montagna Melinda',
        description: 'Cassetta di Mele Melinda \'Mela di Montagna\' fresche'
      }
    ]
  },
  de: {
    title: 'Am Marktstand: Farben, Geschmäcker und tägliche Frische',
    subtitle: 'Besuchen Sie uns in der Via Cavalleggeri Udine in Mezzolombardo!',
    description: 'Lassen Sie sich von einer Explosion von Farben, Düften und dem besten frischen Obst und Gemüse verführen, das täglich mit der Sorgfalt und Leidenschaft der Familie ausgewählt wird, die uns seit Generationen auszeichnet.',
    cta: 'Öffnungszeiten und Kontakt zum Marktstand',
    gallery: [
      {
        src: '/images/banco_varieta_autunno.webp',
        title: 'Saisonale Fülle',
        description: 'Reiche Ausstellung von frischem saisonalem Obst, Gemüse und typischen Trentiner Produkten'
      },
      {
        src: '/images/pomodori_cuore_bue.webp',
        title: 'Gemüse aus dem lokalen Garten',
        description: 'Rote frische und duftende Ochsenherz-Tomaten'
      },
      {
        src: '/images/melinda_golden.webp',
        title: 'Golden Melinda',
        description: 'Frische und saftige Golden Melinda Äpfel'
      },
      {
        src: '/images/angurie.webp',
        title: 'Sommerliche Süße',
        description: 'Frische und saftige Wassermelonen, geschnitten und ganz'
      },
      {
        src: '/images/meloni_sattin_dettaglio.webp',
        title: 'Edle Melonen',
        description: 'Duftende und süße Sattin Dolce Passione Melonen'
      },
      {
        src: '/images/banco_frigo_disidratata_specialita.webp',
        title: 'Schätze des Trentino',
        description: 'Große Auswahl an Spezialitäten aus dem Trentino'
      },
      {
        src: '/images/arance_felici.webp',
        title: 'Ausgewählte Zitrusfrüchte',
        description: 'Frische und saftige Orangen La Favorita Felici'
      },
      {
        src: '/images/zucche_decorate_banco.webp',
        title: 'Wir erwarten Sie!',
        description: 'Einladende und saisonale Atmosphäre am Marktstand'
      },
      {
        src: '/images/bottamedi_mele_pink_lady_confezione.webp',
        title: 'Pink Lady Äpfel',
        description: 'Packung frischer und knackiger Pink Lady Äpfel'
      },
      {
        src: '/images/bottamedi_ananas_fruitpoint_freschi.webp',
        title: 'Exotische Qualitäts-Ananas',
        description: 'Frische und reife Fruitpoint Ananas'
      },
      {
        src: '/images/bottamedi_sacchetti_frutta_disidratata_mista.webp',
        title: 'Gemischte Trockenfrüchte',
        description: 'Beutel mit bunten und leckeren gemischten Trockenfrüchten'
      },
      {
        src: '/images/bottamedi_mele_melinda_montagna_cassetta.webp',
        title: 'Melinda Bergapfel',
        description: 'Kiste mit frischen Melinda \'Bergapfel\' Äpfeln'
      }
    ]
  }
}

// 🖼️ COMPONENTE GALLERY ITEM OTTIMIZZATO (INTEGRATO)
const GalleryItem: React.FC<{
  item: any
  index: number
}> = ({ item, index }) => {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)
  const [ref, inView] = useInView({
    threshold: 0.1,
    triggerOnce: true,
    rootMargin: '100px' // Carica prima che entri nella viewport
  })

  const handleImageLoad = () => {
    setIsLoaded(true)
  }

  const handleImageError = () => {
    setHasError(true)
    setIsLoaded(true)
  }

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 30, scale: 0.95 }}
      animate={inView ? { 
        opacity: 1, 
        y: 0, 
        scale: 1
      } : {}}
      transition={{
        duration: 0.6,
        delay: Math.min(index * 0.1, 0.8), // Max delay 0.8s
        ease: [0.25, 0.46, 0.45, 0.94]
      }}
      className="group relative bg-white rounded-3xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500"
    >
      {/* 📷 IMAGE CONTAINER */}
      <div className="relative h-64 overflow-hidden bg-gradient-to-br from-green-50 to-green-100">
        
        {/* 🔄 LOADING PLACEHOLDER */}
        {!isLoaded && !hasError && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="flex flex-col items-center space-y-3">
              <motion.div 
                className="w-8 h-8 border-3 border-green-200 border-t-green-500 rounded-full"
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
              />
              <span className="text-green-600 text-sm font-medium">Caricamento...</span>
            </div>
          </div>
        )}

        {/* ❌ ERROR PLACEHOLDER */}
        {hasError && (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
            <div className="text-center text-gray-500">
              <svg className="w-16 h-16 mx-auto mb-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd" />
              </svg>
              <p className="text-sm">Immagine non disponibile</p>
            </div>
          </div>
        )}

        {/* 🖼️ ACTUAL IMAGE */}
        {!hasError && (
          <motion.img
            src={inView ? item.src : ''}
            alt={item.description}
            className="w-full h-full object-cover"
            loading="lazy"
            onLoad={handleImageLoad}
            onError={handleImageError}
            initial={{ opacity: 0, scale: 1.1 }}
            animate={{ 
              opacity: isLoaded ? 1 : 0,
              scale: isLoaded ? 1 : 1.1
            }}
            transition={{ 
              duration: 0.8,
              ease: "easeOut"
            }}
            whileHover={{ scale: 1.05 }}
            style={{
              willChange: 'transform, opacity'
            }}
          />
        )}
        
        {/* 🌈 GRADIENT OVERLAY */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent"
          initial={{ opacity: 0.7 }}
          whileHover={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        />

        {/* 📝 TITLE OVERLAY */}
        <div className="absolute bottom-4 left-4 right-4">
          <motion.h3 
            className="text-white font-bold text-lg mb-1 drop-shadow-lg"
            initial={{ opacity: 0, y: 10 }}
            animate={isLoaded ? { opacity: 1, y: 0 } : {}}
            transition={{ delay: 0.3, duration: 0.5 }}
          >
            {item.title}
          </motion.h3>
        </div>
      </div>

      {/* ✨ HOVER EFFECTS */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-green-500/5 to-green-600/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
        initial={false}
      />

      {/* 📱 MOBILE TOUCH FEEDBACK */}
      <motion.div
        className="absolute inset-0 bg-white/10 opacity-0 pointer-events-none"
        whileTap={{ opacity: 0.3 }}
        transition={{ duration: 0.1 }}
      />
    </motion.div>
  )
}

const BanchettoSection: React.FC<BanchettoSectionProps> = ({ language, inView }) => {
  const t = translations[language]

  const scrollToContact = () => {
    const element = document.getElementById('contact')
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  return (
    <section id="dettaglio" className="py-24 lg:py-32 bg-gradient-to-br from-green-50 to-white relative overflow-hidden">
      {/* 🎨 Background Elements */}
      <div className="absolute top-1/4 left-0 w-96 h-96 bg-green-200/20 rounded-full blur-3xl" />
      <div className="absolute bottom-1/4 right-0 w-96 h-96 bg-green-300/20 rounded-full blur-3xl" />

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* 🏪 HERO IMAGE */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="mb-16"
        >
          <div className="relative h-96 lg:h-[500px] rounded-3xl overflow-hidden shadow-2xl">
            <img
              src="/images/banchetto.webp"
              alt="Il Banchetto Bottamedi a Mezzolombardo ricco di frutta e verdura fresca"
              className="w-full h-full object-cover"
              loading="eager"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent" />
          </div>
        </motion.div>

        {/* 📝 HEADER */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="text-center mb-20"
        >
          <h2 className="text-4xl lg:text-5xl font-bold text-neutral-900 mb-6">
            {t.title}
          </h2>
          <p className="text-xl text-green-600 font-semibold mb-4">
            {t.subtitle}
          </p>
          <p className="text-lg text-neutral-600 max-w-4xl mx-auto leading-relaxed">
            {t.description}
          </p>
        </motion.div>

        {/* 🖼️ GALLERY OTTIMIZZATA */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 mb-16">
          {t.gallery.map((item, index) => (
            <GalleryItem key={index} item={item} index={index} />
          ))}
        </div>

        {/* 🎯 CTA */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="text-center"
        >
          <motion.button
            onClick={scrollToContact}
            whileHover={{ scale: 1.05, y: -2 }}
            whileTap={{ scale: 0.95 }}
            className="bg-gradient-to-r from-green-500 to-green-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
          >
            {t.cta}
          </motion.button>
        </motion.div>
      </div>
    </section>
  )
}

export default BanchettoSection

--- FILE: src/components/sections/ContactSection.tsx ---
import React, { useState, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface ContactSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const ContactCard: React.FC<{
  contact: any
  icon: string
  gradient: string
  index: number
  quickActions: any
  isIngrosso?: boolean
}> = React.memo(({ contact, icon, gradient, index, quickActions, isIngrosso = false }) => {
  const openMap = useCallback(() => {
    // CORRETTO: Link diretto per l'ingrosso
    const mapUrl = isIngrosso 
      ? 'https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6'
      : 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN'
    
    window.open(mapUrl, '_blank')
  }, [isIngrosso])

  const callPhone = useCallback(() => {
    window.open(`tel:${contact.phone.replace(/\s/g, '')}`, '_self')
  }, [contact.phone])

  const sendWhatsApp = useCallback(() => {
    const message = encodeURIComponent(`Ciao! Sono interessato ai vostri servizi di ${contact.title}`)
    window.open(`https://wa.me/393515776198?text=${message}`, '_blank')
  }, [contact.title])

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: index * 0.2 }}
      whileHover={{ y: -5, scale: 1.02 }}
      className="relative group"
    >
      <div className="bg-white rounded-3xl p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border border-neutral-100 h-full">
        {/* Icon Header */}
        <div className="relative mb-6">
          <div className={`w-16 h-16 rounded-2xl bg-gradient-to-br ${gradient} flex items-center justify-center text-2xl mb-4 group-hover:scale-110 transition-transform duration-300`}>
            {icon}
          </div>
          <h3 className="text-2xl font-bold text-neutral-900">
            {contact.title}
          </h3>
        </div>

        {/* Contact Info */}
        <div className="space-y-4 mb-6">
          <div className="flex items-start space-x-3">
            <svg className="w-5 h-5 text-brand-500 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <p className="text-neutral-600 leading-relaxed">
              {contact.address}
            </p>
          </div>

          <div className="flex items-center space-x-3">
            <svg className="w-5 h-5 text-brand-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
            <a href={`tel:${contact.phone.replace(/\s/g, '')}`} className="text-neutral-600 hover:text-brand-600 transition-colors">
              {contact.phone}
            </a>
          </div>

          <div className="flex items-center space-x-3">
            <svg className="w-5 h-5 text-brand-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <a href={`mailto:${contact.email}`} className="text-neutral-600 hover:text-brand-600 transition-colors">
              {contact.email}
            </a>
          </div>

          {contact.hours && (
            <div className="flex items-center space-x-3">
              <svg className="w-5 h-5 text-brand-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-neutral-600">
                {contact.hours}
              </p>
            </div>
          )}
        </div>

        {/* Quick Actions */}
        <div className="space-y-3">
          <h4 className="text-sm font-semibold text-neutral-700 mb-3">{quickActions.title}</h4>
          
          <div className="grid grid-cols-1 gap-2">
            <motion.button
              onClick={callPhone}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className={`w-full py-2 px-4 bg-gradient-to-r ${gradient} text-white rounded-lg font-medium text-sm transition-all duration-300 hover:shadow-md flex items-center justify-center space-x-2`}
            >
              <span>📞</span>
              <span>{quickActions.call}</span>
            </motion.button>

            <div className="grid grid-cols-2 gap-2">
              <motion.button
                onClick={sendWhatsApp}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="py-2 px-3 bg-green-500 hover:bg-green-600 text-white rounded-lg font-medium text-sm transition-all duration-300 flex items-center justify-center space-x-1"
              >
                <span>💬</span>
                <span>{quickActions.whatsapp}</span>
              </motion.button>

              <motion.button
                onClick={openMap}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="py-2 px-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium text-sm transition-all duration-300 flex items-center justify-center space-x-1"
              >
                <span>🗺️</span>
                <span>{quickActions.directions}</span>
              </motion.button>
            </div>
          </div>
        </div>

        {/* Hover Effect */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-brand-500/5 to-accent-500/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
          initial={false}
        />
      </div>
    </motion.div>
  )
})

const ContactSection: React.FC<ContactSectionProps> = ({ language, inView }) => {
  const translations = {
    it: {
      title: 'Contattaci',
      subtitle: 'Siamo qui per te',
      description: 'Scegli come preferisci entrare in contatto con noi',
      contact: {
        retail: {
          title: 'Banchetto (Dettaglio)',
          address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
          phone: '351 577 6198',
          email: 'bottamedipierluigi@virgilio.it',
          hours: 'Lun-Sab: 07:00-19:30'
        },
        horeca: {
          title: 'Ingrosso HORECA',
          address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
          phone: '0461 602534',
          email: 'bottamedipierluigi@virgilio.it'
        }
      },
      quickActions: {
        title: 'Azioni Rapide',
        call: 'Chiama Ora',
        whatsapp: 'WhatsApp',
        directions: 'Indicazioni'
      }
    },
    de: {
      title: 'Kontakt',
      subtitle: 'Wir sind für Sie da',
      description: 'Wählen Sie, wie Sie uns am liebsten kontaktieren möchten',
      contact: {
        retail: {
          title: 'Marktstand (Detail)',
          address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
          phone: '351 577 6198',
          email: 'bottamedipierluigi@virgilio.it',
          hours: 'Mo-Sa: 07:00-19:30'
        },
        horeca: {
          title: 'Großhandel HORECA',
          address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
          phone: '0461 602534',
          email: 'bottamedipierluigi@virgilio.it'
        }
      },
      quickActions: {
        title: 'Schnelle Aktionen',
        call: 'Jetzt Anrufen',
        whatsapp: 'WhatsApp',
        directions: 'Wegbeschreibung'
      }
    }
  }

  const t = translations[language]

  return (
    <section id="contact" className="py-24 lg:py-32 bg-gradient-to-br from-white to-neutral-50 relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute top-1/4 left-0 w-96 h-96 bg-brand-200/20 rounded-full blur-3xl" />
      <div className="absolute bottom-1/4 right-0 w-96 h-96 bg-accent-200/20 rounded-full blur-3xl" />

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="text-center mb-20"
        >
          <motion.h2
            className="text-4xl lg:text-6xl font-bold text-neutral-900 mb-6"
            style={{
              background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #f59e0b 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}
          >
            {t.title}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-xl text-neutral-600 mb-4"
          >
            {t.subtitle}
          </motion.p>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.3 }}
            className="text-lg text-neutral-500 max-w-3xl mx-auto"
          >
            {t.description}
          </motion.p>
        </motion.div>

        {/* Contact Cards */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-20">
          <ContactCard
            contact={t.contact.retail}
            icon="🛒"
            gradient="from-brand-500 to-brand-600"
            index={0}
            quickActions={t.quickActions}
            isIngrosso={false}
          />
          <ContactCard
            contact={t.contact.horeca}
            icon="🏨"
            gradient="from-accent-500 to-accent-600"
            index={1}
            quickActions={t.quickActions}
            isIngrosso={true}
          />
        </div>

        {/* Map Section */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="mt-20"
        >
          <div className="text-center mb-12">
            <h3 className="text-3xl font-bold text-neutral-900 mb-4">
              Come Raggiungerci
            </h3>
            <p className="text-xl text-neutral-600">
              Vieni a trovarci nelle nostre sedi a Mezzolombardo
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Banchetto Map */}
            <motion.div
              whileHover={{ scale: 1.02 }}
              className="relative group cursor-pointer"
              onClick={() => window.open('https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN', '_blank')}
            >
              <div className="bg-white rounded-3xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500">
                <div className="h-64 bg-gradient-to-br from-brand-100 to-brand-200 relative overflow-hidden">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center">
                      <div className="w-16 h-16 bg-brand-500 rounded-full flex items-center justify-center text-white text-2xl mb-4 mx-auto">
                        📍
                      </div>
                      <h4 className="text-xl font-bold text-neutral-900">Banchetto</h4>
                      <p className="text-neutral-600">Via Cavalleggeri Udine</p>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>

            {/* HORECA Map - CORRETTO con link diretto */}
            <motion.div
              whileHover={{ scale: 1.02 }}
              className="relative group cursor-pointer"
              onClick={() => window.open('https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6', '_blank')}
            >
              <div className="bg-white rounded-3xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500">
                <div className="h-64 bg-gradient-to-br from-accent-100 to-accent-200 relative overflow-hidden">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center">
                      <div className="w-16 h-16 bg-accent-500 rounded-full flex items-center justify-center text-white text-2xl mb-4 mx-auto">
                        📍
                      </div>
                      <h4 className="text-xl font-bold text-neutral-900">Ingrosso HORECA</h4>
                      <p className="text-neutral-600">Via A. de Gasperi, 47</p>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </section>
  )
}

export default ContactSection

--- FILE: src/components/sections/HeroSection.tsx ---
import React, { useRef, useEffect } from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'

interface HeroSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'BOTTAMEDI',
    subtitle: 'Frutta e Verdura',
    tagline: 'Qualità Inarrivabile',
    tagline2: 'Passione Familiare',
    since: 'Da oltre',
    yearsCount: 50,
    yearsLabel: 'anni',
    cta1: 'Al Banchetto',
    cta2: 'Ingrosso',
    cta3: 'La Nostra Storia'
  },
  de: {
    title: 'BOTTAMEDI',
    subtitle: 'Obst und Gemüse',
    tagline: 'Unübertreffliche Qualität',
    tagline2: 'Familiäre Leidenschaft',
    since: 'Seit über',
    yearsCount: 50,
    yearsLabel: 'Jahren',
    cta1: 'Marktstand',
    cta2: 'Großhandel', 
    cta3: 'Unsere Geschichte'
  }
}

const HeroSection: React.FC<HeroSectionProps> = ({ language, inView }) => {
  const ref = useRef<HTMLDivElement>(null)
  const videoRef = useRef<HTMLVideoElement>(null)
  const { scrollY } = useScroll()
  
  const t = translations[language]
  
  // Parallax leggero per performance
  const y = useTransform(scrollY, [0, 800], [0, 100])
  const opacity = useTransform(scrollY, [0, 600], [1, 0.3])

  // Hook per animazione counter
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (inView) {
      let startTime: number
      const animate = (currentTime: number) => {
        if (!startTime) startTime = currentTime
        const progress = Math.min((currentTime - startTime) / 2000, 1)
        
        const easeOutQuart = 1 - Math.pow(1 - progress, 4)
        const currentValue = easeOutQuart * t.yearsCount
        
        setCount(Math.floor(currentValue))

        if (progress < 1) {
          requestAnimationFrame(animate)
        } else {
          setCount(t.yearsCount)
        }
      }

      requestAnimationFrame(animate)
    }
  }, [inView, t.yearsCount])

  useEffect(() => {
    if (inView && videoRef.current) {
      videoRef.current.play().catch(() => {
        console.log('Autoplay failed')
      })
    }
  }, [inView])

  // Funzioni CTA con sezioni corrette
  const handleCTAClick = (type: 'dettaglio' | 'services' | 'about') => {
    const sectionMap = {
      dettaglio: 'dettaglio',
      services: 'services',
      about: 'about'
    }
    
    const element = document.getElementById(sectionMap[type])
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  return (
    <section
      id="hero"
      ref={ref}
      className="relative min-h-screen flex items-center justify-center overflow-hidden"
    >
      {/* Background Video ottimizzato */}
      <div className="absolute inset-0 w-full h-full">
        <video
          ref={videoRef}
          className="w-full h-full object-cover"
          autoPlay
          muted
          loop
          playsInline
          preload="metadata"
          poster="/images/poster.webp"
        >
          <source src="/videos/hero-video-verdure-rotanti.mp4" type="video/mp4" />
        </video>
        
        {/* Overlay semplificato */}
        <div className="absolute inset-0 bg-gradient-to-br from-black/50 via-black/30 to-black/60" />
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent" />
      </div>

      {/* Content ottimizzato e centrato */}
      <motion.div
        style={{ y, opacity }}
        className="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-6xl mx-auto"
      >
        {/* Header - Logo Grande a Sinistra */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
          className="mb-8"
        >
          {/* Titolo principale senza logo centrale */}
          <motion.h1
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4, duration: 0.6 }}
            className="text-5xl md:text-7xl lg:text-8xl font-black tracking-tight mb-4 text-center"
            style={{
              fontFamily: "'Playfair Display', serif",
              background: 'linear-gradient(135deg, #ffffff 0%, #dcfce7 50%, #22c55e 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
              filter: 'drop-shadow(0 4px 12px rgba(0,0,0,0.4))'
            }}
          >
            {t.title}
          </motion.h1>
          
          {/* Sottotitolo */}
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6, duration: 0.5 }}
            className="text-xl md:text-2xl lg:text-3xl text-white/95 font-light tracking-wide mb-2 text-center"
            style={{ 
              fontFamily: "'Playfair Display', serif",
              textShadow: '0 2px 8px rgba(0,0,0,0.5)'
            }}
          >
            {t.subtitle}
          </motion.h2>
        </motion.div>

        {/* Slogan più Umile e Catchy */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8, duration: 0.5 }}
          className="mb-8 text-center"
        >
          <motion.p 
            className="text-lg md:text-xl text-white/95 font-medium mb-1"
            style={{ textShadow: '0 2px 8px rgba(0,0,0,0.5)' }}
          >
            {t.tagline}
          </motion.p>
          <motion.p 
            className="text-lg md:text-xl text-white/95 font-medium"
            style={{ textShadow: '0 2px 8px rgba(0,0,0,0.5)' }}
          >
            {t.tagline2}
          </motion.p>
          
          {/* Badge Da oltre 50 anni con counter animato */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 1, duration: 0.4 }}
            className="flex justify-center mt-4"
          >
            <motion.div 
              className="inline-flex items-center space-x-2 bg-gradient-to-r from-emerald-500/20 to-green-500/20 backdrop-blur-md border border-white/30 rounded-full px-6 py-3 text-white font-semibold shadow-lg"
              whileHover={{ scale: 1.05 }}
            >
              <motion.span 
                className="text-xl"
                animate={{ 
                  rotate: [0, 10, -10, 0],
                  scale: [1, 1.1, 1]
                }}
                transition={{ 
                  duration: 3, 
                  repeat: Infinity, 
                  ease: "easeInOut" 
                }}
              >
                ⭐
              </motion.span>
              <span className="flex items-center space-x-1">
                <span>{t.since}</span>
                <motion.span 
                  key={count}
                  initial={{ scale: 1.2, opacity: 0.8 }}
                  animate={{ scale: 1, opacity: 1 }}
                  className="font-bold text-lg"
                >
                  {count}
                </motion.span>
                <span>{t.yearsLabel}</span>
              </span>
            </motion.div>
          </motion.div>
        </motion.div>

        {/* CTA Buttons - Tutti e 3 Visibili, Simmetrici e Ben Proporzionati */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.2, duration: 0.6 }}
          className="flex flex-col items-center space-y-6"
        >
          {/* Mobile Layout - Stack Verticale */}
          <div className="flex flex-col md:hidden space-y-3 w-full max-w-xs mx-auto">
            <motion.button
              onClick={() => handleCTAClick('dettaglio')}
              whileHover={{ scale: 1.05, y: -3 }}
              whileTap={{ scale: 0.95 }}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.4, duration: 0.5 }}
              className="group relative bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 rounded-xl font-bold text-base shadow-xl hover:shadow-green-500/25 transition-all duration-300 flex items-center justify-center space-x-2 w-full"
            >
              <span className="text-lg">🛒</span>
              <span>{t.cta1}</span>
            </motion.button>

            <motion.button
              onClick={() => handleCTAClick('services')}
              whileHover={{ scale: 1.05, y: -3 }}
              whileTap={{ scale: 0.95 }}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.5, duration: 0.5 }}
              className="group relative bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-xl font-bold text-base shadow-xl hover:shadow-blue-500/25 transition-all duration-300 flex items-center justify-center space-x-2 w-full"
            >
              <span className="text-lg">🚛</span>
              <span>{t.cta2}</span>
            </motion.button>

            <motion.button
              onClick={() => handleCTAClick('about')}
              whileHover={{ scale: 1.05, y: -3 }}
              whileTap={{ scale: 0.95 }}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.6, duration: 0.5 }}
              className="group relative border-2 border-white/50 text-white px-6 py-3 rounded-xl font-bold text-base backdrop-blur-md hover:bg-white/10 hover:border-white/70 transition-all duration-300 flex items-center justify-center space-x-2 w-full"
            >
              <span className="text-lg">🌱</span>
              <span>{t.cta3}</span>
            </motion.button>
          </div>

          {/* Desktop Layout - 3 Bottoni Simmetrici Affiancati */}
          <div className="hidden md:flex items-center justify-center space-x-4 lg:space-x-6">
            <motion.button
              onClick={() => handleCTAClick('dettaglio')}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.3, duration: 0.5 }}
              whileHover={{ scale: 1.05, y: -4 }}
              whileTap={{ scale: 0.95 }}
              className="group relative bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 lg:px-8 lg:py-4 rounded-xl font-bold text-sm lg:text-base shadow-xl hover:shadow-xl hover:shadow-green-500/25 transition-all duration-300 flex items-center space-x-2 min-w-[140px] lg:min-w-[160px] justify-center"
            >
              <span className="text-lg lg:text-xl">🛒</span>
              <span>{t.cta1}</span>
            </motion.button>

            <motion.button
              onClick={() => handleCTAClick('services')}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.4, duration: 0.5 }}
              whileHover={{ scale: 1.05, y: -4 }}
              whileTap={{ scale: 0.95 }}
              className="group relative bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 lg:px-8 lg:py-4 rounded-xl font-bold text-sm lg:text-base shadow-xl hover:shadow-xl hover:shadow-blue-500/25 transition-all duration-300 flex items-center space-x-2 min-w-[140px] lg:min-w-[160px] justify-center"
            >
              <span className="text-lg lg:text-xl">🚛</span>
              <span>{t.cta2}</span>
            </motion.button>

            <motion.button
              onClick={() => handleCTAClick('about')}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.5, duration: 0.5 }}
              whileHover={{ scale: 1.05, y: -4 }}
              whileTap={{ scale: 0.95 }}
              className="group relative border-2 border-white/40 text-white px-6 py-3 lg:px-8 lg:py-4 rounded-xl font-bold text-sm lg:text-base backdrop-blur-md hover:bg-white/10 hover:border-white/60 transition-all duration-300 flex items-center space-x-2 min-w-[140px] lg:min-w-[160px] justify-center"
            >
              <span className="text-lg lg:text-xl">🌱</span>
              <span>{t.cta3}</span>
            </motion.button>
          </div>

          {/* Scroll Indicator - Moderno */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 2, duration: 0.6 }}
            className="text-center mt-6 md:mt-8"
          >
            <motion.div
              animate={{ y: [0, 8, 0] }}
              transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
              className="text-white/80 flex flex-col items-center space-y-3"
            >
              {/* Icona moderna a tre puntini */}
              <div className="flex flex-col space-y-1">
                <motion.div 
                  className="w-1 h-1 bg-white/60 rounded-full mx-auto"
                  animate={{ 
                    opacity: [0.4, 1, 0.4],
                    scale: [1, 1.2, 1] 
                  }}
                  transition={{ 
                    duration: 1.5, 
                    repeat: Infinity, 
                    delay: 0 
                  }}
                />
                <motion.div 
                  className="w-1 h-1 bg-white/80 rounded-full mx-auto"
                  animate={{ 
                    opacity: [0.4, 1, 0.4],
                    scale: [1, 1.2, 1] 
                  }}
                  transition={{ 
                    duration: 1.5, 
                    repeat: Infinity, 
                    delay: 0.2 
                  }}
                />
                <motion.div 
                  className="w-1 h-1 bg-white rounded-full mx-auto"
                  animate={{ 
                    opacity: [0.4, 1, 0.4],
                    scale: [1, 1.2, 1] 
                  }}
                  transition={{ 
                    duration: 1.5, 
                    repeat: Infinity, 
                    delay: 0.4 
                  }}
                />
              </div>
              <div className="text-xs hidden md:block font-medium opacity-80">
                Scorri per scoprire di più
              </div>
            </motion.div>
          </motion.div>
        </motion.div>
      </motion.div>

      {/* Elementi decorativi ridotti */}
      <div className="absolute top-1/4 left-0 w-48 h-48 bg-green-500/5 rounded-full blur-2xl opacity-50"></div>
      <div className="absolute bottom-1/4 right-0 w-48 h-48 bg-amber-400/5 rounded-full blur-2xl opacity-50"></div>
    </section>
  )
}

export default HeroSection

--- FILE: src/components/sections/ProductsSection.tsx ---
import React, { useState, useCallback, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface ProductsSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'I Nostri Prodotti',
    subtitle: 'Oltre 100 varietà di frutta e verdura fresca selezionata ogni giorno',
    categories: [
      {
        id: 'fruits',
        title: 'Frutta Fresca',
        shortDesc: 'Varietà di stagione dal Trentino e oltre',
        description: 'La nostra frutta viene selezionata alle prime ore del mattino dai migliori produttori del Trentino Alto Adige e da fornitori selezionati in tutta Italia.',
        longDescription: 'Ogni giorno iniziamo la nostra giornata controllando personalmente ogni cassetta di frutta che arriva al nostro deposito. Dalle famose mele Melinda del Trentino agli agrumi siciliani, dalla frutta esotica di stagione ai piccoli frutti di montagna, garantiamo sempre la massima freschezza e qualità. La nostra esperienza di 50 anni ci permette di selezionare solo i prodotti migliori per i nostri clienti.',
        icon: '🍎',
        color: 'from-red-500 to-orange-500',
        image: '/images/melinda_golden.webp',
        products: [
          { name: 'Mele Melinda', season: 'Tutto l\'anno', origin: 'Trentino' },
          { name: 'Kiwi Gold', season: 'Ott-Apr', origin: 'Trentino' },
          { name: 'Pesche & Albicocche', season: 'Giu-Set', origin: 'Emilia Romagna' },
          { name: 'Uva da tavola', season: 'Ago-Nov', origin: 'Puglia/Sicilia' },
          { name: 'Agrumi Premium', season: 'Nov-Apr', origin: 'Sicilia/Calabria' },
          { name: 'Frutti di bosco', season: 'Mag-Set', origin: 'Trentino' }
        ],
        features: [
          { icon: '🌅', title: 'Selezione Mattutina', desc: 'Controllo qualità alle prime ore' },
          { icon: '❄️', title: 'Catena del Freddo', desc: 'Conservazione ottimale garantita' },
          { icon: '🏔️', title: 'Prodotti Alpini', desc: 'Specialità del territorio trentino' },
          { icon: '📦', title: 'Packaging Curato', desc: 'Confezionamento per preservare la freschezza' }
        ]
      },
      {
        id: 'vegetables',
        title: 'Verdure Fresche',
        shortDesc: 'Dal campo alla tavola in 24 ore',
        description: 'Le nostre verdure arrivano direttamente dai campi del Trentino Alto Adige e del Veneto, garantendo freschezza e sapore autentici.',
        longDescription: 'Collaboriamo direttamente con i migliori agricoltori del territorio per offrire verdure di stagione sempre fresche e saporite. I nostri famosi pomodori cuore di bue, le zucche di Mantova, i cavoli verza del Trentino e tutte le verdure a foglia verde vengono selezionate una per una. Privilegiamo sempre i prodotti a chilometro zero quando possibile, per ridurre l\'impatto ambientale e garantire la massima freschezza.',
        icon: '🥬',
        color: 'from-green-500 to-emerald-500',
        image: '/images/pomodori_cuore_bue.webp',
        products: [
          { name: 'Pomodori Cuore di Bue', season: 'Mag-Set', origin: 'Trentino' },
          { name: 'Zucche di Mantova', season: 'Set-Feb', origin: 'Lombardia' },
          { name: 'Insalate Miste', season: 'Tutto l\'anno', origin: 'Veneto' },
          { name: 'Cavoli e Verze', season: 'Ott-Mar', origin: 'Trentino' },
          { name: 'Asparagi Bianchi', season: 'Mar-Giu', origin: 'Veneto' },
          { name: 'Funghi Porcini', season: 'Set-Nov', origin: 'Trentino' }
        ],
        features: [
          { icon: '🚚', title: 'Filiera Corta', desc: 'Dal produttore in massimo 24 ore' },
          { icon: '🌱', title: 'Prodotti Bio', desc: 'Selezione di verdure biologiche certificate' },
          { icon: '📍', title: 'Km Zero', desc: 'Priorità ai produttori locali del Trentino' },
          { icon: '🧺', title: 'Varietà Stagionali', desc: 'Seguiamo i ritmi naturali delle stagioni' }
        ]
      },
      {
        id: 'specialties',
        title: 'Specialità Locali',
        shortDesc: 'Prodotti tipici del territorio trentino',
        description: 'Selezioniamo i migliori prodotti tipici del Trentino Alto Adige per portare sulla tua tavola i sapori autentici della nostra terra.',
        longDescription: 'Il Trentino Alto Adige è ricco di eccellenze enogastronomiche che rappresentiamo con orgoglio. Dalle mele Melinda DOP alle pere della Val di Non, dai piccoli frutti di montagna alle erbe aromatiche alpine, ogni prodotto racconta la storia del nostro territorio. Lavoriamo anche con piccoli produttori locali per offrirti specialità uniche che difficilmente trovi altrove, come le antiche varietà di mele recuperate o i frutti dimenticati delle nostre montagne.',
        icon: '🏔️',
        color: 'from-blue-500 to-indigo-500',
        image: '/images/kiwi-cuore.webp',
        products: [
          { name: 'Mele Melinda DOP', season: 'Set-Lug', origin: 'Val di Non' },
          { name: 'Pere Williams', season: 'Ago-Nov', origin: 'Val di Non' },
          { name: 'Piccoli Frutti', season: 'Giu-Set', origin: 'Val di Sole' },
          { name: 'Erbe Aromatiche', season: 'Mar-Set', origin: 'Altopiani' },
          { name: 'Castagne', season: 'Set-Nov', origin: 'Valsugana' },
          { name: 'Noci', season: 'Set-Mar', origin: 'Valle dell\'Adige' }
        ],
        features: [
          { icon: '🏅', title: 'Certificazioni DOP', desc: 'Prodotti a denominazione protetta' },
          { icon: '🌸', title: 'Varietà Antiche', desc: 'Frutti tradizionali recuperati' },
          { icon: '⛰️', title: 'Alta Montagna', desc: 'Prodotti coltivati oltre i 1000m' },
          { icon: '🤝', title: 'Piccoli Produttori', desc: 'Sosteniamo l\'agricoltura familiare' }
        ]
      }
    ]
  },
  de: {
    title: 'Unsere Produkte',
    subtitle: 'Über 100 Sorten frisches Obst und Gemüse täglich ausgewählt',
    categories: [
      {
        id: 'fruits',
        title: 'Frisches Obst',
        shortDesc: 'Saisonale Sorten aus Südtirol und darüber hinaus',
        description: 'Unser Obst wird in den frühen Morgenstunden von den besten Produzenten Südtirols und ausgewählten Lieferanten aus ganz Italien ausgewählt.',
        longDescription: 'Jeden Tag beginnen wir unseren Tag damit, jede Obstkiste persönlich zu kontrollieren, die in unserem Lager ankommt. Von den berühmten Melinda-Äpfeln aus Südtirol bis zu sizilianischen Zitrusfrüchten, von exotischen Saisonfrüchten bis zu kleinen Bergfrüchten garantieren wir immer maximale Frische und Qualität.',
        icon: '🍎',
        color: 'from-red-500 to-orange-500',
        image: '/images/melinda_golden.webp',
        products: [
          { name: 'Melinda Äpfel', season: 'Ganzjährig', origin: 'Südtirol' },
          { name: 'Kiwi Gold', season: 'Okt-Apr', origin: 'Südtirol' },
          { name: 'Pfirsiche & Aprikosen', season: 'Jun-Sep', origin: 'Emilia Romagna' },
          { name: 'Tafeltrauben', season: 'Aug-Nov', origin: 'Apulien/Sizilien' },
          { name: 'Premium Zitrusfrüchte', season: 'Nov-Apr', origin: 'Sizilien/Kalabrien' },
          { name: 'Waldbeeren', season: 'Mai-Sep', origin: 'Südtirol' }
        ],
        features: [
          { icon: '🌅', title: 'Morgendliche Auswahl', desc: 'Qualitätskontrolle in den frühen Stunden' },
          { icon: '❄️', title: 'Kühlkette', desc: 'Optimale Konservierung garantiert' },
          { icon: '🏔️', title: 'Alpine Produkte', desc: 'Spezialitäten des Südtiroler Gebiets' },
          { icon: '📦', title: 'Sorgfältige Verpackung', desc: 'Verpackung zur Erhaltung der Frische' }
        ]
      },
      {
        id: 'vegetables',
        title: 'Frisches Gemüse',
        shortDesc: 'Vom Feld auf den Tisch in 24 Stunden',
        description: 'Unser Gemüse kommt direkt von den Feldern Südtirols und Venetiens und garantiert authentische Frische und Geschmack.',
        longDescription: 'Wir arbeiten direkt mit den besten Landwirten des Gebiets zusammen, um saisonales Gemüse anzubieten, das immer frisch und schmackhaft ist. Unsere berühmten Ochsenherz-Tomaten, Kürbisse aus Mantua, Südtiroler Kohl und alle Blattgemüse werden einzeln ausgewählt.',
        icon: '🥬',
        color: 'from-green-500 to-emerald-500',
        image: '/images/pomodori_cuore_bue.webp',
        products: [
          { name: 'Ochsenherz-Tomaten', season: 'Mai-Sep', origin: 'Südtirol' },
          { name: 'Mantua Kürbisse', season: 'Sep-Feb', origin: 'Lombardei' },
          { name: 'Gemischte Salate', season: 'Ganzjährig', origin: 'Venetien' },
          { name: 'Kohl und Wirsing', season: 'Okt-Mär', origin: 'Südtirol' },
          { name: 'Weißer Spargel', season: 'Mär-Jun', origin: 'Venetien' },
          { name: 'Steinpilze', season: 'Sep-Nov', origin: 'Südtirol' }
        ],
        features: [
          { icon: '🚚', title: 'Kurze Lieferkette', desc: 'Vom Produzenten in maximal 24 Stunden' },
          { icon: '🌱', title: 'Bio-Produkte', desc: 'Auswahl zertifizierter Bio-Gemüse' },
          { icon: '📍', title: 'Km Zero', desc: 'Priorität für lokale Südtiroler Produzenten' },
          { icon: '🧺', title: 'Saisonale Sorten', desc: 'Wir folgen den natürlichen Jahreszeiten' }
        ]
      },
      {
        id: 'specialties',
        title: 'Lokale Spezialitäten',
        shortDesc: 'Typische Produkte des Südtiroler Gebiets',
        description: 'Wir wählen die besten typischen Produkte Südtirols aus, um die authentischen Aromen unseres Landes auf Ihren Tisch zu bringen.',
        longDescription: 'Südtirol ist reich an gastronomischen Exzellenzen, die wir mit Stolz vertreten. Von Melinda DOP-Äpfeln bis zu Birnen aus dem Nonstal, von kleinen Bergfrüchten bis zu alpinen Kräutern erzählt jedes Produkt die Geschichte unseres Gebiets.',
        icon: '🏔️',
        color: 'from-blue-500 to-indigo-500',
        image: '/images/kiwi-cuore.webp',
        products: [
          { name: 'Melinda DOP Äpfel', season: 'Sep-Jul', origin: 'Nonstal' },
          { name: 'Williams Birnen', season: 'Aug-Nov', origin: 'Nonstal' },
          { name: 'Kleine Früchte', season: 'Jun-Sep', origin: 'Sulztal' },
          { name: 'Aromatische Kräuter', season: 'Mär-Sep', origin: 'Hochebenen' },
          { name: 'Kastanien', season: 'Sep-Nov', origin: 'Valsugana' },
          { name: 'Nüsse', season: 'Sep-Mär', origin: 'Etschtal' }
        ],
        features: [
          { icon: '🏅', title: 'DOP-Zertifizierungen', desc: 'Produkte mit geschützter Herkunftsbezeichnung' },
          { icon: '🌸', title: 'Alte Sorten', desc: 'Wiedergewonnene traditionelle Früchte' },
          { icon: '⛰️', title: 'Hochgebirge', desc: 'Produkte über 1000m angebaut' },
          { icon: '🤝', title: 'Kleine Produzenten', desc: 'Wir unterstützen die Familienwirtschaft' }
        ]
      }
    ]
  }
}

// Componenti ottimizzati con memoizzazione
const MobileProductCard: React.FC<{
  category: any
  index: number
  isExpanded: boolean
  onToggle: () => void
}> = React.memo(({ category, index, isExpanded, onToggle }) => {
  const [ref, inView] = useInView({
    threshold: 0.3,
    triggerOnce: true
  })

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 30 }}
      animate={inView ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      className="bg-white rounded-3xl overflow-hidden shadow-lg border border-gray-100"
    >
      {/* Header */}
      <div className="relative h-48 overflow-hidden">
        <img
          src={category.image}
          alt={category.title}
          className="w-full h-full object-cover"
          loading="lazy"
        />
        <div className={`absolute inset-0 bg-gradient-to-t ${category.color} opacity-80`} />
        
        <div className="absolute inset-0 p-6 flex flex-col justify-end text-white">
          <div className="text-4xl mb-2">{category.icon}</div>
          <h3 className="text-2xl font-bold mb-1">{category.title}</h3>
          <p className="text-white/90 text-sm">{category.shortDesc}</p>
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        <p className="text-gray-700 leading-relaxed mb-4">
          {category.description}
        </p>

        {/* Quick Products Preview */}
        <div className="mb-6">
          <h4 className="font-semibold text-gray-900 mb-3">Prodotti principali:</h4>
          <div className="flex flex-wrap gap-2">
            {category.products.slice(0, 3).map((product: any, i: number) => (
              <span key={i} className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-xs">
                {product.name}
              </span>
            ))}
            {category.products.length > 3 && (
              <span className="bg-gray-200 text-gray-600 px-3 py-1 rounded-full text-xs">
                +{category.products.length - 3} altri...
              </span>
            )}
          </div>
        </div>

        {/* Toggle Button */}
        <motion.button
          onClick={onToggle}
          whileTap={{ scale: 0.95 }}
          className={`w-full py-3 px-4 rounded-xl font-medium transition-all duration-300 flex items-center justify-center space-x-2 ${
            isExpanded 
              ? `bg-gradient-to-r ${category.color} text-white` 
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          <span>{isExpanded ? 'Mostra Meno' : 'Scopri Tutti i Prodotti'}</span>
          <motion.div
            animate={{ rotate: isExpanded ? 180 : 0 }}
            transition={{ duration: 0.2 }}
          >
            ▼
          </motion.div>
        </motion.button>

        {/* Expanded Content */}
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="mt-6 pt-6 border-t border-gray-100"
            >
              <p className="text-gray-600 leading-relaxed mb-6">
                {category.longDescription}
              </p>

              {/* Complete Products List */}
              <div className="mb-6">
                <h4 className="font-semibold text-gray-900 mb-4">Tutti i nostri prodotti:</h4>
                <div className="grid grid-cols-1 gap-3">
                  {category.products.map((product: any, i: number) => (
                    <motion.div
                      key={i}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.3, delay: i * 0.05 }}
                      className="flex justify-between items-center p-3 bg-gray-50 rounded-xl"
                    >
                      <div>
                        <h5 className="font-medium text-gray-900">{product.name}</h5>
                        <p className="text-xs text-gray-600">{product.origin}</p>
                      </div>
                      <span className="bg-white text-gray-700 px-2 py-1 rounded-full text-xs">
                        {product.season}
                      </span>
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* Features */}
              <div>
                <h4 className="font-semibold text-gray-900 mb-4">I nostri plus:</h4>
                <div className="space-y-3">
                  {category.features.map((feature: any, i: number) => (
                    <motion.div
                      key={i}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.3, delay: i * 0.1 }}
                      className="flex items-start space-x-3 p-3 rounded-xl bg-gray-50"
                    >
                      <div className="text-xl">{feature.icon}</div>
                      <div>
                        <h5 className="font-medium text-gray-900 mb-1">{feature.title}</h5>
                        <p className="text-gray-600 text-sm">{feature.desc}</p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  )
})

const DesktopProductCard: React.FC<{
  category: any
  index: number
  isActive: boolean
  onClick: () => void
}> = React.memo(({ category, index, isActive, onClick }) => {
  const [ref, inView] = useInView({
    threshold: 0.3,
    triggerOnce: true
  })

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 30 }}
      animate={inView ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      className="relative"
    >
      <motion.div
        onClick={onClick}
        whileHover={{ y: -5, scale: 1.02 }}
        className={`
          relative overflow-hidden rounded-3xl cursor-pointer transition-all duration-300
          ${isActive 
            ? 'ring-4 ring-green-500/30 shadow-2xl scale-105' 
            : 'shadow-lg hover:shadow-xl'
          }
        `}
      >
        <div className="relative h-64 overflow-hidden">
          <img
            src={category.image}
            alt={category.title}
            className="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
            loading="lazy"
          />
          <div className={`absolute inset-0 bg-gradient-to-t ${category.color} opacity-80`} />
        </div>

        <div className="absolute inset-0 flex flex-col justify-end p-6 text-white">
          <div className="text-4xl mb-3">{category.icon}</div>
          <h3 className="text-xl font-bold mb-2">{category.title}</h3>
          <p className="text-white/90 text-sm mb-3">{category.shortDesc}</p>
          
          <div className="flex flex-wrap gap-1">
            {category.products.slice(0, 2).map((product: any, i: number) => (
              <span key={i} className="bg-white/20 text-white px-2 py-1 rounded-full text-xs">
                {product.name}
              </span>
            ))}
          </div>
        </div>

        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0 }}
              className="absolute top-4 right-4 w-6 h-6 bg-white rounded-full flex items-center justify-center"
            >
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </motion.div>
  )
})

const ProductsSection: React.FC<ProductsSectionProps> = ({ language, inView }) => {
  const [activeCategory, setActiveCategory] = useState(0)
  const [expandedMobile, setExpandedMobile] = useState<number | null>(null)
  
  const t = useMemo(() => translations[language], [language])

  const handleMobileToggle = useCallback((index: number) => {
    setExpandedMobile(prev => prev === index ? null : index)
  }, [])

  const handleDesktopClick = useCallback((index: number) => {
    setActiveCategory(index)
  }, [])

  return (
    <section id="products" className="py-24 lg:py-32 bg-gradient-to-br from-green-50 via-white to-emerald-50 relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 opacity-30 pointer-events-none">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-green-200 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-emerald-200 rounded-full blur-3xl"></div>
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6 }}
          className="text-center mb-20"
        >
          <h2 className="text-4xl lg:text-6xl font-bold text-gray-900 mb-6 bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
            {t.title}
          </h2>
          <p className="text-2xl text-gray-600 max-w-4xl mx-auto">
            {t.subtitle}
          </p>
        </motion.div>

        {/* Mobile Layout */}
        <div className="block lg:hidden space-y-8 mb-20">
          {t.categories.map((category, index) => (
            <MobileProductCard
              key={category.id}
              category={category}
              index={index}
              isExpanded={expandedMobile === index}
              onToggle={() => handleMobileToggle(index)}
            />
          ))}
        </div>

        {/* Desktop Layout */}
        <div className="hidden lg:grid lg:grid-cols-3 gap-8 items-start mb-20">
          {t.categories.map((category, index) => (
            <DesktopProductCard
              key={category.id}
              category={category}
              index={index}
              isActive={activeCategory === index}
              onClick={() => handleDesktopClick(index)}
            />
          ))}
        </div>

        {/* Desktop Details Panel */}
        <div className="hidden lg:block">
          <AnimatePresence mode="wait">
            <motion.div
              key={activeCategory}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -50 }}
              transition={{ duration: 0.4 }}
              className="bg-white rounded-3xl shadow-2xl p-8 lg:p-12"
            >
              {/* Header */}
              <div className="flex items-center space-x-6 mb-8">
                <div className={`w-20 h-20 rounded-2xl bg-gradient-to-br ${t.categories[activeCategory].color} flex items-center justify-center text-3xl`}>
                  {t.categories[activeCategory].icon}
                </div>
                <div>
                  <h3 className="text-4xl font-bold text-gray-900">{t.categories[activeCategory].title}</h3>
                  <p className="text-gray-600 text-lg">{t.categories[activeCategory].shortDesc}</p>
                </div>
              </div>

              {/* Description */}
              <div className="mb-8">
                <p className="text-lg text-gray-700 leading-relaxed mb-4">
                  {t.categories[activeCategory].description}
                </p>
                <p className="text-gray-600 leading-relaxed">
                  {t.categories[activeCategory].longDescription}
                </p>
              </div>

              {/* Products Grid */}
              <div className="mb-8">
                <h4 className="text-2xl font-semibold text-gray-900 mb-6">I nostri prodotti:</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {t.categories[activeCategory].products.map((product: any, index: number) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.05 }}
                      className="bg-gray-50 rounded-2xl p-4 hover:bg-gray-100 transition-colors"
                    >
                      <h5 className="font-semibold text-gray-900 mb-2">{product.name}</h5>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-600">{product.origin}</span>
                        <span className="bg-white text-gray-700 px-3 py-1 rounded-full">
                          {product.season}
                        </span>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* Features */}
              <div>
                <h4 className="text-2xl font-semibold text-gray-900 mb-6">I nostri plus:</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {t.categories[activeCategory].features.map((feature: any, index: number) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.4, delay: index * 0.1 }}
                      className="flex items-start space-x-4 p-4 bg-gray-50 rounded-2xl hover:bg-gray-100 transition-colors"
                    >
                      <div className="text-3xl">{feature.icon}</div>
                      <div>
                        <h5 className="font-semibold text-gray-900 mb-2">{feature.title}</h5>
                        <p className="text-gray-600">{feature.desc}</p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          </AnimatePresence>
        </div>

        {/* CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="text-center bg-gradient-to-br from-green-100 to-emerald-100 rounded-3xl p-12 lg:p-16 mt-20"
        >
          <h3 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-6">
            Vieni a Scoprire la Qualità Bottamedi
          </h3>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Visita il nostro banchetto in Via Cavalleggeri Udine a Mezzolombardo e lasciati guidare dalla nostra esperienza di 50 anni nella selezione dei prodotti migliori.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <motion.button
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.95 }}
              className="inline-flex items-center space-x-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
            >
              <span>📍</span>
              <span>Vieni al Banchetto</span>
            </motion.button>

            <motion.button
              onClick={() => {
                const element = document.getElementById('wholesale')
                if (element) {
                  element.scrollIntoView({ behavior: 'smooth' })
                }
              }}
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.95 }}
              className="inline-flex items-center space-x-3 border-2 border-green-500 text-green-600 px-8 py-4 rounded-2xl font-semibold text-lg hover:bg-green-50 transition-all duration-300"
            >
              <span>🏢</span>
              <span>Servizio Ingrosso</span>
            </motion.button>
          </div>

          {/* Contact Info */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.6, delay: 0.6 }}
            className="mt-8 pt-8 border-t border-green-200"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto text-sm text-gray-600">
              <div className="flex items-center justify-center space-x-2">
                <span>📍</span>
                <span>Via Cavalleggeri Udine, Mezzolombardo</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <span>🕒</span>
                <span>Lun-Sab: 07:00-19:30</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <span>📞</span>
                <span>+39 351 577 6198</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <span>📧</span>
                <span>bottamedipierluigi@virgilio.it</span>
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  )
}

export default ProductsSection

--- FILE: src/components/sections/ServicesSection.tsx ---
import React, { useState, useCallback, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface ServicesSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'I Nostri Servizi',
    subtitle: 'Due modi per portare la qualità Bottamedi sulla tua tavola',
    services: [
      {
        id: 'retail',
        title: 'Il Nostro Banchetto',
        shortDesc: 'Esperienza diretta con i prodotti migliori',
        description: 'Nel cuore di Mezzolombardo, il nostro colorato banchetto è molto più di un semplice punto vendita. È il luogo dove la passione di famiglia incontra la qualità quotidiana.',
        longDescription: 'Ogni mattina alle prime luci dell\'alba, selezioniamo personalmente frutta e verdura freschissima, creando un arcobaleno di sapori e colori che racconta la storia della nostra terra. Qui trovi non solo prodotti freschi, ma anche consigli personalizzati tramandati da tre generazioni.',
        features: [
          { icon: '🌅', title: 'Freschezza Mattutina', desc: 'Selezione quotidiana alle prime ore del giorno' },
          { icon: '🎨', title: 'Varietà Colorata', desc: 'Oltre 100 tipologie di frutta e verdura sempre disponibili' },
          { icon: '👨‍👩‍👧‍👦', title: 'Tradizione Familiare', desc: 'Consigli e ricette tramandati da tre generazioni' },
          { icon: '🏔️', title: 'Prodotti del Territorio', desc: 'Specialità locali del Trentino Alto Adige selezionate' },
          { icon: '💝', title: 'Servizio Personalizzato', desc: 'Attenzione individuale per ogni cliente' },
          { icon: '🕰️', title: 'Orari Flessibili', desc: 'Aperti 6 giorni su 7 per la tua comodità' }
        ],
        icon: '🛒',
        color: 'from-brand-500 to-brand-600',
        image: '/images/banchetto.webp',
        stats: [
          { label: 'Anni di tradizione', value: '50' },
          { label: 'Varietà disponibili', value: '100+' },
          { label: 'Clienti fedeli', value: '500+' }
        ]
      },
      {
        id: 'horeca',
        title: 'Servizio Ingrosso HORECA',
        shortDesc: 'Partner di fiducia per la tua attività',
        description: 'Il cuore pulsante della nostra attività: forniamo ogni giorno ristoranti, hotel, pizzerie e negozi con la stessa passione e qualità che mettiamo al nostro banchetto.',
        longDescription: 'Non siamo solo fornitori, siamo partner che comprendono le esigenze del tuo business. Ogni alba iniziamo il nostro lavoro selezionando i prodotti migliori per i nostri clienti HORECA. La nostra esperienza ci permette di anticipare le tue esigenze stagionali e proporti sempre il meglio del mercato.',
        features: [
          { icon: '🚚', title: 'Consegne Puntuali', desc: 'Servizio di consegna 6 giorni su 7 in orari concordati' },
          { icon: '🔍', title: 'Selezione Rigorosa', desc: 'Controllo qualità su ogni singolo prodotto' },
          { icon: '📋', title: 'Listini Personalizzati', desc: 'Prezzi competitivi adattati alle tue esigenze' },
          { icon: '🤝', title: 'Partnership Duratura', desc: 'Rapporti di fiducia costruiti negli anni' },
          { icon: '📱', title: 'Ordinazioni Semplici', desc: 'Sistema di ordini rapido e affidabile' },
          { icon: '🎯', title: 'Prodotti Stagionali', desc: 'Consulenza su disponibilità e stagionalità' }
        ],
        icon: '🏨',
        color: 'from-accent-500 to-accent-600',
        image: '/images/albicocche_ingrosso_magazzino.webp',
        stats: [
          { label: 'Ristoranti partner', value: '50+' },
          { label: 'Consegne settimanali', value: '300+' },
          { label: 'Anni di esperienza', value: '30+' }
        ]
      }
    ]
  },
  de: {
    title: 'Unsere Dienstleistungen',
    subtitle: 'Zwei Wege, um Bottamedi-Qualität auf Ihren Tisch zu bringen',
    services: [
      {
        id: 'retail',
        title: 'Unser Marktstand',
        shortDesc: 'Direkter Kontakt mit den besten Produkten',
        description: 'Im Herzen von Mezzolombardo ist unser bunter Marktstand viel mehr als nur ein Verkaufspunkt.',
        longDescription: 'Jeden Morgen wählen wir persönlich frischestes Obst und Gemüse aus.',
        features: [
          { icon: '🌅', title: 'Morgenfrische', desc: 'Tägliche Auswahl in den frühen Morgenstunden' },
          { icon: '🎨', title: 'Bunte Vielfalt', desc: 'Über 100 Sorten immer verfügbar' },
          { icon: '👨‍👩‍👧‍👦', title: 'Familientradition', desc: 'Tipps aus drei Generationen' },
          { icon: '🏔️', title: 'Regionale Produkte', desc: 'Spezialitäten aus Südtirol' },
          { icon: '💝', title: 'Persönlicher Service', desc: 'Individuelle Betreuung' },
          { icon: '🕰️', title: 'Flexible Zeiten', desc: '6 Tage die Woche geöffnet' }
        ],
        icon: '🛒',
        color: 'from-brand-500 to-brand-600',
        image: '/images/banchetto.webp',
        stats: [
          { label: 'Jahre Tradition', value: '50' },
          { label: 'Verfügbare Sorten', value: '100+' },
          { label: 'Treue Kunden', value: '500+' }
        ]
      },
      {
        id: 'horeca',
        title: 'HORECA Großhandel',
        shortDesc: 'Vertrauenspartner für Ihr Unternehmen',
        description: 'Wir beliefern täglich Restaurants, Hotels und Pizzerien.',
        longDescription: 'Wir sind Partner, die die Bedürfnisse verstehen.',
        features: [
          { icon: '🚚', title: 'Pünktliche Lieferungen', desc: '6 Tage die Woche' },
          { icon: '🔍', title: 'Strenge Auswahl', desc: 'Qualitätskontrolle' },
          { icon: '📋', title: 'Preislisten', desc: 'Wettbewerbsfähige Preise' },
          { icon: '🤝', title: 'Partnerschaft', desc: 'Vertrauensverhältnisse' },
          { icon: '📱', title: 'Einfache Bestellungen', desc: 'Schnelles System' },
          { icon: '🎯', title: 'Saisonale Produkte', desc: 'Beratung zur Verfügbarkeit' }
        ],
        icon: '🏨',
        color: 'from-accent-500 to-accent-600',
        image: '/images/albicocche_ingrosso_magazzino.webp',
        stats: [
          { label: 'Restaurant-Partner', value: '50+' },
          { label: 'Wöchentliche Lieferungen', value: '300+' },
          { label: 'Jahre Erfahrung', value: '30+' }
        ]
      }
    ]
  }
}

// Animazioni ottimizzate e smooth
const smoothVariants = {
  card: {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: 0.4,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  },
  cardHover: {
    y: -3,
    transition: { 
      duration: 0.2, 
      ease: "easeOut" 
    }
  },
  image: {
    hover: { 
      scale: 1.03, 
      transition: { 
        duration: 0.3, 
        ease: "easeOut" 
      } 
    }
  },
  detailsPanel: {
    hidden: { opacity: 0, x: 20 },
    visible: { 
      opacity: 1, 
      x: 0,
      transition: {
        duration: 0.3,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    },
    exit: { 
      opacity: 0, 
      x: -20,
      transition: {
        duration: 0.2,
        ease: "easeIn"
      }
    }
  }
}

const DesktopServiceCard: React.FC<{
  service: any
  index: number
  isActive: boolean
  onClick: () => void
}> = React.memo(({ service, index, isActive, onClick }) => {
  const [ref, inView] = useInView({
    threshold: 0.3,
    triggerOnce: true
  })

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={smoothVariants.card}
      transition={{ delay: index * 0.1 }}
      className="relative"
    >
      <motion.div
        onClick={onClick}
        whileHover="hover"
        variants={smoothVariants.cardHover}
        className={`
          relative overflow-hidden rounded-3xl cursor-pointer transition-all duration-300
          ${isActive 
            ? 'ring-4 ring-brand-500/30 shadow-2xl scale-[1.02]' 
            : 'shadow-lg hover:shadow-xl'
          }
        `}
      >
        <div className="relative h-80 overflow-hidden">
          <motion.img
            src={service.image}
            alt={service.title}
            className="w-full h-full object-cover"
            variants={smoothVariants.image}
            loading="lazy"
          />
          <div className={`absolute inset-0 bg-gradient-to-t ${service.color} opacity-80`} />
        </div>

        <div className="absolute inset-0 flex flex-col justify-end p-8 text-white">
          <div className="text-5xl mb-4">{service.icon}</div>
          <h3 className="text-2xl lg:text-3xl font-bold mb-2">{service.title}</h3>
          <p className="text-white/90 mb-4">{service.shortDesc}</p>
          
          <div className="flex space-x-4 text-sm">
            {service.stats.slice(0, 2).map((stat: any, i: number) => (
              <div key={i} className="text-center">
                <div className="font-bold text-lg">{stat.value}</div>
                <div className="text-white/70">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>

        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ scale: 0, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0, opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="absolute top-4 right-4 w-6 h-6 bg-white rounded-full flex items-center justify-center"
            >
              <div className="w-3 h-3 bg-brand-500 rounded-full"></div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </motion.div>
  )
})

const ServicesSection: React.FC<ServicesSectionProps> = ({ language, inView }) => {
  const [activeService, setActiveService] = useState(0)
  
  const t = useMemo(() => translations[language], [language])

  const handleDesktopClick = useCallback((index: number) => {
    setActiveService(index)
  }, [])

  return (
    <section id="services" className="py-24 lg:py-32 bg-white relative overflow-hidden">
      {/* Background ottimizzato */}
      <div className="absolute inset-0 opacity-30 pointer-events-none">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-brand-100 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-accent-100 rounded-full blur-3xl"></div>
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6 }}
          className="text-center mb-20"
        >
          <h2 className="text-4xl lg:text-6xl font-bold text-neutral-900 mb-6 bg-gradient-to-r from-brand-600 to-accent-600 bg-clip-text text-transparent">
            {t.title}
          </h2>
          <p className="text-2xl text-neutral-600 max-w-4xl mx-auto">
            {t.subtitle}
          </p>
        </motion.div>

        {/* Desktop Layout */}
        <div className="hidden lg:grid lg:grid-cols-2 gap-12 items-start mb-20">
          <div className="space-y-8">
            {t.services.map((service, index) => (
              <DesktopServiceCard
                key={service.id}
                service={service}
                index={index}
                isActive={activeService === index}
                onClick={() => handleDesktopClick(index)}
              />
            ))}
          </div>

          {/* Service Details Desktop - Animazioni Smooth */}
          <div className="sticky top-32">
            <AnimatePresence mode="wait">
              <motion.div
                key={activeService}
                variants={smoothVariants.detailsPanel}
                initial="hidden"
                animate="visible"
                exit="exit"
                className="bg-white rounded-3xl shadow-2xl p-8 lg:p-12"
              >
                {/* Header */}
                <div className="flex items-center space-x-4 mb-8">
                  <div className={`w-16 h-16 rounded-2xl bg-gradient-to-br ${t.services[activeService].color} flex items-center justify-center text-2xl`}>
                    {t.services[activeService].icon}
                  </div>
                  <div>
                    <h3 className="text-3xl font-bold text-neutral-900">{t.services[activeService].title}</h3>
                    <p className="text-neutral-600">{t.services[activeService].shortDesc}</p>
                  </div>
                </div>

                {/* Description */}
                <div className="mb-8">
                  <p className="text-lg text-neutral-700 leading-relaxed mb-4">
                    {t.services[activeService].description}
                  </p>
                  <p className="text-base text-neutral-600 leading-relaxed">
                    {t.services[activeService].longDescription}
                  </p>
                </div>

                {/* Features Grid */}
                <div className="mb-8">
                  <h4 className="text-xl font-semibold text-neutral-900 mb-6">Cosa ti offriamo:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {t.services[activeService].features.map((feature: any, index: number) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, y: 15 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ 
                          duration: 0.3, 
                          delay: index * 0.05,
                          ease: "easeOut"
                        }}
                        className="flex items-start space-x-3 p-4 rounded-2xl bg-neutral-50 hover:bg-neutral-100 transition-colors duration-200"
                      >
                        <div className="text-2xl">{feature.icon}</div>
                        <div>
                          <h5 className="font-semibold text-neutral-900 mb-1">{feature.title}</h5>
                          <p className="text-neutral-600 text-sm">{feature.desc}</p>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                </div>

                {/* Stats */}
                <div className="grid grid-cols-3 gap-6">
                  {t.services[activeService].stats.map((stat: any, index: number) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ 
                        duration: 0.3, 
                        delay: index * 0.1,
                        ease: "easeOut"
                      }}
                      className="text-center p-4 bg-neutral-50 rounded-2xl"
                    >
                      <div className={`text-3xl font-bold bg-gradient-to-r ${t.services[activeService].color} bg-clip-text text-transparent`}>
                        {stat.value}
                      </div>
                      <div className="text-sm text-neutral-600 mt-1">{stat.label}</div>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </AnimatePresence>
          </div>
        </div>
      </div>
    </section>
  )
}

export default ServicesSection

--- FILE: src/components/sections/Wholesalecontact.tsx ---
import React, { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface WholesaleContactProps {
  language: 'it' | 'de'
}

const translations = {
  it: {
    title: 'Richiedi il Listino Ingrosso',
    subtitle: 'Partnership HORECA per la tua attività',
    description: 'Unisciti a oltre 50 ristoranti, hotel e pizzerie che si affidano alla qualità Bottamedi. Ricevi il nostro listino prezzi aggiornato e scopri le condizioni dedicate ai professionali del settore.',
    benefits: [
      {
        icon: '📋',
        title: 'Listino Personalizzato',
        desc: 'Prezzi dedicati in base ai volumi'
      },
      {
        icon: '🚚',
        title: 'Consegne Programmate',
        desc: 'Servizio 6 giorni su 7 in orari concordati'
      },
      {
        icon: '🎯',
        title: 'Selezione Premium',
        desc: 'Prodotti selezionati per il settore HORECA'
      },
      {
        icon: '🤝',
        title: 'Partnership Duratura',
        desc: 'Rapporto di fiducia e consulenza continua'
      }
    ],
    form: {
      businessName: 'Nome dell\'attività *',
      businessNamePlaceholder: 'es. Ristorante Da Mario',
      contactPerson: 'Referente *',
      contactPersonPlaceholder: 'Nome e cognome',
      phone: 'Telefono *', 
      phonePlaceholder: '+39 333 123456',
      email: 'Email *',
      emailPlaceholder: 'tua@email.it',
      businessType: 'Tipo di attività *',
      businessTypeOptions: [
        'Seleziona il tipo di attività',
        'Ristorante',
        'Pizzeria', 
        'Hotel',
        'Bar/Caffetteria',
        'Catering',
        'Mensa aziendale',
        'Negozio alimentari',
        'Altro'
      ],
      location: 'Località',
      locationPlaceholder: 'Città/Comune',
      message: 'Note aggiuntive',
      messagePlaceholder: 'Raccontaci le tue esigenze specifiche...',
      privacy: 'Accetto il trattamento dei dati personali secondo la privacy policy',
      submit: 'Richiedi Listino Ingrosso',
      sending: 'Invio in corso...',
      success: 'Richiesta inviata con successo!',
      successMessage: 'Ti contatteremo entro 24 ore per fornirti il listino personalizzato.',
      error: 'Errore nell\'invio. Riprova o contattaci direttamente.'
    }
  },
  de: {
    title: 'Großhandels-Preisliste anfordern',
    subtitle: 'HORECA-Partnerschaft für Ihr Unternehmen',
    description: 'Schließen Sie sich über 50 Restaurants, Hotels und Pizzerien an, die auf die Qualität von Bottamedi vertrauen. Erhalten Sie unsere aktuelle Preisliste und entdecken Sie die speziellen Konditionen für Fachleute.',
    benefits: [
      {
        icon: '📋',
        title: 'Personalisierte Preisliste',
        desc: 'Dedizierte Preise basierend auf Volumen'
      },
      {
        icon: '🚚',
        title: 'Geplante Lieferungen',
        desc: 'Service 6 Tage die Woche zu vereinbarten Zeiten'
      },
      {
        icon: '🎯',
        title: 'Premium-Auswahl',
        desc: 'Für HORECA-Sektor ausgewählte Produkte'
      },
      {
        icon: '🤝',
        title: 'Dauerhafte Partnerschaft',
        desc: 'Vertrauensverhältnis und kontinuierliche Beratung'
      }
    ],
    form: {
      businessName: 'Unternehmensname *',
      businessNamePlaceholder: 'z.B. Restaurant Da Mario',
      contactPerson: 'Ansprechpartner *',
      contactPersonPlaceholder: 'Vor- und Nachname',
      phone: 'Telefon *',
      phonePlaceholder: '+39 333 123456',
      email: 'E-Mail *',
      emailPlaceholder: 'ihre@email.de',
      businessType: 'Unternehmenstyp *',
      businessTypeOptions: [
        'Unternehmenstyp wählen',
        'Restaurant',
        'Pizzeria',
        'Hotel',
        'Bar/Café',
        'Catering',
        'Betriebsmensa',
        'Lebensmittelgeschäft',
        'Andere'
      ],
      location: 'Standort',
      locationPlaceholder: 'Stadt/Gemeinde',
      message: 'Zusätzliche Notizen',
      messagePlaceholder: 'Erzählen Sie uns von Ihren spezifischen Bedürfnissen...',
      privacy: 'Ich akzeptiere die Verarbeitung personenbezogener Daten gemäß Datenschutzrichtlinie',
      submit: 'Großhandels-Preisliste anfordern',
      sending: 'Wird gesendet...',
      success: 'Anfrage erfolgreich gesendet!',
      successMessage: 'Wir werden Sie innerhalb von 24 Stunden kontaktieren, um Ihnen die personalisierte Preisliste zu liefern.',
      error: 'Fehler beim Senden. Versuchen Sie es erneut oder kontaktieren Sie uns direkt.'
    }
  }
}

const WholesaleContact: React.FC<WholesaleContactProps> = ({ language }) => {
  const [ref, inView] = useInView({ threshold: 0.3, triggerOnce: true })
  const [formData, setFormData] = useState({
    businessName: '',
    contactPerson: '',
    phone: '',
    email: '',
    businessType: '',
    location: '',
    message: ''
  })
  const [privacyAccepted, setPrivacyAccepted] = useState(false)
  const [status, setStatus] = useState<'idle' | 'sending' | 'success' | 'error'>('idle')

  const t = translations[language]

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setStatus('sending')

    try {
      // Costruisci l'email
      const emailSubject = encodeURIComponent('Richiesta Listino Ingrosso HORECA - Bottamedi')
      const emailBody = encodeURIComponent(`
Nuova richiesta listino ingrosso da bottamedi.eu

DATI AZIENDA:
Nome attività: ${formData.businessName}
Tipo attività: ${formData.businessType}
Località: ${formData.location}

REFERENTE:
Nome: ${formData.contactPerson}
Telefono: ${formData.phone}
Email: ${formData.email}

NOTE AGGIUNTIVE:
${formData.message}

---
Richiesta inviata automaticamente dal sito bottamedi.eu
      `)

      // Apri client email dell'utente
      window.location.href = `mailto:bottamedipierluigi@virgilio.it?subject=${emailSubject}&body=${emailBody}`
      
      // Simula invio per UX
      setTimeout(() => {
        setStatus('success')
        // Reset form dopo 3 secondi
        setTimeout(() => {
          setStatus('idle')
          setFormData({
            businessName: '',
            contactPerson: '',
            phone: '',
            email: '',
            businessType: '',
            location: '',
            message: ''
          })
          setPrivacyAccepted(false)
        }, 3000)
      }, 1000)

    } catch (error) {
      setStatus('error')
      setTimeout(() => setStatus('idle'), 3000)
    }
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const isFormValid = formData.businessName && 
                     formData.contactPerson && 
                     formData.phone && 
                     formData.email && 
                     formData.businessType &&
                     privacyAccepted

  return (
    <section id="wholesale" className="py-24 bg-gradient-to-br from-blue-50 via-white to-green-50 relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 opacity-30">
        <div className="absolute top-0 right-1/4 w-96 h-96 bg-blue-200 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 left-1/4 w-96 h-96 bg-green-200 rounded-full blur-3xl"></div>
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <motion.div
          ref={ref}
          initial={{ opacity: 0, y: 50 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="max-w-6xl mx-auto"
        >
          {/* Header */}
          <div className="text-center mb-16">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={inView ? { opacity: 1, scale: 1 } : {}}
              transition={{ duration: 0.6 }}
              className="inline-flex items-center space-x-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium mb-6"
            >
              <span>🏢</span>
              <span>Servizio HORECA</span>
            </motion.div>

            <motion.h2
              initial={{ opacity: 0, y: 30 }}
              animate={inView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.8, delay: 0.2 }}
              className="text-4xl lg:text-6xl font-bold text-gray-900 mb-6"
            >
              <span className="bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent">
                {t.title}
              </span>
            </motion.h2>

            <motion.p
              initial={{ opacity: 0, y: 30 }}
              animate={inView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.8, delay: 0.3 }}
              className="text-xl text-gray-600 max-w-3xl mx-auto mb-8"
            >
              {t.subtitle}
            </motion.p>

            <motion.p
              initial={{ opacity: 0, y: 30 }}
              animate={inView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.8, delay: 0.4 }}
              className="text-gray-600 max-w-4xl mx-auto leading-relaxed"
            >
              {t.description}
            </motion.p>
          </div>

          <div className="grid lg:grid-cols-2 gap-12 items-start">
            {/* Benefits */}
            <motion.div
              initial={{ opacity: 0, x: -50 }}
              animate={inView ? { opacity: 1, x: 0 } : {}}
              transition={{ duration: 0.8, delay: 0.5 }}
              className="space-y-8"
            >
              <h3 className="text-2xl font-bold text-gray-900 mb-6">
                Perché scegliere Bottamedi per il tuo business:
              </h3>
              
              <div className="space-y-6">
                {t.benefits.map((benefit, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={inView ? { opacity: 1, y: 0 } : {}}
                    transition={{ duration: 0.6, delay: 0.6 + index * 0.1 }}
                    className="flex items-start space-x-4 p-4 bg-white rounded-2xl shadow-sm border border-gray-100 hover:shadow-md transition-shadow"
                  >
                    <div className="text-3xl">{benefit.icon}</div>
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-1">{benefit.title}</h4>
                      <p className="text-gray-600 text-sm">{benefit.desc}</p>
                    </div>
                  </motion.div>
                ))}
              </div>

              {/* Contact Info */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={inView ? { opacity: 1, y: 0 } : {}}
                transition={{ duration: 0.6, delay: 1 }}
                className="bg-gradient-to-br from-green-50 to-blue-50 p-6 rounded-2xl border border-green-200"
              >
                <h4 className="font-semibold text-gray-900 mb-3">Contatti diretti:</h4>
                <div className="space-y-2 text-sm text-gray-600">
                  <div className="flex items-center space-x-2">
                    <span>📞</span>
                    <span>+39 351 577 6198</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span>📧</span>
                    <span>bottamedipierluigi@virgilio.it</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span>📍</span>
                    <span>Via de Gasperi 47, Mezzolombardo (TN)</span>
                  </div>
                </div>
              </motion.div>
            </motion.div>

            {/* Form */}
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={inView ? { opacity: 1, x: 0 } : {}}
              transition={{ duration: 0.8, delay: 0.6 }}
            >
              <div className="bg-white rounded-3xl shadow-2xl p-8 border border-gray-100">
                <AnimatePresence mode="wait">
                  {status === 'success' ? (
                    <motion.div
                      key="success"
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.9 }}
                      className="text-center py-8"
                    >
                      <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span className="text-2xl">✅</span>
                      </div>
                      <h3 className="text-2xl font-bold text-gray-900 mb-2">{t.form.success}</h3>
                      <p className="text-gray-600">{t.form.successMessage}</p>
                    </motion.div>
                  ) : (
                    <motion.form
                      key="form"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      onSubmit={handleSubmit}
                      className="space-y-6"
                    >
                      <div className="text-center mb-6">
                        <h3 className="text-2xl font-bold text-gray-900 mb-2">
                          Compila il modulo
                        </h3>
                        <p className="text-gray-600 text-sm">
                          Ti contatteremo entro 24 ore con il listino personalizzato
                        </p>
                      </div>

                      {/* Business Name */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t.form.businessName}
                        </label>
                        <input
                          type="text"
                          required
                          value={formData.businessName}
                          onChange={(e) => handleInputChange('businessName', e.target.value)}
                          placeholder={t.form.businessNamePlaceholder}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                        />
                      </div>

                      {/* Contact Person */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t.form.contactPerson}
                        </label>
                        <input
                          type="text"
                          required
                          value={formData.contactPerson}
                          onChange={(e) => handleInputChange('contactPerson', e.target.value)}
                          placeholder={t.form.contactPersonPlaceholder}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                        />
                      </div>

                      {/* Phone & Email Row */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            {t.form.phone}
                          </label>
                          <input
                            type="tel"
                            required
                            value={formData.phone}
                            onChange={(e) => handleInputChange('phone', e.target.value)}
                            placeholder={t.form.phonePlaceholder}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            {t.form.email}
                          </label>
                          <input
                            type="email"
                            required
                            value={formData.email}
                            onChange={(e) => handleInputChange('email', e.target.value)}
                            placeholder={t.form.emailPlaceholder}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                          />
                        </div>
                      </div>

                      {/* Business Type */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t.form.businessType}
                        </label>
                        <select
                          required
                          value={formData.businessType}
                          onChange={(e) => handleInputChange('businessType', e.target.value)}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-white"
                        >
                          {t.form.businessTypeOptions.map((option, index) => (
                            <option key={index} value={index === 0 ? '' : option}>
                              {option}
                            </option>
                          ))}
                        </select>
                      </div>

                      {/* Location */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t.form.location}
                        </label>
                        <input
                          type="text"
                          value={formData.location}
                          onChange={(e) => handleInputChange('location', e.target.value)}
                          placeholder={t.form.locationPlaceholder}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                        />
                      </div>

                      {/* Message */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t.form.message}
                        </label>
                        <textarea
                          rows={4}
                          value={formData.message}
                          onChange={(e) => handleInputChange('message', e.target.value)}
                          placeholder={t.form.messagePlaceholder}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none"
                        />
                      </div>

                      {/* Privacy */}
                      <div className="flex items-start space-x-3">
                        <input
                          type="checkbox"
                          id="privacy"
                          checked={privacyAccepted}
                          onChange={(e) => setPrivacyAccepted(e.target.checked)}
                          className="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <label htmlFor="privacy" className="text-sm text-gray-600 leading-relaxed">
                          {t.form.privacy}
                        </label>
                      </div>

                      {/* Submit Button */}
                      <motion.button
                        type="submit"
                        disabled={!isFormValid || status === 'sending'}
                        whileHover={isFormValid ? { scale: 1.02, y: -2 } : {}}
                        whileTap={isFormValid ? { scale: 0.98 } : {}}
                        className={`w-full py-4 px-6 rounded-2xl font-semibold text-lg transition-all duration-300 ${
                          isFormValid && status !== 'sending'
                            ? 'bg-gradient-to-r from-blue-600 to-green-600 text-white shadow-lg hover:shadow-xl'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        }`}
                      >
                        {status === 'sending' ? (
                          <div className="flex items-center justify-center space-x-2">
                            <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            <span>{t.form.sending}</span>
                          </div>
                        ) : (
                          <>
                            <span>{t.form.submit}</span>
                            <span className="ml-2">📧</span>
                          </>
                        )}
                      </motion.button>

                      {/* Error Message */}
                      {status === 'error' && (
                        <motion.div
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="text-center text-red-600 text-sm bg-red-50 p-3 rounded-xl"
                        >
                          {t.form.error}
                        </motion.div>
                      )}
                    </motion.form>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </section>
  )
}

export default WholesaleContact

--- FILE: src/components/types/index.ts ---
// Animation Types
export interface AnimationConfig {
  duration?: number
  delay?: number
  ease?: string | number[]
  stagger?: number
}

export interface TransitionConfig {
  type?: 'spring' | 'tween' | 'inertia'
  stiffness?: number
  damping?: number
  mass?: number
  velocity?: number
}

// Component Props
export interface BaseComponentProps {
  className?: string
  children?: React.ReactNode
  id?: string
}

export interface SectionProps extends BaseComponentProps {
  language: 'it' | 'de'
  inView: boolean
}

// Language Types
export type Language = 'it' | 'de'

export interface Translation {
  [key: string]: string | Translation
}

export interface Translations {
  [key: string]: Translation
}

// Product Types
export interface Product {
  id: string
  name: string
  description: string
  image: string
  season: string
  origin: string
  category: 'seasonal' | 'vegetables' | 'specialty'
  price?: number
  available?: boolean
}

export interface ProductCategory {
  id: string
  name: string
  icon: string
  description: string
  color: string
  products: Product[]
}

// Service Types
export interface Service {
  id: string
  title: string
  shortDesc: string
  description: string
  features: string[]
  icon: string
  color: string
  image: string
  stats: ServiceStat[]
}

export interface ServiceStat {
  label: string
  value: string
}

// Contact Types
export interface ContactInfo {
  name: string
  email: string
  phone: string
  message: string
  service?: 'retail' | 'horeca' | 'consulting'
  company?: string
}

export interface ContactFormErrors {
  name?: string
  email?: string
  phone?: string
  message?: string
}

// Timeline Types
export interface TimelineEvent {
  year: string
  title: string
  description: string
  image: string
}

// Navigation Types
export interface NavItem {
  id: string
  label: string
  href: string
}

// Animation Variants
export interface AnimationVariants {
  initial: any
  animate: any
  exit?: any
  hover?: any
  tap?: any
}

// 3D Scene Types
export interface Vector3D {
  x: number
  y: number
  z: number
}

export interface Particle {
  id: string
  position: Vector3D
  velocity: Vector3D
  color: string
  size: number
  life: number
  maxLife: number
}

// Hook Types
export interface UseIntersectionObserverOptions {
  threshold?: number | number[]
  root?: Element | null
  rootMargin?: string
  triggerOnce?: boolean
}

export interface UseIntersectionObserverReturn {
  ref: React.RefObject<Element>
  inView: boolean
  entry?: IntersectionObserverEntry
}

// Utility Types
export interface ScrollPosition {
  x: number
  y: number
}

export interface WindowSize {
  width: number
  height: number
}

export interface MousePosition {
  x: number
  y: number
}

// API Types
export interface ApiResponse<T = any> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

export interface ContactSubmissionResponse {
  success: boolean
  message: string
  id?: string
}

// Theme Types
export interface ThemeColors {
  brand: {
    50: string
    100: string
    200: string
    300: string
    400: string
    500: string
    600: string
    700: string
    800: string
    900: string
    950: string
  }
  accent: {
    50: string
    100: string
    200: string
    300: string
    400: string
    500: string
    600: string
    700: string
    800: string
    900: string
    950: string
  }
  neutral: {
    50: string
    100: string
    200: string
    300: string
    400: string
    500: string
    600: string
    700: string
    800: string
    900: string
    950: string
  }
}

// Form Types
export interface FormField {
  name: string
  label: string
  type: 'text' | 'email' | 'tel' | 'textarea' | 'select'
  required?: boolean
  placeholder?: string
  options?: { value: string; label: string }[]
  validation?: (value: string) => string | undefined
}

// Performance Types
export interface PerformanceMetrics {
  loadTime: number
  renderTime: number
  interactionTime: number
  firstContentfulPaint: number
  largestContentfulPaint: number
}

// Error Types
export interface AppError {
  code: string
  message: string
  details?: any
  timestamp: Date
}

// State Management Types
export interface AppState {
  language: Language
  theme: 'light' | 'dark'
  isMenuOpen: boolean
  isLoading: boolean
  currentSection: string
  scrollPosition: ScrollPosition
  windowSize: WindowSize
  mousePosition: MousePosition
}

export interface AppActions {
  setLanguage: (language: Language) => void
  setTheme: (theme: 'light' | 'dark') => void
  toggleMenu: () => void
  setLoading: (loading: boolean) => void
  setCurrentSection: (section: string) => void
  updateScrollPosition: (position: ScrollPosition) => void
  updateWindowSize: (size: WindowSize) => void
  updateMousePosition: (position: MousePosition) => void
}

// Event Types
export interface CustomEvent<T = any> {
  type: string
  data?: T
  timestamp: Date
}

export interface ScrollEvent extends CustomEvent {
  direction: 'up' | 'down'
  progress: number
  velocity: number
}

export interface ResizeEvent extends CustomEvent {
  size: WindowSize
  breakpoint: 'mobile' | 'tablet' | 'desktop'
}

export interface InteractionEvent extends CustomEvent {
  element: string
  action: 'click' | 'hover' | 'focus' | 'scroll'
  coordinates?: MousePosition
}

--- FILE: src/components/layout/Footer.tsx ---
import React from 'react'
import { motion } from 'framer-motion'

interface FooterProps {
  language: 'it' | 'de'
}

const translations = {
  it: {
    company: {
      name: 'BOTTAMEDI',
      description: 'Tre generazioni di eccellenza nell\'ortofrutta. Qualità inarrivabile e passione familiare dal 1974.',
      tagline: 'Da oltre 50 anni, la passione per la qualità'
    },
    links: {
      about: 'La Nostra Storia',
      banchetto: 'Al Banchetto',
      services: 'Servizi Ingrosso',
      contact: 'Contatti',
      privacy: 'Privacy Policy',
      terms: 'Termini di Servizio'
    },
    contact: {
      title: 'Contatti',
      retail: {
        title: 'Banchetto (Dettaglio)',
        address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
        phone: '351 577 6198',
        hours: 'Lun-Sab: 07:00-19:30'
      },
      horeca: {
        title: 'Ingrosso HORECA',
        address: 'Via A. de Gasperi, 47, 38017 Mezzolombardo (TN)',
        phone: '0461 602534',
        email: 'bottamedipierluigi@virgilio.it'
      }
    },
    social: {
      title: 'Seguici',
      facebook: 'Facebook',
      instagram: 'Instagram',
      whatsapp: 'WhatsApp'
    },
    legal: {
      copyright: 'Tutti i diritti riservati.',
      company: 'Bottamedi Frutta e Verdura di Bottamedi Pierluigi',
      vat: 'P.IVA 02273530226',
      madeby: 'Realizzato da Bottamedi Gianluca'
    }
  },
  de: {
    company: {
      name: 'BOTTAMEDI',
      description: 'Drei Generationen Exzellenz in Obst und Gemüse. Unübertreffliche Qualität und familiäre Leidenschaft seit 1974.',
      tagline: 'Seit über 50 Jahren, Leidenschaft für Qualität'
    },
    links: {
      about: 'Unsere Geschichte',
      banchetto: 'Marktstand',
      services: 'Großhandel Service',
      contact: 'Kontakt',
      privacy: 'Datenschutzerklärung',
      terms: 'Nutzungsbedingungen'
    },
    contact: {
      title: 'Kontakt',
      retail: {
        title: 'Marktstand (Detail)',
        address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
        phone: '351 577 6198',
        hours: 'Mo-Sa: 07:00-19:30'
      },
      horeca: {
        title: 'Großhandel HORECA',
        address: 'Via A. de Gasperi, 47, 38017 Mezzolombardo (TN)',
        phone: '0461 602534',
        email: 'bottamedipierluigi@virgilio.it'
      }
    },
    social: {
      title: 'Folgen Sie uns',
      facebook: 'Facebook',
      instagram: 'Instagram',
      whatsapp: 'WhatsApp'
    },
    legal: {
      copyright: 'Alle Rechte vorbehalten.',
      company: 'Bottamedi Obst und Gemüse von Bottamedi Pierluigi',
      vat: 'MwSt-Nr. 02273530226',
      madeby: 'Erstellt von Bottamedi Gianluca'
    }
  }
} as const

const SocialIcon: React.FC<{
  href: string
  icon: React.ReactNode
  label: string
}> = ({ href, icon, label }) => (
  <motion.a
    href={href}
    target="_blank"
    rel="noopener noreferrer"
    aria-label={label}
    whileHover={{ scale: 1.1, y: -2 }}
    whileTap={{ scale: 0.9 }}
    className="w-12 h-12 bg-white/10 backdrop-blur-sm rounded-xl flex items-center justify-center text-white hover:bg-white/20 transition-all duration-300 group"
  >
    <motion.div
      className="w-6 h-6"
      whileHover={{ rotate: 10 }}
      transition={{ duration: 0.2 }}
    >
      {icon}
    </motion.div>
  </motion.a>
)

const Footer: React.FC<FooterProps> = ({ language }) => {
  const t = translations[language]
  const currentYear = new Date().getFullYear()

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  return (
    <footer className="relative bg-gradient-to-br from-neutral-900 via-neutral-800 to-neutral-900 text-white overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-green-500/10 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-green-400/10 rounded-full blur-3xl"></div>
      </div>

      {/* Main Footer Content */}
      <div className="relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 pt-16 pb-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
          {/* Company Info */}
          <div className="lg:col-span-2">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
            >
              <div className="flex items-center space-x-4 mb-6">
                {/* Favicon invece della B generica */}
                <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center overflow-hidden">
                  <img
                    src="/favicon.svg"
                    alt="Bottamedi Favicon"
                    className="w-12 h-12 object-contain"
                    onError={(e) => {
                      // Fallback se favicon.svg non esiste
                      const target = e.target as HTMLImageElement
                      target.style.display = 'none'
                      target.parentElement!.innerHTML = '<span class="text-white font-bold text-2xl">B</span>'
                    }}
                  />
                </div>
                <div>
                  <h2 className="text-3xl font-bold tracking-tight">
                    {t.company.name}
                  </h2>
                  <p className="text-white/80 text-sm">
                    {t.company.tagline}
                  </p>
                </div>
              </div>
              
              <p className="text-white/80 leading-relaxed mb-6 max-w-md">
                {t.company.description}
              </p>

              {/* Social Media */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">{t.social.title}</h3>
                <div className="flex space-x-4">
                  <SocialIcon
                    href="https://www.facebook.com/profile.php?id=100063456281899"
                    label={t.social.facebook}
                    icon={
                      <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                      </svg>
                    }
                  />
                  
                  <SocialIcon
                    href="https://instagram.com/banchetto.bottamedi"
                    label={t.social.instagram}
                    icon={
                      <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                      </svg>
                    }
                  />

                  <SocialIcon
                    href="https://wa.me/393515776198"
                    label={t.social.whatsapp}
                    icon={
                      <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.097"/>
                      </svg>
                    }
                  />
                </div>
              </div>
            </motion.div>
          </div>

          {/* Quick Links */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
            viewport={{ once: true }}
          >
            <h3 className="text-lg font-semibold mb-6">Link Rapidi</h3>
            <ul className="space-y-3">
              {[
                { label: t.links.about, id: 'about' },
                { label: t.links.banchetto, id: 'dettaglio' },
                { label: t.links.services, id: 'services' },
                { label: t.links.contact, id: 'contact' }
              ].map((link) => (
                <li key={link.id}>
                  <button
                    onClick={() => scrollToSection(link.id)}
                    className="text-white/80 hover:text-white transition-colors duration-300 text-left"
                  >
                    {link.label}
                  </button>
                </li>
              ))}
            </ul>
          </motion.div>
        </div>

        {/* Contact Info Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          viewport={{ once: true }}
          className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-16 pt-12 border-t border-white/20"
        >
          {/* Retail Contact */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold text-green-400">
              {t.contact.retail.title}
            </h4>
            <div className="space-y-2 text-white/80">
              <p className="flex items-start space-x-2">
                <svg className="w-5 h-5 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>{t.contact.retail.address}</span>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <a href={`tel:${t.contact.retail.phone.replace(/\s/g, '')}`} className="hover:text-white transition-colors">
                  {t.contact.retail.phone}
                </a>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>{t.contact.retail.hours}</span>
              </p>
            </div>
          </div>

          {/* HORECA Contact */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold text-blue-400">
              {t.contact.horeca.title}
            </h4>
            <div className="space-y-2 text-white/80">
              <p className="flex items-start space-x-2">
                <svg className="w-5 h-5 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>{t.contact.horeca.address}</span>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <a href={`tel:${t.contact.horeca.phone.replace(/\s/g, '')}`} className="hover:text-white transition-colors">
                  {t.contact.horeca.phone}
                </a>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <a href={`mailto:${t.contact.horeca.email}`} className="hover:text-white transition-colors">
                  {t.contact.horeca.email}
                </a>
              </p>
            </div>
          </div>
        </motion.div>

        {/* Bottom Bar */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          viewport={{ once: true }}
          className="mt-12 pt-8 border-t border-white/20"
        >
          <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
            <div className="text-center md:text-left">
              <p className="text-white/80 text-sm">
                © {currentYear} {t.legal.company}. {t.legal.copyright}
              </p>
              <p className="text-white/60 text-sm">
                {t.legal.vat}
              </p>
            </div>
            
            <div className="flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-6">
              <div className="flex space-x-6 text-sm text-white/60">
                <a href="#" className="hover:text-white transition-colors">
                  {t.links.privacy}
                </a>
                <a href="#" className="hover:text-white transition-colors">
                  {t.links.terms}
                </a>
              </div>
              <p className="text-white/40 text-xs">
                {t.legal.madeby}
              </p>
            </div>
          </div>
        </motion.div>
      </div>
    </footer>
  )
}

export default Footer

--- FILE: src/components/layout/Header.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, useScroll, useMotionValueEvent } from 'framer-motion'

interface HeaderProps {
  language: 'it' | 'de'
  onLanguageChange: (language: 'it' | 'de') => void
  isMenuOpen: boolean
  onToggleMenu: () => void
}

const Header: React.FC<HeaderProps> = ({
  language,
  onLanguageChange
}) => {
  const [hidden, setHidden] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)
  const { scrollY } = useScroll()

  // Ottimizzazione: uso useMotionValueEvent per performance
  useMotionValueEvent(scrollY, "change", (latest) => {
    const previous = scrollY.getPrevious() || 0
    setIsScrolled(latest > 50)
    
    // Nascondi header solo se scroll significativo
    if (latest > previous && latest > 150) {
      setHidden(true)
    } else {
      setHidden(false)
    }
  })

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  return (
    <motion.header
      variants={{
        visible: { y: 0 },
        hidden: { y: "-100%" }
      }}
      animate={hidden ? "hidden" : "visible"}
      transition={{ duration: 0.35, ease: "easeInOut" }}
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${
        isScrolled 
          ? 'bg-white/95 backdrop-blur-xl shadow-lg border-b border-neutral-200/50' 
          : 'bg-transparent'
      }`}
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-20">
          {/* Logo Grande a Sinistra - Doppio delle Dimensioni */}
          <motion.div
            onClick={() => scrollToSection('hero')}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="flex items-center cursor-pointer"
          >
            <img
              src="/logo-bottamedi.png"
              alt="Bottamedi Logo"
              className="h-24 w-auto object-contain"
              style={{
                filter: isScrolled 
                  ? 'none' 
                  : 'drop-shadow(0 2px 8px rgba(0,0,0,0.3))'
              }}
            />
          </motion.div>

          {/* Language Selector a Destra */}
          <div className="flex items-center space-x-4">
            {/* Bandiera Italia/Germania */}
            <motion.button
              onClick={() => onLanguageChange(language === 'it' ? 'de' : 'it')}
              className={`flex items-center space-x-3 px-4 py-2 rounded-xl transition-all duration-300 ${
                isScrolled 
                  ? 'bg-neutral-100 hover:bg-neutral-200 text-neutral-700' 
                  : 'bg-white/10 backdrop-blur-sm hover:bg-white/20 text-white/90'
              }`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="text-2xl">
                {language === 'it' ? '🇮🇹' : '🇩🇪'}
              </span>
              <span className="font-medium text-sm">
                {language.toUpperCase()}
              </span>
            </motion.button>
          </div>
        </div>
      </div>
    </motion.header>
  )
}

export default Header

--- FILE: src/components/layout/MobileDock.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface MobileDockProps {
  language: 'it' | 'de'
}

const translations = {
  it: {
    menu: 'Menu',
    call: 'Chiama',
    maps: 'Mappe',
    home: 'Home',
    storia: 'Storia',
    banchetto: 'Al Banchetto',
    servizi: 'Servizi',
    prodotti: 'Prodotti',
    contatti: 'Contatti',
    banchettoPhone: 'Banchetto',
    horecaPhone: 'Ingrosso',
    banchettoMap: 'Banchetto',
    horecaMap: 'Ingrosso'
  },
  de: {
    menu: 'Menü',
    call: 'Anrufen',
    maps: 'Karten',
    home: 'Home',
    storia: 'Geschichte',
    banchetto: 'Marktstand',
    servizi: 'Dienstleistungen',
    prodotti: 'Produkte',
    contatti: 'Kontakt',
    banchettoPhone: 'Marktstand',
    horecaPhone: 'Großhandel',
    banchettoMap: 'Marktstand',
    horecaMap: 'Großhandel'
  }
}

const MobileDock: React.FC<MobileDockProps> = ({ language }) => {
  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null)
  const [isVisible, setIsVisible] = useState(false)
  const [currentSection, setCurrentSection] = useState('hero')
  
  const t = translations[language]

  // 🔧 LOGICA VISIBILITÀ SEMPLICE
  useEffect(() => {
    const handleScroll = () => {
      const scrollY = window.scrollY
      const windowHeight = window.innerHeight
      const shouldShow = scrollY > windowHeight * 0.15 // 15% della viewport
      setIsVisible(shouldShow)
    }

    let ticking = false
    const scrollHandler = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll()
          ticking = false
        })
        ticking = true
      }
    }

    window.addEventListener('scroll', scrollHandler, { passive: true })
    handleScroll()
    
    return () => window.removeEventListener('scroll', scrollHandler)
  }, [])

  // 👁️ OSSERVATORE SEZIONI
  useEffect(() => {
    const sections = ['hero', 'about', 'dettaglio', 'services', 'products', 'contact']
    const observers: IntersectionObserver[] = []

    sections.forEach(sectionId => {
      const element = document.getElementById(sectionId)
      if (element) {
        const observer = new IntersectionObserver(
          ([entry]) => {
            if (entry.isIntersecting) {
              setCurrentSection(sectionId)
            }
          },
          { threshold: 0.3 }
        )
        observer.observe(element)
        observers.push(observer)
      }
    })

    return () => observers.forEach(obs => obs.disconnect())
  }, [])

  // 🎯 UTILITY FUNCTIONS
  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
    setActiveSubmenu(null)
  }

  const toggleSubmenu = (submenu: string) => {
    setActiveSubmenu(activeSubmenu === submenu ? null : submenu)
    
    // 📊 ANALYTICS TRACKING
    if (typeof window !== 'undefined' && window.trackMobileDock) {
      window.trackMobileDock(`toggle_${submenu}`, submenu)
    }
  }

  // 📋 DATI MENU
  const menuItems = [
    { id: 'hero', label: t.home, icon: '🏠' },
    { id: 'about', label: t.storia, icon: '🌱' },
    { id: 'dettaglio', label: t.banchetto, icon: '🛒' },
    { id: 'services', label: t.servizi, icon: '🚛' },
    { id: 'products', label: t.prodotti, icon: '🍎' },
    { id: 'contact', label: t.contatti, icon: '📞' }
  ]

  const phoneItems = [
    { 
      label: t.banchettoPhone, 
      phone: '3515776198', 
      icon: '🛒',
      displayPhone: '351 577 6198'
    },
    { 
      label: t.horecaPhone, 
      phone: '0461602534', 
      icon: '🚛',
      displayPhone: '0461 602534'
    }
  ]

  const mapItems = [
    { 
      label: t.banchettoMap, 
      url: 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN',
      icon: '🛒'
    },
    { 
      label: t.horecaMap, 
      url: 'https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6',
      icon: '🚛'
    }
  ]

  // 🚨 RENDER CONDIZIONALE - Solo se mobile
  if (typeof window !== 'undefined' && window.innerWidth >= 768) {
    return null // Non renderizzare su desktop
  }

  return (
    <>
      {/* 🎭 BACKDROP per submenu */}
      {activeSubmenu && (
        <div
          className="fixed inset-0 bg-black bg-opacity-30 z-[99998]"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: 99998,
            backgroundColor: 'rgba(0, 0, 0, 0.3)',
            backdropFilter: 'blur(4px)'
          }}
          onClick={() => setActiveSubmenu(null)}
        />
      )}

      {/* 📱 MOBILE DOCK BULLETPROOF */}
      {isVisible && (
        <div
          className="mobile-dock-container"
          style={{
            // 🚨 STILI BULLETPROOF per mobile
            position: 'fixed',
            bottom: '20px',
            left: '16px',
            right: '16px',
            zIndex: 999999,
            pointerEvents: 'auto',
            // 🔧 FIX per Android
            WebkitBackfaceVisibility: 'hidden',
            backfaceVisibility: 'hidden',
            WebkitTransform: 'translateZ(0)',
            transform: 'translateZ(0)',
            // 🎯 Force layer
            willChange: 'transform',
            isolation: 'isolate'
          }}
        >
          {/* 📂 SUBMENUS */}
          {activeSubmenu === 'menu' && (
            <div
              style={{
                backgroundColor: 'rgba(255, 255, 255, 0.98)',
                backdropFilter: 'blur(20px)',
                border: '1px solid rgba(229, 231, 235, 0.5)',
                borderRadius: '24px',
                boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                marginBottom: '16px',
                overflow: 'hidden'
              }}
            >
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '8px', padding: '16px' }}>
                {menuItems.map((item) => (
                  <button
                    key={item.id}
                    onClick={() => scrollToSection(item.id)}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '12px',
                      padding: '16px',
                      borderRadius: '16px',
                      border: 'none',
                      backgroundColor: currentSection === item.id 
                        ? 'linear-gradient(to right, rgb(240, 253, 244), rgb(220, 252, 231))' 
                        : 'transparent',
                      color: currentSection === item.id ? '#047857' : '#374151',
                      fontSize: '14px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      boxShadow: currentSection === item.id ? '0 4px 6px -1px rgba(0, 0, 0, 0.1)' : 'none'
                    }}
                    onMouseEnter={(e) => {
                      if (currentSection !== item.id) {
                        e.currentTarget.style.backgroundColor = '#f9fafb'
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentSection !== item.id) {
                        e.currentTarget.style.backgroundColor = 'transparent'
                      }
                    }}
                  >
                    <span style={{ fontSize: '20px' }}>{item.icon}</span>
                    <span>{item.label}</span>
                    {currentSection === item.id && (
                      <div style={{
                        width: '8px',
                        height: '8px',
                        backgroundColor: '#22c55e',
                        borderRadius: '50%',
                        marginLeft: 'auto'
                      }} />
                    )}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Phone Submenu */}
          {activeSubmenu === 'phone' && (
            <div
              style={{
                backgroundColor: 'rgba(255, 255, 255, 0.98)',
                backdropFilter: 'blur(20px)',
                border: '1px solid rgba(34, 197, 94, 0.3)',
                borderRadius: '24px',
                boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                marginBottom: '16px',
                padding: '12px'
              }}
            >
              {phoneItems.map((item, index) => (
                <a
                  key={index}
                  href={`tel:+39${item.phone}`}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    padding: '16px',
                    borderRadius: '16px',
                    textDecoration: 'none',
                    color: '#374151',
                    transition: 'all 0.3s ease',
                    marginBottom: index < phoneItems.length - 1 ? '8px' : '0'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#f0fdf4'
                    e.currentTarget.style.borderColor = '#bbf7d0'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'transparent'
                    e.currentTarget.style.borderColor = 'transparent'
                  }}
                  onClick={() => {
                    setActiveSubmenu(null)
                    // 📊 ANALYTICS TRACKING
                    if (typeof window !== 'undefined' && window.trackContact) {
                      window.trackContact('phone', item.phone === '3515776198' ? 'retail' : 'horeca')
                      window.trackConversionGoal('phone_call')
                    }
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <span style={{ fontSize: '24px' }}>{item.icon}</span>
                    <span style={{ fontWeight: '600' }}>{item.label}</span>
                  </div>
                  <span style={{ color: '#059669', fontWeight: 'bold', fontSize: '14px' }}>
                    {item.displayPhone}
                  </span>
                </a>
              ))}
            </div>
          )}

          {/* Maps Submenu */}
          {activeSubmenu === 'maps' && (
            <div
              style={{
                backgroundColor: 'rgba(255, 255, 255, 0.98)',
                backdropFilter: 'blur(20px)',
                border: '1px solid rgba(59, 130, 246, 0.3)',
                borderRadius: '24px',
                boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                marginBottom: '16px',
                padding: '12px'
              }}
            >
              {mapItems.map((item, index) => (
                <a
                  key={index}
                  href={item.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px',
                    padding: '16px',
                    borderRadius: '16px',
                    textDecoration: 'none',
                    color: '#374151',
                    transition: 'all 0.3s ease',
                    marginBottom: index < mapItems.length - 1 ? '8px' : '0'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#eff6ff'
                    e.currentTarget.style.color = '#2563eb'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'transparent'
                    e.currentTarget.style.color = '#374151'
                  }}
                  onClick={() => {
                    setActiveSubmenu(null)
                    // 📊 ANALYTICS TRACKING
                    if (typeof window !== 'undefined' && window.trackMapsInteraction) {
                      window.trackMapsInteraction(item.label.toLowerCase(), 'get_directions')
                      window.trackConversionGoal('directions_request')
                    }
                  }}
                >
                  <span style={{ fontSize: '24px' }}>{item.icon}</span>
                  <span style={{ fontWeight: '600', flex: 1 }}>{item.label}</span>
                  <svg 
                    style={{ width: '20px', height: '20px', color: '#6b7280' }} 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              ))}
            </div>
          )}

          {/* 🎯 DOCK PRINCIPALE */}
          <div
            style={{
              backgroundColor: 'rgba(255, 255, 255, 0.98)',
              backdropFilter: 'blur(20px)',
              border: '1px solid rgba(229, 231, 235, 0.5)',
              borderRadius: '50px',
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
              padding: '16px 24px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-around'
            }}
          >
            {/* Menu Button */}
            <button
              onClick={() => toggleSubmenu('menu')}
              style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                gap: '4px',
                padding: '12px',
                borderRadius: '16px',
                border: 'none',
                backgroundColor: activeSubmenu === 'menu' 
                  ? 'linear-gradient(to bottom, #dcfce7, #bbf7d0)' 
                  : 'transparent',
                color: activeSubmenu === 'menu' ? '#059669' : '#6b7280',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                transform: activeSubmenu === 'menu' ? 'scale(1.1)' : 'scale(1)',
                boxShadow: activeSubmenu === 'menu' ? '0 4px 12px rgba(34, 197, 94, 0.3)' : 'none'
              }}
              onMouseEnter={(e) => {
                if (activeSubmenu !== 'menu') {
                  e.currentTarget.style.backgroundColor = '#f0fdf4'
                  e.currentTarget.style.color = '#059669'
                  e.currentTarget.style.transform = 'scale(1.05)'
                }
              }}
              onMouseLeave={(e) => {
                if (activeSubmenu !== 'menu') {
                  e.currentTarget.style.backgroundColor = 'transparent'
                  e.currentTarget.style.color = '#6b7280'
                  e.currentTarget.style.transform = 'scale(1)'
                }
              }}
            >
              <svg 
                style={{ 
                  width: '24px', 
                  height: '24px',
                  transform: activeSubmenu === 'menu' ? 'rotate(90deg)' : 'rotate(0deg)',
                  transition: 'transform 0.3s ease'
                }} 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
              <span style={{ fontSize: '12px', fontWeight: '600' }}>{t.menu}</span>
            </button>

            {/* Call Button */}
            <button
              onClick={() => toggleSubmenu('phone')}
              style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                gap: '4px',
                padding: '12px',
                borderRadius: '16px',
                border: 'none',
                backgroundColor: activeSubmenu === 'phone' 
                  ? 'linear-gradient(to bottom, #dcfce7, #bbf7d0)' 
                  : 'transparent',
                color: activeSubmenu === 'phone' ? '#059669' : '#6b7280',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                transform: activeSubmenu === 'phone' ? 'scale(1.1)' : 'scale(1)',
                boxShadow: activeSubmenu === 'phone' ? '0 4px 12px rgba(34, 197, 94, 0.3)' : 'none'
              }}
              onMouseEnter={(e) => {
                if (activeSubmenu !== 'phone') {
                  e.currentTarget.style.backgroundColor = '#f0fdf4'
                  e.currentTarget.style.color = '#059669'
                  e.currentTarget.style.transform = 'scale(1.05)'
                }
              }}
              onMouseLeave={(e) => {
                if (activeSubmenu !== 'phone') {
                  e.currentTarget.style.backgroundColor = 'transparent'
                  e.currentTarget.style.color = '#6b7280'
                  e.currentTarget.style.transform = 'scale(1)'
                }
              }}
            >
              <svg style={{ width: '24px', height: '24px' }} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
              <span style={{ fontSize: '12px', fontWeight: '600' }}>{t.call}</span>
            </button>

            {/* Maps Button */}
            <button
              onClick={() => toggleSubmenu('maps')}
              style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                gap: '4px',
                padding: '12px',
                borderRadius: '16px',
                border: 'none',
                backgroundColor: activeSubmenu === 'maps' 
                  ? 'linear-gradient(to bottom, #dbeafe, #bfdbfe)' 
                  : 'transparent',
                color: activeSubmenu === 'maps' ? '#2563eb' : '#6b7280',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                transform: activeSubmenu === 'maps' ? 'scale(1.1)' : 'scale(1)',
                boxShadow: activeSubmenu === 'maps' ? '0 4px 12px rgba(59, 130, 246, 0.3)' : 'none'
              }}
              onMouseEnter={(e) => {
                if (activeSubmenu !== 'maps') {
                  e.currentTarget.style.backgroundColor = '#eff6ff'
                  e.currentTarget.style.color = '#2563eb'
                  e.currentTarget.style.transform = 'scale(1.05)'
                }
              }}
              onMouseLeave={(e) => {
                if (activeSubmenu !== 'maps') {
                  e.currentTarget.style.backgroundColor = 'transparent'
                  e.currentTarget.style.color = '#6b7280'
                  e.currentTarget.style.transform = 'scale(1)'
                }
              }}
            >
              <svg style={{ width: '24px', height: '24px' }} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span style={{ fontSize: '12px', fontWeight: '600' }}>{t.maps}</span>
            </button>
          </div>

          {/* 📍 INDICATORE SEZIONE */}
          {currentSection !== 'hero' && !activeSubmenu && (
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              marginTop: '12px'
            }}>
              <div style={{
                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                backdropFilter: 'blur(8px)',
                borderRadius: '25px',
                padding: '8px 16px',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
              }}>
                <span style={{
                  color: 'white',
                  fontSize: '12px',
                  fontWeight: '600'
                }}>
                  {menuItems.find(item => item.id === currentSection)?.label || ''}
                </span>
              </div>
            </div>
          )}
        </div>
      )}
    </>
  )
}

export default MobileDock

--- FILE: src/components/layout/Navigation.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface NavigationProps {
  language: 'it' | 'de'
  onLanguageChange: (lang: 'it' | 'de') => void
}

const translations = {
  it: {
    menu: {
      home: 'Home',
      market: 'Al Banchetto',
      wholesale: 'Ingrosso',
      about: 'Chi Siamo',
      contact: 'Contatti'
    },
    cta: 'Richiedi Listino',
    phone: '+39 351 577 6198'
  },
  de: {
    menu: {
      home: 'Home',
      market: 'Marktstand',
      wholesale: 'Großhandel',
      about: 'Über uns',
      contact: 'Kontakt'
    },
    cta: 'Preisliste anfordern',
    phone: '+39 351 577 6198'
  }
}

const Navigation: React.FC<NavigationProps> = ({ language, onLanguageChange }) => {
  const [isScrolled, setIsScrolled] = useState(false)
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [activeSection, setActiveSection] = useState('hero')

  const t = translations[language]

  // Scroll detection ottimizzato
  useEffect(() => {
    let ticking = false
    
    const handleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          setIsScrolled(window.scrollY > 50)
          ticking = false
        })
        ticking = true
      }
    }

    // Intersection Observer per sezioni attive
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '-80px 0px -80px 0px'
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setActiveSection(entry.target.id)
        }
      })
    }, observerOptions)

    // Osserva tutte le sezioni
    const sections = ['hero', 'market', 'wholesale', 'about']
    sections.forEach(id => {
      const element = document.getElementById(id)
      if (element) observer.observe(element)
    })

    window.addEventListener('scroll', handleScroll, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', handleScroll)
      observer.disconnect()
    }
  }, [])

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
      setIsMobileMenuOpen(false)
    }
  }

  const menuItems = [
    { id: 'hero', label: t.menu.home, icon: '🏠' },
    { id: 'market', label: t.menu.market, icon: '🛒' },
    { id: 'wholesale', label: t.menu.wholesale, icon: '🏢' },
    { id: 'about', label: t.menu.about, icon: '🌱' }
  ]

  return (
    <>
      {/* Desktop Navigation */}
      <motion.nav
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
          isScrolled 
            ? 'bg-white/95 backdrop-blur-md shadow-lg border-b border-green-100' 
            : 'bg-transparent'
        }`}
      >
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-20">
            {/* Logo */}
            <motion.div
              onClick={() => scrollToSection('hero')}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center space-x-3 cursor-pointer"
            >
              <img
                src="/logo-bottamedi.png"
                alt="Bottamedi Logo"
                className="h-10 w-auto"
              />
              <div className={`font-bold text-xl transition-colors ${
                isScrolled ? 'text-green-600' : 'text-white'
              }`}>
                BOTTAMEDI
              </div>
            </motion.div>

            {/* Desktop Menu */}
            <div className="hidden lg:flex items-center space-x-8">
              {menuItems.map((item) => (
                <motion.button
                  key={item.id}
                  onClick={() => scrollToSection(item.id)}
                  whileHover={{ y: -2 }}
                  className={`relative px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                    activeSection === item.id
                      ? isScrolled 
                        ? 'text-green-600 bg-green-50' 
                        : 'text-white bg-white/20'
                      : isScrolled 
                        ? 'text-gray-700 hover:text-green-600 hover:bg-green-50' 
                        : 'text-white/80 hover:text-white hover:bg-white/10'
                  }`}
                >
                  {item.label}
                  {activeSection === item.id && (
                    <motion.div
                      layoutId="activeIndicator"
                      className={`absolute bottom-0 left-0 right-0 h-0.5 rounded-full ${
                        isScrolled ? 'bg-green-500' : 'bg-white'
                      }`}
                    />
                  )}
                </motion.button>
              ))}
            </div>

            {/* Language & CTA */}
            <div className="hidden lg:flex items-center space-x-4">
              {/* Language Switcher */}
              <div className="flex items-center bg-white/10 rounded-lg p-1">
                <button
                  onClick={() => onLanguageChange('it')}
                  className={`px-3 py-1 rounded text-sm font-medium transition-all ${
                    language === 'it' 
                      ? 'bg-white text-green-600' 
                      : isScrolled ? 'text-gray-600 hover:text-green-600' : 'text-white/70 hover:text-white'
                  }`}
                >
                  IT
                </button>
                <button
                  onClick={() => onLanguageChange('de')}
                  className={`px-3 py-1 rounded text-sm font-medium transition-all ${
                    language === 'de' 
                      ? 'bg-white text-green-600' 
                      : isScrolled ? 'text-gray-600 hover:text-green-600' : 'text-white/70 hover:text-white'
                  }`}
                >
                  DE
                </button>
              </div>

              {/* CTA Button */}
              <motion.button
                onClick={() => scrollToSection('wholesale')}
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
                className="bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-2 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300"
              >
                {t.cta}
              </motion.button>
            </div>

            {/* Mobile Menu Button */}
            <motion.button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              whileTap={{ scale: 0.95 }}
              className={`lg:hidden p-2 rounded-lg transition-colors ${
                isScrolled ? 'text-gray-700 hover:bg-gray-100' : 'text-white hover:bg-white/10'
              }`}
            >
              <div className="w-6 h-6 relative">
                <motion.span
                  animate={isMobileMenuOpen ? { rotate: 45, y: 8 } : { rotate: 0, y: 0 }}
                  className="absolute top-0 left-0 w-full h-0.5 bg-current rounded-full"
                />
                <motion.span
                  animate={isMobileMenuOpen ? { opacity: 0 } : { opacity: 1 }}
                  className="absolute top-2.5 left-0 w-full h-0.5 bg-current rounded-full"
                />
                <motion.span
                  animate={isMobileMenuOpen ? { rotate: -45, y: -8 } : { rotate: 0, y: 0 }}
                  className="absolute top-5 left-0 w-full h-0.5 bg-current rounded-full"
                />
              </div>
            </motion.button>
          </div>
        </div>
      </motion.nav>

      {/* Mobile Menu Overlay */}
      <AnimatePresence>
        {isMobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-40 lg:hidden"
          >
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setIsMobileMenuOpen(false)}
              className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            />

            {/* Menu Panel */}
            <motion.div
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: 'tween', duration: 0.3 }}
              className="absolute right-0 top-0 h-full w-80 max-w-sm bg-white shadow-2xl"
            >
              <div className="p-6">
                {/* Header */}
                <div className="flex items-center justify-between mb-8">
                  <div className="flex items-center space-x-3">
                    <img
                      src="/logo-bottamedi.png"
                      alt="Bottamedi Logo"
                      className="h-8 w-auto"
                    />
                    <span className="font-bold text-lg text-green-600">BOTTAMEDI</span>
                  </div>
                  <button
                    onClick={() => setIsMobileMenuOpen(false)}
                    className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg"
                  >
                    ✕
                  </button>
                </div>

                {/* Menu Items */}
                <div className="space-y-4 mb-8">
                  {menuItems.map((item, index) => (
                    <motion.button
                      key={item.id}
                      onClick={() => scrollToSection(item.id)}
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className={`w-full flex items-center space-x-4 p-4 rounded-2xl transition-all duration-300 ${
                        activeSection === item.id
                          ? 'bg-green-50 text-green-600 border-2 border-green-200'
                          : 'text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      <span className="text-2xl">{item.icon}</span>
                      <span className="font-medium text-lg">{item.label}</span>
                      {activeSection === item.id && (
                        <motion.div
                          layoutId="mobileActiveIndicator"
                          className="ml-auto w-2 h-2 bg-green-500 rounded-full"
                        />
                      )}
                    </motion.button>
                  ))}
                </div>

                {/* Language Switcher */}
                <div className="mb-6">
                  <p className="text-sm text-gray-500 mb-3">Lingua / Sprache</p>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => onLanguageChange('it')}
                      className={`flex-1 py-2 px-4 rounded-xl font-medium transition-all ${
                        language === 'it' 
                          ? 'bg-green-500 text-white' 
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      🇮🇹 Italiano
                    </button>
                    <button
                      onClick={() => onLanguageChange('de')}
                      className={`flex-1 py-2 px-4 rounded-xl font-medium transition-all ${
                        language === 'de' 
                          ? 'bg-green-500 text-white' 
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      🇩🇪 Deutsch
                    </button>
                  </div>
                </div>

                {/* CTA Button */}
                <motion.button
                  onClick={() => scrollToSection('wholesale')}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                  className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 px-6 rounded-2xl font-semibold text-lg shadow-lg"
                >
                  {t.cta}
                </motion.button>

                {/* Contact Info */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5 }}
                  className="mt-8 pt-6 border-t border-gray-200"
                >
                  <div className="space-y-3 text-sm text-gray-600">
                    <div className="flex items-center space-x-3">
                      <span>📞</span>
                      <a href={`tel:${t.phone}`} className="hover:text-green-600">
                        {t.phone}
                      </a>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span>📧</span>
                      <a href="mailto:bottamedipierluigi@virgilio.it" className="hover:text-green-600">
                        bottamedipierluigi@virgilio.it
                      </a>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span>📍</span>
                      <span>Via Cavalleggeri Udine, Mezzolombardo</span>
                    </div>
                  </div>
                </motion.div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Spacer for fixed navigation */}
      <div className="h-20" />
    </>
  )
}

export default Navigation

--- FILE: src/components/assets/icons/index.ts ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/assets/fonts/clash-display.woff2 ---
[File vuoto o solo spazi bianchi]

--- FILE: src/hooks/useIntersectionObserver.ts ---
import { useEffect, useRef, useState } from 'react'
import type { UseIntersectionObserverOptions, UseIntersectionObserverReturn } from '../types'

export const useIntersectionObserver = (
  options: UseIntersectionObserverOptions = {}
): UseIntersectionObserverReturn => {
  const {
    threshold = 0.1,
    root = null,
    rootMargin = '0px',
    triggerOnce = false
  } = options

  const [inView, setInView] = useState(false)
  const [entry, setEntry] = useState<IntersectionObserverEntry>()
  const ref = useRef<Element>(null)

  useEffect(() => {
    const element = ref.current
    if (!element) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        const isIntersecting = entry.isIntersecting
        
        setInView(isIntersecting)
        setEntry(entry)

        // If triggerOnce is true and element is in view, disconnect observer
        if (triggerOnce && isIntersecting) {
          observer.disconnect()
        }
      },
      {
        threshold,
        root,
        rootMargin
      }
    )

    observer.observe(element)

    return () => {
      observer.disconnect()
    }
  }, [threshold, root, rootMargin, triggerOnce])

  return { ref, inView, entry }
}

// Advanced hook with multiple thresholds
export const useIntersectionObserverAdvanced = (
  thresholds: number[] = [0, 0.25, 0.5, 0.75, 1],
  options: Omit<UseIntersectionObserverOptions, 'threshold'> = {}
) => {
  const { root = null, rootMargin = '0px', triggerOnce = false } = options
  
  const [intersectionRatio, setIntersectionRatio] = useState(0)
  const [isIntersecting, setIsIntersecting] = useState(false)
  const [entry, setEntry] = useState<IntersectionObserverEntry>()
  const ref = useRef<Element>(null)

  useEffect(() => {
    const element = ref.current
    if (!element) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        setIntersectionRatio(entry.intersectionRatio)
        setIsIntersecting(entry.isIntersecting)
        setEntry(entry)

        if (triggerOnce && entry.isIntersecting) {
          observer.disconnect()
        }
      },
      {
        threshold: thresholds,
        root,
        rootMargin
      }
    )

    observer.observe(element)

    return () => {
      observer.disconnect()
    }
  }, [thresholds, root, rootMargin, triggerOnce])

  return {
    ref,
    intersectionRatio,
    isIntersecting,
    entry,
    isPartiallyVisible: intersectionRatio > 0,
    isFullyVisible: intersectionRatio === 1
  }
}

// Hook for lazy loading images
export const useLazyImage = (src: string, placeholder?: string) => {
  const [imageSrc, setImageSrc] = useState(placeholder || '')
  const [isLoaded, setIsLoaded] = useState(false)
  const [isError, setIsError] = useState(false)
  const { ref, inView } = useIntersectionObserver({ triggerOnce: true })

  useEffect(() => {
    if (inView && src) {
      const img = new Image()
      
      img.onload = () => {
        setImageSrc(src)
        setIsLoaded(true)
      }
      
      img.onerror = () => {
        setIsError(true)
      }
      
      img.src = src
    }
  }, [inView, src])

  return {
    ref,
    src: imageSrc,
    isLoaded,
    isError,
    inView
  }
}

// Hook for animating elements on scroll
export const useScrollAnimation = (
  options: UseIntersectionObserverOptions & {
    animationClass?: string
    delay?: number
  } = {}
) => {
  const { animationClass = 'animate-in', delay = 0, ...observerOptions } = options
  const [hasAnimated, setHasAnimated] = useState(false)
  const { ref, inView } = useIntersectionObserver({
    ...observerOptions,
    triggerOnce: true
  })

  useEffect(() => {
    if (inView && !hasAnimated) {
      const timer = setTimeout(() => {
        setHasAnimated(true)
      }, delay)

      return () => clearTimeout(timer)
    }
  }, [inView, hasAnimated, delay])

  return {
    ref,
    shouldAnimate: hasAnimated,
    inView,
    animationClass: hasAnimated ? animationClass : ''
  }
}

// Hook for progressive loading content
export const useProgressiveContent = <T>(
  content: T[],
  options: UseIntersectionObserverOptions & {
    itemsPerLoad?: number
    loadDelay?: number
  } = {}
) => {
  const { itemsPerLoad = 5, loadDelay = 0, ...observerOptions } = options
  const [visibleItems, setVisibleItems] = useState<T[]>(content.slice(0, itemsPerLoad))
  const [isLoadingMore, setIsLoadingMore] = useState(false)
  const { ref, inView } = useIntersectionObserver(observerOptions)

  const hasMore = visibleItems.length < content.length

  useEffect(() => {
    if (inView && hasMore && !isLoadingMore) {
      setIsLoadingMore(true)
      
      const timer = setTimeout(() => {
        const nextItems = content.slice(
          visibleItems.length,
          visibleItems.length + itemsPerLoad
        )
        setVisibleItems(prev => [...prev, ...nextItems])
        setIsLoadingMore(false)
      }, loadDelay)

      return () => clearTimeout(timer)
    }
  }, [inView, hasMore, isLoadingMore, content, visibleItems.length, itemsPerLoad, loadDelay])

  return {
    ref,
    visibleItems,
    hasMore,
    isLoadingMore,
    loadedCount: visibleItems.length,
    totalCount: content.length
  }
}

// Hook for section navigation highlighting
export const useSectionObserver = (sectionIds: string[]) => {
  const [activeSection, setActiveSection] = useState<string>('')
  
  useEffect(() => {
    const observers = sectionIds.map(id => {
      const element = document.getElementById(id)
      if (!element) return null

      const observer = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            setActiveSection(id)
          }
        },
        {
          threshold: 0.3,
          rootMargin: '-20% 0px -70% 0px'
        }
      )

      observer.observe(element)
      return observer
    }).filter(Boolean)

    return () => {
      observers.forEach(observer => observer?.disconnect())
    }
  }, [sectionIds])

  return activeSection
}

// Hook for parallax effects
export const useParallax = (speed: number = 0.5) => {
  const [offset, setOffset] = useState(0)
  const { ref, inView } = useIntersectionObserver()

  useEffect(() => {
    if (!inView) return

    const handleScroll = () => {
      const element = ref.current
      if (!element) return

      const rect = element.getBoundingClientRect()
      const scrolled = window.pageYOffset
      const rate = scrolled * -speed
      
      setOffset(rate)
    }

    window.addEventListener('scroll', handleScroll, { passive: true })
    return () => window.removeEventListener('scroll', handleScroll)
  }, [inView, speed])

  return {
    ref,
    offset,
    style: {
      transform: `translateY(${offset}px)`
    }
  }
}

// Hook for counting animations
export const useCountUp = (
  endValue: number,
  options: {
    startValue?: number
    duration?: number
    easing?: 'linear' | 'easeOut' | 'easeInOut'
    formatNumber?: (value: number) => string
    triggerOnce?: boolean
  } = {}
) => {
  const {
    startValue = 0,
    duration = 2000,
    easing = 'easeOut',
    formatNumber = (v) => Math.round(v).toString(),
    triggerOnce = true
  } = options

  const [count, setCount] = useState(startValue)
  const { ref, inView } = useIntersectionObserver({ triggerOnce })

  useEffect(() => {
    if (!inView) return

    const startTime = Date.now()
    const difference = endValue - startValue

    const easingFunctions = {
      linear: (t: number) => t,
      easeOut: (t: number) => 1 - Math.pow(1 - t, 3),
      easeInOut: (t: number) => t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2
    }

    const animate = () => {
      const elapsed = Date.now() - startTime
      const progress = Math.min(elapsed / duration, 1)
      const easedProgress = easingFunctions[easing](progress)
      
      const currentValue = startValue + (difference * easedProgress)
      setCount(currentValue)

      if (progress < 1) {
        requestAnimationFrame(animate)
      }
    }

    animate()
  }, [inView, endValue, startValue, duration, easing])

  return {
    ref,
    count,
    formattedCount: formatNumber(count),
    isComplete: count === endValue
  }
}

export default useIntersectionObserver

--- FILE: src/hooks/useLocalStorage.ts ---
import { useState, useEffect, useCallback } from 'react'
import { handleError, safeJsonParse } from '../utils/helpers'

// Basic localStorage hook
export const useLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] => {
  // Get initial value from localStorage or use provided initial value
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      return item ? safeJsonParse(item, initialValue) : initialValue
    } catch (error) {
      handleError(error, `useLocalStorage get ${key}`)
      return initialValue
    }
  })

  // Return a wrapped version of useState's setter function that persists the new value to localStorage
  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      // Save state
      setStoredValue(valueToStore)
      
      // Save to localStorage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      handleError(error, `useLocalStorage set ${key}`)
    }
  }, [key, storedValue])

  // Remove item from localStorage
  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue]
}

// Advanced localStorage hook with expiration
export const useLocalStorageWithExpiry = <T>(
  key: string,
  initialValue: T,
  ttl: number = 86400000 // 24 hours in milliseconds
): [T, (value: T | ((val: T) => T)) => void, () => void, boolean] => {
  const [isExpired, setIsExpired] = useState(false)

  // Get initial value with expiry check
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      if (!item) return initialValue

      const data = safeJsonParse(item, null)
      if (!data || typeof data !== 'object' || !data.hasOwnProperty('value') || !data.hasOwnProperty('timestamp')) {
        return initialValue
      }

      const now = new Date().getTime()
      if (now - data.timestamp > ttl) {
        // Data expired, remove it
        window.localStorage.removeItem(key)
        setIsExpired(true)
        return initialValue
      }

      return data.value
    } catch (error) {
      handleError(error, `useLocalStorageWithExpiry get ${key}`)
      return initialValue
    }
  })

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      setStoredValue(valueToStore)
      setIsExpired(false)
      
      if (typeof window !== 'undefined') {
        const data = {
          value: valueToStore,
          timestamp: new Date().getTime()
        }
        window.localStorage.setItem(key, JSON.stringify(data))
      }
    } catch (error) {
      handleError(error, `useLocalStorageWithExpiry set ${key}`)
    }
  }, [key, storedValue])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      setIsExpired(false)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useLocalStorageWithExpiry remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue, isExpired]
}

// Hook for managing multiple localStorage items
export const useMultipleLocalStorage = <T extends Record<string, any>>(
  keys: (keyof T)[],
  initialValues: T
): [T, (key: keyof T, value: T[keyof T]) => void, (key: keyof T) => void, () => void] => {
  const [values, setValues] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValues
    }

    const result = { ...initialValues }
    keys.forEach(key => {
      try {
        const item = window.localStorage.getItem(String(key))
        if (item) {
          result[key] = safeJsonParse(item, initialValues[key])
        }
      } catch (error) {
        handleError(error, `useMultipleLocalStorage get ${String(key)}`)
      }
    })
    return result
  })

  const setValue = useCallback((key: keyof T, value: T[keyof T]) => {
    try {
      setValues(prev => ({ ...prev, [key]: value }))
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(String(key), JSON.stringify(value))
      }
    } catch (error) {
      handleError(error, `useMultipleLocalStorage set ${String(key)}`)
    }
  }, [])

  const removeValue = useCallback((key: keyof T) => {
    try {
      setValues(prev => ({ ...prev, [key]: initialValues[key] }))
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(String(key))
      }
    } catch (error) {
      handleError(error, `useMultipleLocalStorage remove ${String(key)}`)
    }
  }, [initialValues])

  const clearAll = useCallback(() => {
    try {
      setValues(initialValues)
      if (typeof window !== 'undefined') {
        keys.forEach(key => {
          window.localStorage.removeItem(String(key))
        })
      }
    } catch (error) {
      handleError(error, 'useMultipleLocalStorage clearAll')
    }
  }, [keys, initialValues])

  return [values, setValue, removeValue, clearAll]
}

// Hook for localStorage with validation
export const useValidatedLocalStorage = <T>(
  key: string,
  initialValue: T,
  validator: (value: any) => value is T
): [T, (value: T | ((val: T) => T)) => void, () => void, string | null] => {
  const [error, setError] = useState<string | null>(null)

  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      if (!item) return initialValue

      const parsed = safeJsonParse(item, null)
      if (validator(parsed)) {
        setError(null)
        return parsed
      } else {
        setError('Invalid data format in localStorage')
        return initialValue
      }
    } catch (error) {
      setError('Failed to parse localStorage data')
      handleError(error, `useValidatedLocalStorage get ${key}`)
      return initialValue
    }
  })

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      if (!validator(valueToStore)) {
        setError('Invalid value provided')
        return
      }

      setStoredValue(valueToStore)
      setError(null)
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      setError('Failed to save to localStorage')
      handleError(error, `useValidatedLocalStorage set ${key}`)
    }
  }, [key, storedValue, validator])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      setError(null)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      setError('Failed to remove from localStorage')
      handleError(error, `useValidatedLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue, error]
}

// Hook for localStorage with sync across tabs
export const useSyncedLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] => {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      return item ? safeJsonParse(item, initialValue) : initialValue
    } catch (error) {
      handleError(error, `useSyncedLocalStorage get ${key}`)
      return initialValue
    }
  })

  // Listen for storage events to sync across tabs
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === key && e.newValue !== null) {
        try {
          const newValue = safeJsonParse(e.newValue, initialValue)
          setStoredValue(newValue)
        } catch (error) {
          handleError(error, `useSyncedLocalStorage sync ${key}`)
        }
      }
    }

    window.addEventListener('storage', handleStorageChange)
    return () => window.removeEventListener('storage', handleStorageChange)
  }, [key, initialValue])

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      setStoredValue(valueToStore)
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      handleError(error, `useSyncedLocalStorage set ${key}`)
    }
  }, [key, storedValue])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useSyncedLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue]
}

// Hook for localStorage with compression (for large data)
export const useCompressedLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] => {
  const compress = (data: string): string => {
    // Simple compression - in production you might want to use a proper compression library
    return btoa(data)
  }

  const decompress = (data: string): string => {
    try {
      return atob(data)
    } catch {
      return data // Return original if decompression fails
    }
  }

  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      if (!item) return initialValue

      const decompressed = decompress(item)
      return safeJsonParse(decompressed, initialValue)
    } catch (error) {
      handleError(error, `useCompressedLocalStorage get ${key}`)
      return initialValue
    }
  })

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      setStoredValue(valueToStore)
      
      if (typeof window !== 'undefined') {
        const compressed = compress(JSON.stringify(valueToStore))
        window.localStorage.setItem(key, compressed)
      }
    } catch (error) {
      handleError(error, `useCompressedLocalStorage set ${key}`)
    }
  }, [key, storedValue])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useCompressedLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue]
}

export default useLocalStorage

--- FILE: src/hooks/useScrollDirection.ts ---
import { useState, useEffect, useCallback, useRef } from 'react'
import { throttle } from '../utils/helpers'

export type ScrollDirection = 'up' | 'down' | null

interface UseScrollDirectionOptions {
  threshold?: number
  throttleDelay?: number
}

interface ScrollInfo {
  scrollY: number
  direction: ScrollDirection
  isScrolling: boolean
  scrollPercentage: number
  velocity: number
}

// Basic scroll direction detection
export const useScrollDirection = (options: UseScrollDirectionOptions = {}): ScrollDirection => {
  const { threshold = 10, throttleDelay = 100 } = options
  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>(null)
  const lastScrollY = useRef(0)
  const ticking = useRef(false)

  const updateScrollDirection = useCallback(() => {
    const scrollY = window.pageYOffset || document.documentElement.scrollTop
    
    if (Math.abs(scrollY - lastScrollY.current) < threshold) {
      ticking.current = false
      return
    }

    setScrollDirection(scrollY > lastScrollY.current ? 'down' : 'up')
    lastScrollY.current = scrollY > 0 ? scrollY : 0
    ticking.current = false
  }, [threshold])

  const onScroll = useCallback(
    throttle(() => {
      if (!ticking.current) {
        requestAnimationFrame(updateScrollDirection)
        ticking.current = true
      }
    }, throttleDelay),
    [updateScrollDirection, throttleDelay]
  )

  useEffect(() => {
    lastScrollY.current = window.pageYOffset || document.documentElement.scrollTop

    window.addEventListener('scroll', onScroll, { passive: true })
    return () => window.removeEventListener('scroll', onScroll)
  }, [onScroll])

  return scrollDirection
}

// Advanced scroll information hook
export const useScrollInfo = (options: UseScrollDirectionOptions = {}): ScrollInfo => {
  const { threshold = 10, throttleDelay = 100 } = options
  const [scrollInfo, setScrollInfo] = useState<ScrollInfo>({
    scrollY: 0,
    direction: null,
    isScrolling: false,
    scrollPercentage: 0,
    velocity: 0
  })

  const lastScrollY = useRef(0)
  const lastTimestamp = useRef(Date.now())
  const scrollTimeout = useRef<NodeJS.Timeout>()
  const ticking = useRef(false)

  const updateScrollInfo = useCallback(() => {
    const scrollY = window.pageYOffset || document.documentElement.scrollTop
    const now = Date.now()
    const deltaY = scrollY - lastScrollY.current
    const deltaTime = now - lastTimestamp.current
    
    // Calculate scroll percentage
    const scrollHeight = document.documentElement.scrollHeight - window.innerHeight
    const scrollPercentage = scrollHeight > 0 ? (scrollY / scrollHeight) * 100 : 0
    
    // Calculate velocity (pixels per millisecond)
    const velocity = deltaTime > 0 ? Math.abs(deltaY) / deltaTime : 0

    // Determine direction
    let direction: ScrollDirection = null
    if (Math.abs(deltaY) >= threshold) {
      direction = deltaY > 0 ? 'down' : 'up'
    }

    setScrollInfo({
      scrollY,
      direction,
      isScrolling: true,
      scrollPercentage: Math.min(100, Math.max(0, scrollPercentage)),
      velocity
    })

    // Clear existing timeout
    if (scrollTimeout.current) {
      clearTimeout(scrollTimeout.current)
    }

    // Set isScrolling to false after scrolling stops
    scrollTimeout.current = setTimeout(() => {
      setScrollInfo(prev => ({ ...prev, isScrolling: false }))
    }, 150)

    lastScrollY.current = scrollY > 0 ? scrollY : 0
    lastTimestamp.current = now
    ticking.current = false
  }, [threshold])

  const onScroll = useCallback(
    throttle(() => {
      if (!ticking.current) {
        requestAnimationFrame(updateScrollInfo)
        ticking.current = true
      }
    }, throttleDelay),
    [updateScrollInfo, throttleDelay]
  )

  useEffect(() => {
    lastScrollY.current = window.pageYOffset || document.documentElement.scrollTop
    lastTimestamp.current = Date.now()

    window.addEventListener('scroll', onScroll, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', onScroll)
      if (scrollTimeout.current) {
        clearTimeout(scrollTimeout.current)
      }
    }
  }, [onScroll])

  return scrollInfo
}

// Hook for detecting scroll boundaries
export const useScrollBoundaries = (options: { offset?: number } = {}) => {
  const { offset = 100 } = options
  const [boundaries, setBoundaries] = useState({
    isAtTop: true,
    isAtBottom: false,
    isNearTop: true,
    isNearBottom: false
  })

  const updateBoundaries = useCallback(() => {
    const scrollY = window.pageYOffset || document.documentElement.scrollTop
    const windowHeight = window.innerHeight
    const documentHeight = document.documentElement.scrollHeight

    const isAtTop = scrollY <= 0
    const isAtBottom = scrollY + windowHeight >= documentHeight - 1
    const isNearTop = scrollY <= offset
    const isNearBottom = scrollY + windowHeight >= documentHeight - offset

    setBoundaries({
      isAtTop,
      isAtBottom,
      isNearTop,
      isNearBottom
    })
  }, [offset])

  const onScroll = useCallback(
    throttle(updateBoundaries, 100),
    [updateBoundaries]
  )

  useEffect(() => {
    updateBoundaries() // Initial check
    window.addEventListener('scroll', onScroll, { passive: true })
    window.addEventListener('resize', updateBoundaries, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', onScroll)
      window.removeEventListener('resize', updateBoundaries)
    }
  }, [onScroll, updateBoundaries])

  return boundaries
}

// Hook for scroll-based header visibility
export const useScrollHeader = (options: {
  hideOnScrollDown?: boolean
  showOnScrollUp?: boolean
  threshold?: number
  offset?: number
} = {}) => {
  const {
    hideOnScrollDown = true,
    showOnScrollUp = true,
    threshold = 10,
    offset = 100
  } = options

  const [isVisible, setIsVisible] = useState(true)
  const [isTransparent, setIsTransparent] = useState(true)
  const direction = useScrollDirection({ threshold })
  const { isNearTop, scrollY } = useScrollInfo()

  useEffect(() => {
    setIsTransparent(isNearTop)
    
    if (scrollY < offset) {
      setIsVisible(true)
      return
    }

    if (hideOnScrollDown && direction === 'down') {
      setIsVisible(false)
    } else if (showOnScrollUp && direction === 'up') {
      setIsVisible(true)
    }
  }, [direction, isNearTop, scrollY, offset, hideOnScrollDown, showOnScrollUp])

  return {
    isVisible,
    isTransparent,
    direction,
    scrollY
  }
}

// Hook for element reveal on scroll
export const useScrollReveal = (elements: string[], options: {
  threshold?: number
  rootMargin?: string
} = {}) => {
  const { threshold = 0.1, rootMargin = '0px' } = options
  const [revealedElements, setRevealedElements] = useState<Set<string>>(new Set())

  useEffect(() => {
    const observers = new Map<string, IntersectionObserver>()

    elements.forEach(elementId => {
      const element = document.getElementById(elementId)
      if (!element) return

      const observer = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            setRevealedElements(prev => new Set([...prev, elementId]))
            observer.disconnect() // One-time reveal
          }
        },
        { threshold, rootMargin }
      )

      observer.observe(element)
      observers.set(elementId, observer)
    })

    return () => {
      observers.forEach(observer => observer.disconnect())
    }
  }, [elements, threshold, rootMargin])

  return {
    revealedElements,
    isRevealed: (elementId: string) => revealedElements.has(elementId)
  }
}

// Hook for scroll-triggered animations
export const useScrollTrigger = (
  trigger: 'scrollDown' | 'scrollUp' | 'reachBottom' | 'reachTop' | 'custom',
  callback: () => void,
  options: {
    threshold?: number
    offset?: number
    once?: boolean
    customCondition?: (scrollInfo: ScrollInfo) => boolean
  } = {}
) => {
  const { threshold = 10, offset = 100, once = false, customCondition } = options
  const scrollInfo = useScrollInfo({ threshold })
  const hasTriggered = useRef(false)

  useEffect(() => {
    if (once && hasTriggered.current) return

    let shouldTrigger = false

    switch (trigger) {
      case 'scrollDown':
        shouldTrigger = scrollInfo.direction === 'down' && scrollInfo.scrollY > offset
        break
      case 'scrollUp':
        shouldTrigger = scrollInfo.direction === 'up' && scrollInfo.scrollY > offset
        break
      case 'reachBottom':
        shouldTrigger = scrollInfo.scrollPercentage >= 95
        break
      case 'reachTop':
        shouldTrigger = scrollInfo.scrollY <= offset
        break
      case 'custom':
        shouldTrigger = customCondition ? customCondition(scrollInfo) : false
        break
    }

    if (shouldTrigger) {
      callback()
      if (once) {
        hasTriggered.current = true
      }
    }
  }, [scrollInfo, trigger, callback, offset, once, customCondition])

  return scrollInfo
}

// Hook for smooth scrolling to elements
export const useSmoothScroll = () => {
  const scrollToElement = useCallback((
    elementId: string,
    options: {
      offset?: number
      behavior?: ScrollBehavior
      block?: ScrollLogicalPosition
    } = {}
  ) => {
    const { offset = 0, behavior = 'smooth', block = 'start' } = options
    const element = document.getElementById(elementId)
    
    if (element) {
      const elementPosition = element.getBoundingClientRect().top + window.pageYOffset
      const offsetPosition = elementPosition - offset

      window.scrollTo({
        top: offsetPosition,
        behavior
      })
    }
  }, [])

  const scrollToTop = useCallback((behavior: ScrollBehavior = 'smooth') => {
    window.scrollTo({
      top: 0,
      behavior
    })
  }, [])

  const scrollToBottom = useCallback((behavior: ScrollBehavior = 'smooth') => {
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior
    })
  }, [])

  const scrollBy = useCallback((
    amount: number,
    behavior: ScrollBehavior = 'smooth'
  ) => {
    window.scrollBy({
      top: amount,
      behavior
    })
  }, [])

  return {
    scrollToElement,
    scrollToTop,
    scrollToBottom,
    scrollBy
  }
}

// Hook for reading progress indicator
export const useReadingProgress = (contentSelector?: string) => {
  const [progress, setProgress] = useState(0)

  useEffect(() => {
    const calculateProgress = () => {
      let scrollHeight: number
      let scrollTop: number
      let clientHeight: number

      if (contentSelector) {
        const element = document.querySelector(contentSelector)
        if (element) {
          const rect = element.getBoundingClientRect()
          const elementTop = window.pageYOffset + rect.top
          const elementHeight = element.scrollHeight
          scrollTop = window.pageYOffset - elementTop
          scrollHeight = elementHeight - window.innerHeight
          clientHeight = window.innerHeight
        } else {
          return
        }
      } else {
        scrollTop = document.documentElement.scrollTop || document.body.scrollTop
        scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight
        clientHeight = document.documentElement.clientHeight
      }

      if (scrollHeight <= 0) {
        setProgress(0)
        return
      }

      const progress = Math.min(100, Math.max(0, (scrollTop / scrollHeight) * 100))
      setProgress(progress)
    }

    const onScroll = throttle(calculateProgress, 50)
    
    calculateProgress() // Initial calculation
    window.addEventListener('scroll', onScroll, { passive: true })
    window.addEventListener('resize', calculateProgress, { passive: true })

    return () => {
      window.removeEventListener('scroll', onScroll)
      window.removeEventListener('resize', calculateProgress)
    }
  }, [contentSelector])

  return progress
}

// Hook for scroll-based parallax effects
export const useScrollParallax = (speed: number = 0.5, elementRef?: React.RefObject<HTMLElement>) => {
  const [offset, setOffset] = useState(0)
  const [isInView, setIsInView] = useState(false)

  useEffect(() => {
    const element = elementRef?.current
    
    const handleScroll = () => {
      if (element) {
        const rect = element.getBoundingClientRect()
        const isVisible = rect.bottom >= 0 && rect.top <= window.innerHeight
        setIsInView(isVisible)
        
        if (isVisible) {
          const scrolled = window.pageYOffset
          const rate = scrolled * -speed
          setOffset(rate)
        }
      } else {
        const scrolled = window.pageYOffset
        const rate = scrolled * -speed
        setOffset(rate)
        setIsInView(true)
      }
    }

    const onScroll = throttle(handleScroll, 16) // ~60fps
    
    handleScroll() // Initial calculation
    window.addEventListener('scroll', onScroll, { passive: true })

    return () => {
      window.removeEventListener('scroll', onScroll)
    }
  }, [speed, elementRef])

  return {
    offset,
    isInView,
    style: {
      transform: `translateY(${offset}px)`,
      willChange: 'transform'
    }
  }
}

export default useScrollDirection