STRUTTURA DEL PROGETTO:
=======================
sito web opus 4/
|-- .gitignore
|-- index.html
|-- netlify.toml
|-- package.json
|-- postcss.config.js
|-- tailwind.config.ts
|-- tsconfig.json
|-- tsconfig.node.json
|-- vite.config.ts
|-- public/
    |-- favicon.webp
    |-- logo-bottamedi.webp
    |-- manifest.json
    |-- robot.txt
    |-- sitemap-data.xml
    |-- sitemap-images.xml
    |-- sitemap.xml
    |-- images/
        |-- albicocche_ingrosso_magazzino.webp
        |-- angurie.webp
        |-- arance_felici.webp
        |-- banchetto.webp
        |-- banco_frigo_disidratata_specialita.webp
        |-- banco_varieta_autunno.webp
        |-- bottamedi_ananas_fruitpoint_freschi.webp
        |-- bottamedi_dettaglio_frutta_disidratata_vaschette.webp
        |-- bottamedi_mele_melinda_montagna_cassetta.webp
        |-- bottamedi_mele_pink_lady_confezione.webp
        |-- bottamedi_sacchetti_frutta_disidratata_mista.webp
        |-- kiwi-cuore.webp
        |-- kiwi-gialli-bg.webp
        |-- mappa-banchetto-bottamedi.webp
        |-- mappa-ingrosso-bottamedi.webp
        |-- melinda_golden.webp
        |-- meloni_sattin_dettaglio.webp
        |-- pomodori_cuore_bue.webp
        |-- poster.webp
        |-- zucche_decorate_banco.webp
    |-- videos/
        |-- hero-video-verdure-rotanti.mp4
|-- src/
    |-- app.tsx
    |-- index.css
    |-- main.tsx
    |-- utils/
        |-- animations.ts
        |-- constants.ts
        |-- haptics.ts
        |-- helpers.ts
    |-- components/
        |-- ui/
            |-- Button.tsx
            |-- Card.tsx
            |-- Loading.tsx
            |-- Modal.tsx
            |-- OptimizedImage.tsx
            |-- Particles.tsx
        |-- 3d/
            |-- FloatingFruits.tsx
            |-- HeroScene.tsx
            |-- ParticleSystem.tsx
        |-- sections/
            |-- AboutSection.tsx
            |-- Banchettosection.tsx
            |-- ContactSection.tsx
            |-- HeroSection.tsx
            |-- ProductsSection.tsx
            |-- ServicesSection.tsx
            |-- Wholesalecontact.tsx
        |-- types/
            |-- index.ts
        |-- layout/
            |-- Footer.tsx
            |-- Header.tsx
            |-- MobileDock.tsx
            |-- Navigation.tsx
        |-- navigation/
            |-- BreadcrumbNavigation.tsx
        |-- legal/
            |-- CookieBanner.tsx
            |-- LegalDocuments.tsx
            |-- PrivacySettings.tsx
            |-- index.ts
        |-- assets/
            |-- icons/
                |-- index.ts
            |-- fonts/
                |-- clash-display.woff2
    |-- hooks/
        |-- useIntersectionObserver.ts
        |-- useLocalStorage.ts
        |-- useScrollDirection.ts


CONTENUTO DEI FILE:
===================


--- FILE: .gitignore ---
[File vuoto o solo spazi bianchi]

--- FILE: index.html ---
<!DOCTYPE html>
<html lang="it" class="scroll-smooth">
<head>
  <!-- Google Analytics 4 (GA4) - Tracking Avanzato Italiano -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-ZYL9HZJKCE"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    // Configurazione avanzata GA4
    gtag('config', 'G-ZYL9HZJKCE', {
      page_title: 'Bottamedi Frutta e Verdura Mezzolombardo',
      page_location: window.location.href,
      content_group1: 'Ortofrutta Trentino',
      content_group2: 'HORECA Services',
      content_group3: 'Banchetto Dettaglio',
      content_group4: 'Prodotti Locali',
      content_group5: 'Servizi Commerciali',
      custom_map: {
        'custom_parameter_1': 'trentino_alto_adige',
        'custom_parameter_2': 'mezzolombardo',
        'custom_parameter_3': 'tipo_cliente',
        'custom_parameter_4': 'area_interesse',
        'custom_parameter_5': 'fonte_traffico'
      },
      send_page_view: true,
      enhanced_measurement: {
        scrolls: true,
        outbound_clicks: true,
        site_search: true,
        video_engagement: true,
        file_downloads: true
      }
    });

    // Configurazione cookie consent
    gtag('consent', 'default', {
      analytics_storage: 'denied',
      ad_storage: 'denied',
      functionality_storage: 'granted',
      personalization_storage: 'denied',
      security_storage: 'granted'
    });

    // EVENTI PERSONALIZZATI IN ITALIANO per Analytics
    
    // 1. NAVIGAZIONE E COMPORTAMENTO UTENTE
    window.trackNavigazione = function(sezione, azione, dettaglio) {
      gtag('event', 'navigazione_sito', {
        event_category: 'Comportamento Utente',
        event_label: sezione + ' - ' + azione,
        custom_parameter_1: sezione,
        custom_parameter_2: azione,
        custom_parameter_3: dettaglio || 'generico',
        value: 1
      });
    };

    window.trackTempoSezione = function(sezione, secondi) {
      gtag('event', 'tempo_in_sezione', {
        event_category: 'Engagement',
        event_label: sezione,
        custom_parameter_1: sezione,
        custom_parameter_2: secondi > 30 ? 'alta_attenzione' : 'bassa_attenzione',
        value: secondi
      });
    };

    // 2. INTERESSE PRODOTTI E SERVIZI
    window.trackInteresseProdotti = function(categoria, prodotto, azione) {
      gtag('event', 'interesse_prodotti', {
        event_category: 'Prodotti e Servizi',
        event_label: categoria + ' - ' + prodotto,
        custom_parameter_1: categoria,
        custom_parameter_2: prodotto,
        custom_parameter_3: azione,
        value: 5
      });
    };

    window.trackServizioHoreca = function(azione, dettaglio) {
      gtag('event', 'servizio_horeca', {
        event_category: 'HORECA Business',
        event_label: azione,
        custom_parameter_1: 'horeca',
        custom_parameter_2: azione,
        custom_parameter_3: dettaglio,
        value: 10
      });
    };

    // 3. AZIONI DI CONTATTO E CONVERSIONI
    window.trackAzioneContatto = function(tipoContatto, fonte, destinazione) {
      gtag('event', 'azione_contatto', {
        event_category: 'Conversioni',
        event_label: tipoContatto + ' - ' + destinazione,
        custom_parameter_1: tipoContatto,
        custom_parameter_2: fonte,
        custom_parameter_3: destinazione,
        value: 20
      });
    };

    window.trackRichiestaInformazioni = function(tipo, argomento, modalita) {
      gtag('event', 'richiesta_informazioni', {
        event_category: 'Lead Generation',
        event_label: tipo + ' - ' + argomento,
        custom_parameter_1: tipo,
        custom_parameter_2: argomento,
        custom_parameter_3: modalita,
        value: 25
      });
    };

    // 4. INTERAZIONI MOBILE E UX
    window.trackMobileDock = function(azione, elemento, sezioneAttuale) {
      gtag('event', 'dock_mobile', {
        event_category: 'Mobile UX',
        event_label: azione + ' - ' + elemento,
        custom_parameter_1: 'mobile',
        custom_parameter_2: elemento,
        custom_parameter_3: sezioneAttuale,
        value: 3
      });
    };

    window.trackComportamentoMobile = function(azione, contesto) {
      gtag('event', 'comportamento_mobile', {
        event_category: 'Mobile Behavior',
        event_label: azione,
        custom_parameter_1: 'mobile',
        custom_parameter_2: azione,
        custom_parameter_3: contesto,
        value: 1
      });
    };

    // 5. LOCALIZZAZIONE E RICERCHE
    window.trackLocalizzazione = function(azione, luogo, risultato) {
      gtag('event', 'localizzazione', {
        event_category: 'Geografia e Posizione',
        event_label: azione + ' - ' + luogo,
        custom_parameter_1: luogo,
        custom_parameter_2: azione,
        custom_parameter_3: risultato,
        value: 15
      });
    };

    window.trackCercaInformazioni = function(termine, sezione, trovato) {
      gtag('event', 'ricerca_informazioni', {
        event_category: 'Ricerca e Scoperta',
        event_label: termine,
        custom_parameter_1: termine,
        custom_parameter_2: sezione,
        custom_parameter_3: trovato ? 'informazione_trovata' : 'informazione_non_trovata',
        value: 2
      });
    };

    // 6. QUALITÀ E TRADIZIONE
    window.trackStoriaTradizione = function(elemento, interesse) {
      gtag('event', 'storia_tradizione', {
        event_category: 'Brand e Valori',
        event_label: elemento,
        custom_parameter_1: 'tradizione',
        custom_parameter_2: elemento,
        custom_parameter_3: interesse,
        value: 8
      });
    };

    window.trackQualitaProdotti = function(aspetto, valutazione) {
      gtag('event', 'qualita_prodotti', {
        event_category: 'Percezione Qualità',
        event_label: aspetto,
        custom_parameter_1: 'qualita',
        custom_parameter_2: aspetto,
        custom_parameter_3: valutazione,
        value: 6
      });
    };

    // 7. BUSINESS INTELLIGENCE
    window.trackComportamentoCliente = function(tipoCliente, comportamento, valore) {
      gtag('event', 'profilo_cliente', {
        event_category: 'Business Intelligence',
        event_label: tipoCliente + ' - ' + comportamento,
        custom_parameter_1: tipoCliente,
        custom_parameter_2: comportamento,
        custom_parameter_3: 'analisi_comportamento',
        value: valore || 1
      });
    };

    window.trackOpportunitaCommerciale = function(tipo, priorita, dettaglio) {
      gtag('event', 'opportunita_commerciale', {
        event_category: 'Opportunità Business',
        event_label: tipo + ' - Priorità ' + priorita,
        custom_parameter_1: tipo,
        custom_parameter_2: priorita,
        custom_parameter_3: dettaglio,
        value: priorita === 'alta' ? 30 : (priorita === 'media' ? 15 : 5)
      });
    };

    // 8. EVENTI STAGIONALI E TEMPORALI
    window.trackInteresseStagionale = function(stagione, prodotto, domanda) {
      gtag('event', 'interesse_stagionale', {
        event_category: 'Andamenti Stagionali',
        event_label: stagione + ' - ' + prodotto,
        custom_parameter_1: stagione,
        custom_parameter_2: prodotto,
        custom_parameter_3: domanda,
        value: 4
      });
    };

    // 9. PERFORMANCE E TECNICO
    window.trackPerformanceSito = function(metrica, valore, soglia) {
      gtag('event', 'performance_sito', {
        event_category: 'Performance Tecnica',
        event_label: metrica,
        custom_parameter_1: metrica,
        custom_parameter_2: valore > soglia ? 'lento' : 'veloce',
        custom_parameter_3: 'user_experience',
        value: Math.round(valore)
      });
    };

    // FUNZIONI DI UTILITÀ
    window.trackErroreUX = function(errore, contesto, impatto) {
      gtag('event', 'errore_ux', {
        event_category: 'Problemi UX',
        event_label: errore,
        custom_parameter_1: errore,
        custom_parameter_2: contesto,
        custom_parameter_3: impatto,
        value: impatto === 'alto' ? 10 : (impatto === 'medio' ? 5 : 1)
      });
    };
  </script>

  <!-- Google Tag Manager (opzionale) -->
  <script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-XXXXXXX');
  </script>

  <meta charset="UTF-8" />
  <link rel="icon" type="image/webp" href="/favicon.webp" />
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.webp" />
  <link rel="icon" type="image/webp" sizes="32x32" href="/favicon-32x32.webp" />
  <link rel="icon" type="image/webp" sizes="16x16" href="/favicon-16x16.webp" />
  
  <!-- VIEWPORT OTTIMIZZATO - ACCESSIBILITÀ MIGLIORATA -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, maximum-scale=5.0" />
  
  <!-- DNS Prefetch per performance -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="dns-prefetch" href="//www.google-analytics.com">
  <link rel="dns-prefetch" href="//www.googletagmanager.com">
  <link rel="dns-prefetch" href="//maps.googleapis.com">
  <link rel="dns-prefetch" href="//maps.app.goo.gl">
  <link rel="dns-prefetch" href="//wa.me">
  
  <!-- Titolo SEO ottimizzato -->
  <title>🍎 Bottamedi Frutta e Verdura Mezzolombardo | Ingrosso HORECA e Dettaglio | 50 anni di Qualità Trentino Alto Adige</title>
  
  <!-- Meta Description ottimizzata -->
  <meta name="description" content="🍎 Bottamedi: 50 anni di tradizione familiare nella vendita di frutta e verdura fresca a Mezzolombardo. Banchetto dettaglio e servizio ingrosso HORECA per ristoranti nel Trentino Alto Adige. Qualità garantita dal 1974." />
  
  <!-- Keywords SEO ottimizzate -->
  <meta name="keywords" content="frutta verdura Mezzolombardo, ingrosso ortofrutta Trentino, banchetto frutta fresca, HORECA ristoranti Trento, fornitore verdure hotel, mele Melinda DOP, prodotti tipici trentini, ortofrutta Val di Non, Bottamedi famiglia, frutta stagione biologica, verdure fresche km zero, consegna ristoranti pizzerie, Via Cavalleggeri Udine, Via de Gasperi, ingrosso alimentari, dettaglio ortofrutta, qualità superiore, tradizione familiare, Pierluigi Bottamedi, distribuzione frutta, commercio verdure, mercato ortofrutticolo" />
  
  <!-- Geo Tags -->
  <meta name="geo.region" content="IT-TN" />
  <meta name="geo.placename" content="Mezzolombardo, Trentino Alto Adige" />
  <meta name="geo.position" content="46.2137;11.0978" />
  <meta name="ICBM" content="46.2137, 11.0978" />
  
  <!-- Robots e Indexing -->
  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
  <meta name="googlebot" content="index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1" />
  <meta name="bingbot" content="index, follow" />
  
  <!-- HTTP Headers -->
  <meta http-equiv="x-dns-prefetch-control" content="on">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  
  <!-- Preload Critical Resources -->
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <link rel="preload" href="/videos/hero-video-verdure-rotanti.mp4" as="video" type="video/mp4">
  <link rel="preload" href="/images/poster.webp" as="image" type="image/webp">
  <link rel="preload" href="/logo-bottamedi.webp" as="image" type="image/webp">
  <link rel="preload" href="/images/banchetto.webp" as="image" type="image/webp">
  
  <!-- Fallback Fonts -->
  <noscript>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
  </noscript>
  
  <!-- Open Graph Meta Tags -->
  <meta property="og:type" content="website" />
  <meta property="og:site_name" content="Bottamedi Frutta e Verdura" />
  <meta property="og:title" content="🍎 Bottamedi: Frutta e Verdura Fresca Mezzolombardo dal 1974 | Trentino Alto Adige" />
  <meta property="og:description" content="🍎 50 anni di tradizione familiare nella vendita di frutta e verdura fresca. Banchetto dettaglio e servizio ingrosso HORECA per ristoranti. Qualità garantita nel cuore del Trentino." />
  <meta property="og:image" content="https://www.bottamedi.eu/images/banchetto.webp" />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta property="og:image:alt" content="Banchetto Bottamedi con varietà di frutta e verdura fresca a Mezzolombardo, Trentino Alto Adige" />
  <meta property="og:url" content="https://www.bottamedi.eu" />
  <meta property="og:locale" content="it_IT" />
  <meta property="og:locale:alternate" content="de_IT" />
  
  <!-- Twitter Card Meta Tags -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:site" content="@bottamedi" />
  <meta name="twitter:title" content="🍎 Bottamedi Frutta e Verdura Mezzolombardo | Dal 1974" />
  <meta name="twitter:description" content="🍎 50 anni di tradizione familiare. Frutta e verdura fresca, ingrosso HORECA e banchetto dettaglio nel Trentino Alto Adige. Qualità garantita." />
  <meta name="twitter:image" content="https://www.bottamedi.eu/images/banchetto.webp" />
  <meta name="twitter:image:alt" content="Banchetto Bottamedi con frutta e verdura fresca" />
  
  <!-- Canonical URL -->
  <link rel="canonical" href="https://www.bottamedi.eu" />
  
  <!-- Hreflang per multilingua -->
  <link rel="alternate" hreflang="it" href="https://www.bottamedi.eu" />
  <link rel="alternate" hreflang="de" href="https://www.bottamedi.eu/de" />
  <link rel="alternate" hreflang="x-default" href="https://www.bottamedi.eu" />
  
  <!-- PWA Manifest -->
  <link rel="manifest" href="/manifest.json" />
  
  <!-- Critical CSS Inline MINIMO -->
  <style>
    * { 
      box-sizing: border-box; 
      margin: 0; 
      padding: 0;
    }
    
    html { 
      scroll-behavior: smooth; 
      -webkit-text-size-adjust: 100%;
    }
    
    body { 
      font-family: 'Inter', system-ui, sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      background: #ffffff;
      color: #171717;
      overflow-x: hidden;
    }
    
    .loading-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 50%, #bbf7d0 100%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      transition: opacity 0.4s ease-out, visibility 0.4s ease-out;
    }
    
    .loading-logo {
      width: 120px;
      height: auto;
      margin-bottom: 20px;
      animation: logoFloat 2.5s ease-in-out infinite;
    }
    
    .loading-text {
      color: #22c55e;
      font-size: 20px;
      font-weight: 700;
      margin-bottom: 20px;
      animation: textPulse 2s ease-in-out infinite;
      letter-spacing: 2px;
    }
    
    .loading-subtext {
      color: #16a34a;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 20px;
      opacity: 0.8;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(34, 197, 94, 0.2);
      border-top: 3px solid #22c55e;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes logoFloat {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-12px); }
    }
    
    @keyframes textPulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.7; }
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loaded .loading-screen {
      opacity: 0;
      visibility: hidden;
      pointer-events: none;
    }
    
    /* Focus accessibilità */
    :focus-visible {
      outline: 3px solid #2563eb !important;
      outline-offset: 2px;
    }
    
    /* Riduzione animazioni se preferito */
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
      
      .loading-logo, .loading-text {
        animation: none;
      }
    }
  </style>
  
  <!-- PWA Meta Tags - Status bar dinamica -->
  <meta name="theme-color" content="#22c55e" id="theme-color-meta" />
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  <meta name="apple-mobile-web-app-title" content="Bottamedi" />
  <meta name="application-name" content="Bottamedi" />
  <meta name="msapplication-TileColor" content="#22c55e" />
</head>
<body>
  <!-- Google Tag Manager (noscript) -->
  <noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX"
    height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript>

  <!-- Loading Screen -->
  <div class="loading-screen" id="loading-screen">
    <img 
      src="/logo-bottamedi.webp" 
      alt="Bottamedi Logo - Frutta e Verdura Mezzolombardo dal 1974" 
      class="loading-logo"
      width="120"
      height="120"
      onerror="this.style.display='none'; document.querySelector('.loading-fallback').style.display='block';"
    />
    
    <!-- Fallback per logo non caricato -->
    <div class="loading-fallback" style="display: none;">
      <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #22c55e, #16a34a); border-radius: 20px; display: flex; align-items: center; justify-content: center; font-size: 32px; font-weight: bold; color: white; margin-bottom: 20px; animation: logoFloat 2.5s ease-in-out infinite;">
        B
      </div>
    </div>
    
    <div class="loading-text">BOTTAMEDI</div>
    <div class="loading-subtext">Frutta e Verdura dal 1974</div>
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Main App Container -->
  <div id="root"></div>
  
  <!-- Main React App -->
  <script type="module" src="/src/main.tsx"></script>
  
  <!-- Performance Monitoring Avanzato -->
  <script>
    // TRACKING PERFORMANCE IN ITALIANO
    if ('PerformanceObserver' in window) {
      const perfObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            const lcpTime = Math.round(entry.startTime);
            window.trackPerformanceSito?.('caricamento_contenuto_principale', lcpTime, 2500);
            
            gtag('event', 'performance_lcp', {
              event_category: 'Performance Tecnica',
              event_label: lcpTime > 2500 ? 'caricamento_lento' : 'caricamento_veloce',
              custom_parameter_1: 'largest_contentful_paint',
              custom_parameter_2: lcpTime + 'ms',
              value: lcpTime
            });
          }
          
          if (entry.entryType === 'first-input') {
            const fidTime = Math.round(entry.processingStart - entry.startTime);
            window.trackPerformanceSito?.('prima_interazione', fidTime, 100);
            
            gtag('event', 'performance_fid', {
              event_category: 'Performance Tecnica',
              event_label: fidTime > 100 ? 'interazione_lenta' : 'interazione_veloce',
              custom_parameter_1: 'first_input_delay',
              custom_parameter_2: fidTime + 'ms',
              value: fidTime
            });
          }
        }
      });
      
      try {
        perfObserver.observe({ entryTypes: ['largest-contentful-paint', 'first-input'] });
      } catch (e) {
        window.trackErroreUX?.('performance_observer_non_supportato', 'inizializzazione', 'basso');
      }
    }
    
    // TRACKING STABILITÀ LAYOUT (CLS)
    let clsValue = 0;
    let sessionValue = 0;
    let sessionEntries = [];

    const clsObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (!entry.hadRecentInput) {
          const firstSessionEntry = sessionEntries[0];
          const lastSessionEntry = sessionEntries[sessionEntries.length - 1];

          if (sessionValue &&
              entry.startTime - lastSessionEntry.startTime < 1000 &&
              entry.startTime - firstSessionEntry.startTime < 5000) {
            sessionValue += entry.value;
            sessionEntries.push(entry);
          } else {
            sessionValue = entry.value;
            sessionEntries = [entry];
          }

          if (sessionValue > clsValue) {
            clsValue = sessionValue;
            const clsScore = Math.round(clsValue * 1000);
            
            gtag('event', 'stabilita_layout', {
              event_category: 'Performance Tecnica',
              event_label: clsScore > 100 ? 'layout_instabile' : 'layout_stabile',
              custom_parameter_1: 'cumulative_layout_shift',
              custom_parameter_2: clsScore + '_punti',
              value: clsScore
            });
          }
        }
      }
    });

    try {
      clsObserver.observe({ entryTypes: ['layout-shift'] });
    } catch (e) {
      window.trackErroreUX?.('cls_observer_non_supportato', 'inizializzazione', 'basso');
    }
    
    // GESTIONE LOADING SCREEN
    function hideLoadingScreen() {
      document.body.classList.add('loaded');
      
      const loadTime = performance.now();
      const loadTimeSeconds = Math.round(loadTime / 1000);
      
      gtag('event', 'tempo_caricamento_iniziale', {
        event_category: 'Performance Utente',
        event_label: loadTime > 3000 ? 'caricamento_lento' : 'caricamento_veloce',
        custom_parameter_1: 'tempo_caricamento',
        custom_parameter_2: loadTimeSeconds + '_secondi',
        custom_parameter_3: loadTime > 3000 ? 'possibile_abbandono' : 'esperienza_buona',
        value: Math.round(loadTime)
      });
      
      setTimeout(() => {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
          loadingScreen.remove();
        }
      }, 400);
    }
    
    // TRACKING COMPORTAMENTO SCROLL E ENGAGEMENT
    let engagementStartTime = Date.now();
    let maxScroll = 0;
    let scrollEvents = 0;
    let currentSection = 'hero';
    
    window.addEventListener('scroll', () => {
      scrollEvents++;
      const scrollPercent = Math.round((window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100);
      
      if (scrollPercent > maxScroll) {
        maxScroll = scrollPercent;
        
        if (maxScroll >= 90 && maxScroll < 95) {
          gtag('event', 'scroll_completo', {
            event_category: 'Engagement Approfondito',
            event_label: 'lettura_completa_sito',
            custom_parameter_1: 'scroll_90_percento',
            custom_parameter_2: 'utente_molto_interessato',
            custom_parameter_3: currentSection,
            value: 50
          });
        } else if (maxScroll >= 75 && maxScroll < 90) {
          gtag('event', 'scroll_approfondito', {
            event_category: 'Engagement Alto',
            event_label: 'lettura_approfondita',
            custom_parameter_1: 'scroll_75_percento',
            custom_parameter_2: 'utente_interessato',
            custom_parameter_3: currentSection,
            value: 25
          });
        } else if (maxScroll >= 50 && maxScroll < 75) {
          gtag('event', 'scroll_medio', {
            event_category: 'Engagement Medio',
            event_label: 'esplorazione_contenuti',
            custom_parameter_1: 'scroll_50_percento',
            custom_parameter_2: 'interesse_medio',
            custom_parameter_3: currentSection,
            value: 10
          });
        }
      }
      
      if (scrollEvents % 20 === 0) {
        const scrollSpeed = scrollEvents > 50 ? 'scroll_veloce' : 'scroll_normale';
        window.trackComportamentoMobile?.(scrollSpeed, currentSection);
      }
    });
    
    // TRACKING TEMPO DI PERMANENZA
    window.addEventListener('beforeunload', () => {
      const timeOnPage = Math.round((Date.now() - engagementStartTime) / 1000);
      const minutes = Math.round(timeOnPage / 60);
      
      let engagementLevel = 'basso';
      let businessValue = 1;
      
      if (timeOnPage > 300) {
        engagementLevel = 'altissimo';
        businessValue = 100;
      } else if (timeOnPage > 180) {
        engagementLevel = 'alto';
        businessValue = 50;
      } else if (timeOnPage > 120) {
        engagementLevel = 'medio';
        businessValue = 25;
      } else if (timeOnPage > 60) {
        engagementLevel = 'discreto';
        businessValue = 10;
      }
      
      gtag('event', 'tempo_permanenza_sito', {
        event_category: 'Engagement Totale',
        event_label: engagementLevel + '_' + minutes + '_minuti',
        custom_parameter_1: engagementLevel,
        custom_parameter_2: timeOnPage + '_secondi',
        custom_parameter_3: maxScroll > 50 ? 'con_esplorazione' : 'senza_esplorazione',
        value: businessValue
      });
      
      if (timeOnPage > 120 && maxScroll > 50) {
        window.trackOpportunitaCommerciale?.('lead_qualificato', 'alta', 'tempo_e_scroll_elevati');
      }
    });
    
    // TRACKING DISPOSITIVO E CONTESTO
    window.addEventListener('load', () => {
      const isMobile = window.innerWidth <= 768;
      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
      const deviceType = isMobile ? 'mobile' : 'desktop';
      
      gtag('event', 'contesto_visita', {
        event_category: 'Analisi Dispositivo',
        event_label: deviceType + '_' + (connection ? connection.effectiveType : 'connessione_sconosciuta'),
        custom_parameter_1: deviceType,
        custom_parameter_2: connection ? connection.effectiveType : 'sconosciuta',
        custom_parameter_3: window.screen.width + 'x' + window.screen.height,
        value: 1
      });
      
      if (isMobile) {
        const orientation = window.screen.orientation ? window.screen.orientation.type : 'sconosciuto';
        window.trackComportamentoMobile?.('orientamento_iniziale', orientation);
      }
      
      const browserInfo = navigator.userAgent.includes('Chrome') ? 'chrome' : 
                         navigator.userAgent.includes('Firefox') ? 'firefox' : 
                         navigator.userAgent.includes('Safari') ? 'safari' : 'altro';
      
      gtag('event', 'info_browser', {
        event_category: 'Contesto Tecnico',
        event_label: browserInfo + '_' + deviceType,
        custom_parameter_1: browserInfo,
        custom_parameter_2: deviceType,
        custom_parameter_3: navigator.language || 'lingua_sconosciuta',
        value: 1
      });
    });
    
    // TRACKING ERRORI
    window.addEventListener('error', (e) => {
      window.trackErroreUX?.('errore_javascript', e.filename || 'file_sconosciuto', 'alto');
      
      gtag('event', 'errore_tecnico', {
        event_category: 'Problemi Tecnici',
        event_label: 'errore_javascript',
        custom_parameter_1: e.message || 'messaggio_sconosciuto',
        custom_parameter_2: e.filename || 'file_sconosciuto',
        custom_parameter_3: 'interruzione_esperienza',
        value: 1
      });
    });
    
    // TRACKING INTERAZIONI
    let clickCount = 0;
    let lastClickTime = 0;
    
    document.addEventListener('click', (e) => {
      clickCount++;
      const now = Date.now();
      const timeSinceLastClick = now - lastClickTime;
      lastClickTime = now;
      
      if (timeSinceLastClick < 1000 && clickCount > 1) {
        window.trackComportamentoMobile?.('click_rapidi', 'utente_impaziente');
      }
      
      const element = e.target;
      const elementType = element.tagName.toLowerCase();
      const elementClass = element.className;
      const elementText = element.textContent ? element.textContent.slice(0, 50) : '';
      
      if (elementType === 'button' || elementType === 'a' || elementClass.includes('clickable')) {
        gtag('event', 'interazione_elemento', {
          event_category: 'Comportamento Click',
          event_label: elementType + '_' + (elementText || 'senza_testo'),
          custom_parameter_1: elementType,
          custom_parameter_2: elementClass || 'senza_classe',
          custom_parameter_3: elementText || 'elemento_vuoto',
          value: 2
        });
      }
    });
    
    // TRACKING VISIBILITÀ FINESTRA
    let pageVisible = true;
    let invisibleTime = 0;
    let visibilityStartTime = Date.now();
    
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        pageVisible = false;
        invisibleTime = Date.now();
        
        const timeVisible = Date.now() - visibilityStartTime;
        if (timeVisible > 5000) {
          gtag('event', 'uscita_temporanea', {
            event_category: 'Comportamento Navigazione',
            event_label: 'scheda_nascosta',
            custom_parameter_1: 'tab_switch',
            custom_parameter_2: Math.round(timeVisible / 1000) + '_secondi_visibili',
            custom_parameter_3: currentSection,
            value: 1
          });
        }
      } else {
        pageVisible = true;
        const timeInvisible = Date.now() - invisibleTime;
        visibilityStartTime = Date.now();
        
        if (timeInvisible > 30000) {
          gtag('event', 'ritorno_dopo_pausa', {
            event_category: 'Comportamento Navigazione',
            event_label: 'ritorno_interessato',
            custom_parameter_1: 'tab_return',
            custom_parameter_2: Math.round(timeInvisible / 1000) + '_secondi_via',
            custom_parameter_3: 'possibile_confronto_prezzi',
            value: 5
          });
        }
      }
    });
    
    // TRACKING RESIZE E ORIENTAMENTO
    window.addEventListener('resize', () => {
      const newWidth = window.innerWidth;
      const newHeight = window.innerHeight;
      const isMobile = newWidth <= 768;
      
      window.trackComportamentoMobile?.('ridimensionamento_finestra', 
        isMobile ? 'mobile' : 'desktop');
      
      if (isMobile && Math.abs(newHeight - newWidth) < 100) {
        window.trackComportamentoMobile?.('rotazione_landscape', currentSection);
      }
    });
    
    // FUNZIONI GLOBALI PER TRACKING DA COMPONENTI REACT
    window.updateCurrentSection = function(sectionName) {
      if (currentSection !== sectionName) {
        const timeInPreviousSection = Date.now() - (window.sectionStartTime || Date.now());
        
        if (window.sectionStartTime && timeInPreviousSection > 3000) {
          window.trackTempoSezione?.(currentSection, Math.round(timeInPreviousSection / 1000));
        }
        
        currentSection = sectionName;
        window.sectionStartTime = Date.now();
        
        gtag('event', 'cambio_sezione', {
          event_category: 'Navigazione Sezioni',
          event_label: 'ingresso_' + sectionName,
          custom_parameter_1: sectionName,
          custom_parameter_2: 'sezione_visualizzata',
          custom_parameter_3: Date.now() - engagementStartTime > 60000 ? 'utente_esperto' : 'primo_approccio',
          value: 3
        });
        
        // Aggiorna meta theme-color dinamicamente
        const themeColorMeta = document.getElementById('theme-color-meta');
        const sectionColors = {
          'hero': '#22c55e',
          'about': '#16a34a', 
          'dettaglio': '#15803d',
          'services': '#166534',
          'products': '#14532d',
          'wholesale': '#052e16',
          'contact': '#1f2937'
        };
        
        if (themeColorMeta && sectionColors[sectionName]) {
          themeColorMeta.setAttribute('content', sectionColors[sectionName]);
        }
      }
    };
    
    // INIZIALIZZAZIONE
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(hideLoadingScreen, 1000);
      });
    } else {
      setTimeout(hideLoadingScreen, 1000);
    }
    
    // SERVICE WORKER PWA
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js')
          .then((registration) => {
            gtag('event', 'pwa_service_worker', {
              event_category: 'Tecnologia Avanzata',
              event_label: 'service_worker_registrato',
              custom_parameter_1: 'pwa_capability',
              custom_parameter_2: 'offline_support',
              custom_parameter_3: 'esperienza_nativa',
              value: 5
            });
          })
          .catch((registrationError) => {
            window.trackErroreUX?.('service_worker_fallito', 'pwa_setup', 'medio');
          });
      });
    }
    
    // TRACKING SPECIAL EVENTS
    window.addEventListener('beforeinstallprompt', (e) => {
      gtag('event', 'pwa_install_prompt', {
        event_category: 'PWA Install',
        event_label: 'installazione_disponibile',
        custom_parameter_1: 'pwa_eligible',
        custom_parameter_2: 'utente_idoneo',
        custom_parameter_3: 'opportunita_app',
        value: 20
      });
    });
    
    // PERFORMANCE BUDGET MONITORING
    window.addEventListener('load', () => {
      const entries = performance.getEntriesByType('navigation')[0];
      if (entries) {
        const loadTime = entries.loadEventEnd - entries.fetchStart;
        
        if (loadTime > 5000) {
          window.trackErroreUX?.('caricamento_molto_lento', 'performance_critica', 'alto');
        }
        
        gtag('event', 'metriche_caricamento_dettagliate', {
          event_category: 'Performance Dettagliata',
          event_label: 'analisi_completa',
          custom_parameter_1: Math.round(entries.domContentLoadedEventEnd - entries.fetchStart) + 'ms_dom',
          custom_parameter_2: Math.round(loadTime) + 'ms_totale',
          custom_parameter_3: entries.transferSize + 'bytes_trasferiti',
          value: Math.round(loadTime)
        });
      }
    });
  </script>

  <!-- Schema.org Structured Data -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "name": "Bottamedi Frutta e Verdura",
    "alternateName": ["Bottamedi Mezzolombardo", "Bottamedi HORECA", "Banchetto Bottamedi"],
    "description": "Azienda familiare dal 1974 specializzata nella vendita di frutta e verdura fresca a Mezzolombardo. Servizi ingrosso HORECA per ristoranti e banchetto dettaglio per privati nel Trentino Alto Adige.",
    "foundingDate": "1974",
    "email": "bottamedipierluigi@virgilio.it",
    "telephone": ["+39 351 577 6198", "+39 0461 602534"],
    "faxNumber": "+39 0461 602534",
    "url": "https://www.bottamedi.eu",
    "logo": "https://www.bottamedi.eu/logo-bottamedi.webp",
    "image": [
      "https://www.bottamedi.eu/images/banchetto.webp",
      "https://www.bottamedi.eu/images/melinda_golden.webp",
      "https://www.bottamedi.eu/images/pomodori_cuore_bue.webp"
    ],
    "priceRange": "€€",
    "currenciesAccepted": "EUR",
    "paymentAccepted": ["Cash", "Credit Card", "Bank Transfer", "Electronic Transfer"],
    "address": [
      {
        "@type": "PostalAddress",
        "streetAddress": "Via Cavalleggeri Udine",
        "addressLocality": "Mezzolombardo",
        "addressRegion": "Trentino Alto Adige",
        "postalCode": "38017",
        "addressCountry": "IT",
        "name": "Banchetto Dettaglio"
      },
      {
        "@type": "PostalAddress", 
        "streetAddress": "Via Alcide de Gasperi, 47",
        "addressLocality": "Mezzolombardo",
        "addressRegion": "Trentino Alto Adige", 
        "postalCode": "38017",
        "addressCountry": "IT",
        "name": "Sede Ingrosso HORECA"
      }
    ],
    "geo": [
      {
        "@type": "GeoCoordinates",
        "latitude": 46.210472,
        "longitude": 11.097015,
        "name": "Banchetto"
      },
      {
        "@type": "GeoCoordinates",
        "latitude": 46.213210,
        "longitude": 11.098930,
        "name": "Ingrosso"
      }
    ],
    "openingHours": ["Mo-Sa 07:00-19:30"],
    "specialOpeningHoursSpecification": [
      {
        "@type": "OpeningHoursSpecification",
        "dayOfWeek": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        "opens": "07:00",
        "closes": "19:30"
      }
    ],
    "category": ["Grocery Store", "Wholesale Food Distributor", "Fresh Produce Market", "HORECA Supplier", "Family Business"],
    "naics": "445230",
    "isicV4": "4721",
    "serviceArea": [
      {
        "@type": "Place",
        "name": "Trentino Alto Adige"
      },
      {
        "@type": "Place",
        "name": "Veneto Nord"
      },
      {
        "@type": "Place",
        "name": "Lombardia Orientale"
      }
    ],
    "hasOfferCatalog": {
      "@type": "OfferCatalog",
      "name": "Catalogo Prodotti Bottamedi",
      "itemListElement": [
        {
          "@type": "Offer",
          "name": "Frutta Fresca Stagionale",
          "description": "Mele Melinda DOP, pesche, kiwi, agrumi selezionati, frutta esotica",
          "category": "Fresh Fruit"
        },
        {
          "@type": "Offer", 
          "name": "Verdure Fresche Locali",
          "description": "Pomodori cuore di bue, zucche, insalate, verdure di stagione del Trentino",
          "category": "Fresh Vegetables"
        },
        {
          "@type": "Offer",
          "name": "Servizio Ingrosso HORECA",
          "description": "Fornitura quotidiana per ristoranti, hotel, pizzerie con consegne programmate",
          "category": "Wholesale Service"
        },
        {
          "@type": "Offer",
          "name": "Prodotti Tipici Trentini",
          "description": "Specialità locali, mele antiche, piccoli frutti di montagna",
          "category": "Local Products"
        }
      ]
    },
    "founder": {
      "@type": "Person",
      "name": "Lorenzo Bottamedi",
      "birthDate": "1950"
    },
    "employee": [
      {
        "@type": "Person",
        "name": "Pierluigi Bottamedi",
        "jobTitle": "Titolare e Responsabile Commerciale",
        "email": "bottamedipierluigi@virgilio.it",
        "telephone": "+39 0461 602534"
      }
    ],
    "parentOrganization": {
      "@type": "Organization",
      "name": "Famiglia Bottamedi",
      "foundingDate": "1974"
    },
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": "4.8",
      "reviewCount": "127",
      "bestRating": "5",
      "worstRating": "1"
    },
    "contactPoint": [
      {
        "@type": "ContactPoint",
        "telephone": "+39 351 577 6198",
        "contactType": "customer service",
        "areaServed": "IT",
        "availableLanguage": ["Italian", "German"],
        "hoursAvailable": "Mo-Sa 07:00-19:30"
      },
      {
        "@type": "ContactPoint",
        "telephone": "+39 0461 602534",
        "contactType": "sales",
        "areaServed": "IT",
        "availableLanguage": ["Italian", "German"],
        "hoursAvailable": "Mo-Fr 08:00-18:00"
      }
    ],
    "sameAs": [
      "https://www.facebook.com/profile.php?id=100063456281899",
      "https://instagram.com/banchetto.bottamedi",
      "https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6"
    ],
    "knowsAbout": [
      "Frutta fresca di stagione",
      "Verdura biologica e tradizionale", 
      "Mele Melinda DOP",
      "Prodotti tipici trentini",
      "Servizi HORECA",
      "Ingrosso alimentari",
      "Distribuzione ortofrutta",
      "Consulenza commerciale"
    ],
    "award": [
      "50 anni di attività",
      "Riconoscimento qualità HORECA",
      "Certificazione fornitori locali"
    ]
  }
  </script>

  <!-- FAQ Schema -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": "Dove si trova Bottamedi a Mezzolombardo?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Bottamedi ha due sedi a Mezzolombardo: il banchetto dettaglio in Via Cavalleggeri Udine (aperto lun-sab 7:00-19:30) e l'ingrosso HORECA in Via Alcide de Gasperi 47. Entrambe nel centro di Mezzolombardo, Trentino Alto Adige."
        }
      },
      {
        "@type": "Question",
        "name": "Come contattare Bottamedi per l'ingrosso HORECA?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Per il servizio ingrosso HORECA contatta Bottamedi al +39 0461 602534 o via email a bottamedipierluigi@virgilio.it. Forniamo ristoranti, hotel e pizzerie in tutto il Trentino Alto Adige con consegne programmate 6 giorni su 7."
        }
      },
      {
        "@type": "Question",
        "name": "Quali sono gli orari del banchetto Bottamedi?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Il banchetto Bottamedi è aperto dal Lunedì al Sabato dalle 07:00 alle 19:30. Siamo chiusi la Domenica per garantire la selezione quotidiana dei prodotti più freschi alle prime ore del mattino."
        }
      },
      {
        "@type": "Question",
        "name": "Che prodotti offre Bottamedi?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Bottamedi offre oltre 150 varietà di frutta e verdura fresca: mele Melinda DOP, prodotti biologici del Trentino, frutta di stagione, verdure locali, specialità del territorio e prodotti per il settore HORECA. Selezione quotidiana alle prime ore del mattino."
        }
      },
      {
        "@type": "Question",
        "name": "Bottamedi offre servizi per ristoranti e hotel?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Sì, Bottamedi ha una divisione specializzata HORECA che fornisce ristoranti, hotel, pizzerie e attività commerciali con prodotti di qualità superiore, consegne programmate, listini dedicati e consulenza professionale."
        }
      },
      {
        "@type": "Question",
        "name": "Da quanto tempo opera Bottamedi?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Bottamedi è un'azienda familiare fondata nel 1974, con oltre 50 anni di esperienza nel settore ortofrutticolo. Tre generazioni della famiglia Bottamedi continuano la tradizione di qualità e servizio nel Trentino Alto Adige."
        }
      }
    ]
  }
  </script>

</body>
</html>


--- FILE: netlify.toml ---
[build]
  command = "npm install && npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "20"
  NPM_VERSION = "10"

# Cache per assets statici
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# Cache per immagini
[[headers]]
  for = "/images/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

# Redirect per SPA
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200


--- FILE: package.json ---
{
  "name": "bottamedi-website",
  "version": "1.0.0",
  "private": true,
  "description": "Bottamedi - Frutta e Verdura Fresca dal 1974. Servizio dettaglio e ingrosso HORECA a Mezzolombardo, Trentino.",
  "homepage": "https://www.bottamedi.eu",
  "keywords": [
    "bottamedi",
    "frutta",
    "verdura",
    "mezzolombardo",
    "trentino",
    "horeca",
    "ingrosso",
    "dettaglio",
    "biologico",
    "locale"
  ],
  "author": {
    "name": "Bottamedi Gianluca",
    "email": "bottamedipierluigi@virgilio.it",
    "url": "https://www.bottamedi.eu"
  },
  "license": "UNLICENSED",
  "dependencies": {
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "core-js": "^3.35.0",
    "framer-motion": "^10.16.16",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-helmet-async": "^2.0.4",
    "react-intersection-observer": "^9.5.3",
    "typescript": "^5.3.3",
    "web-vitals": "^3.5.0",
    "vite": "^5.0.8"
  },
  "devDependencies": {
    "@types/jest": "^29.5.8",
    "@typescript-eslint/eslint-plugin": "^6.13.1",
    "@typescript-eslint/parser": "^6.13.1",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "@rollup/plugin-commonjs": "^25.0.7",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@rollup/plugin-terser": "^0.4.4",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.54.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.32",
    "rollup": "^4.9.6",
    "tailwindcss": "^3.3.6",
    "terser": "^5.24.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint src --ext .js,.jsx,.ts,.tsx --quiet",
    "lint:fix": "eslint src --ext .js,.jsx,.ts,.tsx --fix",
    "type-check": "tsc --noEmit --skipLibCheck",
    "clean": "rm -rf dist node_modules/.vite"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ],
    "rules": {
      "no-unused-vars": "warn",
      "@typescript-eslint/no-unused-vars": "warn"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all",
      "not ie <= 11"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": "20.x",
    "npm": ">=10.0.0"
  }
}


--- FILE: postcss.config.js ---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- FILE: tailwind.config.ts ---
import type { Config } from 'tailwindcss'

export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        accent: {
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981',
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.5s ease-out',
        'float': 'float 6s ease-in-out infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-20px)' },
        },
      },
    },
  },
  plugins: [],
} satisfies Config


--- FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true,

    /* Paths */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/sections/*": ["./src/components/sections/*"],
      "@/layout/*": ["./src/components/layout/*"],
      "@/legal/*": ["./src/components/legal/*"],
      "@/ui/*": ["./src/components/ui/*"],
      "@/types/*": ["./src/components/types/*"]
    }
  },
  "include": [
    "src/**/*.ts", 
    "src/**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "build"
  ],
  "references": [
    { "path": "./tsconfig.node.json" }
  ]
}


--- FILE: tsconfig.node.json ---
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true
  },
  "include": ["vite.config.ts"]
}


--- FILE: vite.config.ts ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'
import { resolve } from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],

  // Path aliases
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@/components': resolve(__dirname, './src/components'),
      '@/sections': resolve(__dirname, './src/components/sections'),
      '@/layout': resolve(__dirname, './src/components/layout'),
      '@/legal': resolve(__dirname, './src/components/legal'),
      '@/ui': resolve(__dirname, './src/components/ui'),
      '@/types': resolve(__dirname, './src/components/types'),
      '@/utils': resolve(__dirname, './src/utils'),
      '@/hooks': resolve(__dirname, './src/hooks')
    }
  },

  // CSS Processing
  css: {
    postcss: './postcss.config.js'
  },

  // Build optimizations per Netlify
  build: {
    target: 'es2020',
    cssCodeSplit: true,
    sourcemap: false,
    minify: 'terser',
    chunkSizeWarningLimit: 1000,
    rollupOptions: {
      plugins: [],
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          animations: ['framer-motion'],
          utils: ['react-intersection-observer']
        },
        assetFileNames: 'assets/[name]-[hash][extname]',
        chunkFileNames: 'assets/[name]-[hash].js',
        entryFileNames: 'assets/[name]-[hash].js'
      }
    },
    terserOptions: {
      compress: {
        drop_console: true,
        drop_debugger: true,
        pure_funcs: ['console.log']
      },
      mangle: true
    },
    // Ottimizzazioni specifiche per Netlify
    emptyOutDir: true,
    assetsDir: 'assets'
  },

  // Dev server
  server: {
    port: 3000,
    host: true,
    cors: true,
    open: true
  },

  // Preview server
  preview: {
    port: 4173,
    host: true
  },

  // Optimizations
  optimizeDeps: {
    include: [
      'react',
      'react-dom',
      'framer-motion',
      'react-intersection-observer',
      'core-js'
    ]
  },

  // Define global constants
  define: {
    __DEV__: JSON.stringify(process.env.NODE_ENV === 'development')
  }
})


--- FILE: public/favicon.webp ---
[Contenuto di 'favicon.webp' omesso (configurazione o tipo di file)]

--- FILE: public/logo-bottamedi.webp ---
[Contenuto di 'logo-bottamedi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/manifest.json ---
{
  "name": "Bottamedi Frutta e Verdura",
  "short_name": "Bottamedi",
  "description": "Banchetto e Ingrosso Frutta e Verdura a Mezzolombardo dal 1974.",
  "lang": "it-IT",
  "start_url": "/?utm_source=pwa",
  "display": "standalone",
  "background_color": "#f0fdf4",
  "theme_color": "#22c55e",
  "scope": "/",
  "orientation": "portrait-primary",
  "categories": [
    "food",
    "shopping",
    "business"
  ],
  "icons": [
    {
      "src": "/icons/icon-72x72.webp",
      "sizes": "72x72",
      "type": "image/webp"
    },
    {
      "src": "/icons/icon-96x96.webp",
      "sizes": "96x96",
      "type": "image/webp"
    },
    {
      "src": "/icons/icon-128x128.webp",
      "sizes": "128x128",
      "type": "image/webp"
    },
    {
      "src": "/icons/icon-144x144.webp",
      "sizes": "144x144",
      "type": "image/webp"
    },
    {
      "src": "/icons/icon-152x152.webp",
      "sizes": "152x152",
      "type": "image/webp"
    },
    {
      "src": "/icons/icon-192x192.webp",
      "sizes": "192x192",
      "type": "image/webp",
      "purpose": "any"
    },
    {
      "src": "/icons/icon-384x384.webp",
      "sizes": "384x384",
      "type": "image/webp"
    },
    {
      "src": "/icons/icon-512x512.webp",
      "sizes": "512x512",
      "type": "image/webp",
      "purpose": "any"
    },
    {
      "src": "/icons/maskable-icon-192x192.webp",
      "sizes": "192x192",
      "type": "image/webp",
      "purpose": "maskable"
    },
    {
      "src": "/icons/maskable-icon-512x512.webp",
      "sizes": "512x512",
      "type": "image/webp",
      "purpose": "maskable"
    }
  ],
  "shortcuts": [
    {
      "name": "Vai al Banchetto Dettaglio",
      "short_name": "Banchetto",
      "description": "Scopri i nostri prodotti freschi in vendita al dettaglio",
      "url": "/#dettaglio",
      "icons": [
        {
          "src": "/icons/shortcut-banchetto-96x96.webp",
          "sizes": "96x96",
          "type": "image/webp"
        }
      ]
    },
    {
      "name": "Servizi Ingrosso HORECA",
      "short_name": "Ingrosso",
      "description": "Forniture professionali per ristoranti e hotel",
      "url": "/#services",
      "icons": [
        {
          "src": "/icons/shortcut-ingrosso-96x96.webp",
          "sizes": "96x96",
          "type": "image/webp"
        }
      ]
    },
    {
      "name": "Contattaci Subito",
      "short_name": "Contatti",
      "description": "Chiamaci o inviaci un messaggio per informazioni",
      "url": "/#contact",
      "icons": [
        {
          "src": "/icons/shortcut-contatti-96x96.webp",
          "sizes": "96x96",
          "type": "image/webp"
        }
      ]
    }
  ],
  "screenshots": [
    {
      "src": "/screenshots/screenshot-mobile-1.webp",
      "sizes": "540x720",
      "type": "image/webp",
      "form_factor": "narrow",
      "label": "La nostra homepage con i prodotti in evidenza"
    },
    {
      "src": "/screenshots/screenshot-mobile-2.webp",
      "sizes": "540x720",
      "type": "image/webp",
      "form_factor": "narrow",
      "label": "Sezione dedicata ai servizi per l'ingrosso HORECA"
    },
    {
      "src": "/screenshots/screenshot-desktop-1.webp",
      "sizes": "1280x800",
      "type": "image/webp",
      "form_factor": "wide",
      "label": "Visualizzazione del sito su desktop"
    }
  ]
}


--- FILE: public/robot.txt ---
# Robots.txt per Bottamedi Frutta e Verdura
# Ottimizzato per posizionamento SEO su Google

User-agent: *
Allow: /

# Consenti accesso completo ai principali motori di ricerca
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Slurp
Allow: /

User-agent: DuckDuckBot
Allow: /

User-agent: Baiduspider
Allow: /

User-agent: YandexBot
Allow: /

User-agent: facebookexternalhit
Allow: /

# Blocca crawler dannosi o inutili
User-agent: SemrushBot
Disallow: /

User-agent: AhrefsBot
Disallow: /

User-agent: MJ12bot
Disallow: /

User-agent: DotBot
Disallow: /

# Consenti accesso alle cartelle critiche per SEO
Allow: /images/
Allow: /videos/
Allow: /assets/
Allow: /public/

# Blocca file non necessari per l'indicizzazione
Disallow: /src/
Disallow: /node_modules/
Disallow: /*.json$
Disallow: /*.ts$
Disallow: /*.tsx$
Disallow: /vite.config.ts
Disallow: /package.json
Disallow: /tsconfig.json

# Consenti manifest PWA e service worker
Allow: /manifest.json
Allow: /service-worker.js

# Riferimenti alle sitemap
Sitemap: https://www.bottamedi.eu/sitemap.xml
Sitemap: https://www.bottamedi.eu/sitemap-images.xml
Sitemap: https://www.bottamedi.eu/sitemap-videos.xml

# Crawl-delay per evitare sovraccarico server
Crawl-delay: 1

# Host preferito (canonico)
Host: https://www.bottamedi.eu


--- FILE: public/sitemap-data.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" 
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"
        xmlns:video="http://www.google.com/schemas/sitemap-video/1.1"
        xmlns:xhtml="http://www.w3.org/1999/xhtml">

  <!-- Homepage principale -->
  <url>
    <loc>https://www.bottamedi.eu/</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/banchetto.webp</image:loc>
      <image:title>Banchetto Bottamedi Frutta e Verdura Mezzolombardo</image:title>
      <image:caption>Banchetto di frutta e verdura fresca di Bottamedi nel centro di Mezzolombardo, Trentino Alto Adige</image:caption>
    </image:image>
    <video:video>
      <video:thumbnail_loc>https://www.bottamedi.eu/images/poster.webp</video:thumbnail_loc>
      <video:title>Bottamedi - Frutta e Verdura Fresca dal 1974</video:title>
      <video:description>Video presentazione di Bottamedi, azienda familiare specializzata nella vendita di frutta e verdura fresca a Mezzolombardo</video:description>
      <video:content_loc>https://www.bottamedi.eu/videos/hero-video-verdure-rotanti.mp4</video:content_loc>
      <video:duration>30</video:duration>
    </video:video>
    <xhtml:link rel="alternate" hreflang="it" href="https://www.bottamedi.eu/" />
    <xhtml:link rel="alternate" hreflang="de" href="https://www.bottamedi.eu/de" />
  </url>

  <!-- Sezione Chi Siamo / Storia -->
  <url>
    <loc>https://www.bottamedi.eu/#about</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.9</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/melinda_golden.webp</image:loc>
      <image:title>Mele Melinda Golden DOP - Bottamedi</image:title>
      <image:caption>Mele Golden Melinda DOP fresche dalla Val di Non, selezionate da Bottamedi per qualità superiore</image:caption>
    </image:image>
  </url>

  <!-- Banchetto Dettaglio -->
  <url>
    <loc>https://www.bottamedi.eu/#dettaglio</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.95</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/banco_varieta_autunno.webp</image:loc>
      <image:title>Banchetto Bottamedi - Varietà Autunnali</image:title>
      <image:caption>Ricca esposizione di frutta e verdura fresca di stagione al banchetto Bottamedi di Mezzolombardo</image:caption>
    </image:image>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/pomodori_cuore_bue.webp</image:loc>
      <image:title>Pomodori Cuore di Bue Freschi</image:title>
      <image:caption>Pomodori cuore di bue rossi freschi e profumati del Trentino disponibili al banchetto Bottamedi</image:caption>
    </image:image>
  </url>

  <!-- Servizi Ingrosso HORECA -->
  <url>
    <loc>https://www.bottamedi.eu/#services</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.9</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/albicocche_ingrosso_magazzino.webp</image:loc>
      <image:title>Servizio Ingrosso HORECA Bottamedi</image:title>
      <image:caption>Magazzino frutta per servizio ingrosso HORECA di Bottamedi, forniture per ristoranti e hotel nel Trentino</image:caption>
    </image:image>
  </url>

  <!-- Prodotti -->
  <url>
    <loc>https://www.bottamedi.eu/#products</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.85</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/angurie.webp</image:loc>
      <image:title>Angurie Fresche Estive</image:title>
      <image:caption>Angurie fresche e succose, tagliate e intere, disponibili in stagione da Bottamedi Mezzolombardo</image:caption>
    </image:image>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/arance_felici.webp</image:loc>
      <image:title>Arance La Favorita Felici</image:title>
      <image:caption>Arance fresche e succose La Favorita Felici, agrumi selezionati da Bottamedi</image:caption>
    </image:image>
  </url>

  <!-- Richiesta Listino Ingrosso -->
  <url>
    <loc>https://www.bottamedi.eu/#wholesale</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <!-- Contatti -->
  <url>
    <loc>https://www.bottamedi.eu/#contact</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.85</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/mappa-banchetto-bottamedi.webp</image:loc>
      <image:title>Mappa Banchetto Bottamedi Mezzolombardo</image:title>
      <image:caption>Posizione del banchetto Bottamedi in Via Cavalleggeri Udine, Mezzolombardo, Trentino Alto Adige</image:caption>
    </image:image>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/mappa-ingrosso-bottamedi.webp</image:loc>
      <image:title>Mappa Sede Ingrosso Bottamedi</image:title>
      <image:caption>Sede dell'ingrosso HORECA Bottamedi in Via Alcide de Gasperi 47, Mezzolombardo</image:caption>
    </image:image>
  </url>

  <!-- Pagine prodotti specifici -->
  <url>
    <loc>https://www.bottamedi.eu/prodotti/mele-melinda-dop</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/bottamedi_mele_melinda_montagna_cassetta.webp</image:loc>
      <image:title>Mele Melinda DOP Montagna - Cassetta</image:title>
      <image:caption>Cassetta di Mele Melinda DOP Mela di Montagna, specialità del Trentino disponibile da Bottamedi</image:caption>
    </image:image>
  </url>

  <!-- Servizi Specifici -->
  <url>
    <loc>https://www.bottamedi.eu/servizi/ingrosso-horeca-trentino</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.75</priority>
  </url>

  <url>
    <loc>https://www.bottamedi.eu/servizi/banchetto-frutta-verdura-mezzolombardo</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>

  <!-- Landing page per ricerche locali -->
  <url>
    <loc>https://www.bottamedi.eu/mezzolombardo</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <url>
    <loc>https://www.bottamedi.eu/trentino-alto-adige</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>

  <!-- Versione tedesca -->
  <url>
    <loc>https://www.bottamedi.eu/de</loc>
    <lastmod>2024-12-20</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
    <xhtml:link rel="alternate" hreflang="de" href="https://www.bottamedi.eu/de" />
    <xhtml:link rel="alternate" hreflang="it" href="https://www.bottamedi.eu/" />
  </url>

</urlset>


--- FILE: public/sitemap-images.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">

  <!-- Immagini principali del banchetto -->
  <url>
    <loc>https://www.bottamedi.eu/</loc>
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/banchetto.webp</image:loc>
      <image:title>Banchetto Bottamedi Frutta e Verdura Mezzolombardo</image:title>
      <image:caption>Il colorato banchetto di frutta e verdura fresca di Bottamedi nel centro di Mezzolombardo, Trentino Alto Adige. Oltre 150 varietà fresche selezionate ogni giorno.</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/banco_varieta_autunno.webp</image:loc>
      <image:title>Varietà Autunnali Banchetto Bottamedi</image:title>
      <image:caption>Ricca esposizione di frutta fresca di stagione, verdure e prodotti tipici del Trentino al banchetto Bottamedi di Mezzolombardo</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/melinda_golden.webp</image:loc>
      <image:title>Mele Golden Melinda DOP Trentino</image:title>
      <image:caption>Mele Golden Melinda DOP fresche e succose dalla Val di Non, certificate e selezionate da Bottamedi per qualità superiore</image:caption>
      <image:geo_location>Val di Non, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/pomodori_cuore_bue.webp</image:loc>
      <image:title>Pomodori Cuore di Bue Trentino</image:title>
      <image:caption>Pomodori cuore di bue rossi freschi e profumati del Trentino, ideali per insalate e preparazioni gourmet, disponibili da Bottamedi</image:caption>
      <image:geo_location>Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Prodotti stagionali -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/angurie.webp</image:loc>
      <image:title>Angurie Fresche Estive</image:title>
      <image:caption>Angurie fresche e succose, tagliate e intere, dolcezza estiva disponibile in stagione da Bottamedi Mezzolombardo</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/meloni_sattin_dettaglio.webp</image:loc>
      <image:title>Meloni Sattin Dolce Passione</image:title>
      <image:caption>Meloni Sattin Dolce Passione profumati e dolci, specialità estiva di qualità superiore selezionata da Bottamedi</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/arance_felici.webp</image:loc>
      <image:title>Arance La Favorita Felici</image:title>
      <image:caption>Arance fresche e succose La Favorita Felici, agrumi selezionati della migliore qualità disponibili da Bottamedi</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/zucche_decorate_banco.webp</image:loc>
      <image:title>Zucche Autunnali Banco Bottamedi</image:title>
      <image:caption>Atmosfera accogliente e stagionale al banchetto Bottamedi con zucche decorate e prodotti autunnali del Trentino</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Specialità Premium -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/bottamedi_mele_pink_lady_confezione.webp</image:loc>
      <image:title>Mele Pink Lady Confezione Premium</image:title>
      <image:caption>Confezione di Mele Pink Lady fresche e croccanti, varietà internazionale di qualità premium disponibile da Bottamedi</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/bottamedi_ananas_fruitpoint_freschi.webp</image:loc>
      <image:title>Ananas Fruitpoint Freschi</image:title>
      <image:caption>Ananas freschi e maturi Fruitpoint, frutta esotica di qualità superiore per clienti esigenti, disponibile da Bottamedi</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/bottamedi_mele_melinda_montagna_cassetta.webp</image:loc>
      <image:title>Cassetta Mele Melinda Montagna DOP</image:title>
      <image:caption>Cassetta di Mele Melinda 'Mela di Montagna' DOP, specialità certificata del Trentino Alto Adige selezionata da Bottamedi</image:caption>
      <image:geo_location>Val di Non, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Frutta disidratata e specialità -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/bottamedi_sacchetti_frutta_disidratata_mista.webp</image:loc>
      <image:title>Frutta Disidratata Mista Sacchetti</image:title>
      <image:caption>Sacchetti di frutta disidratata mista colorata e gustosa, prodotti naturali senza conservanti disponibili da Bottamedi</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/bottamedi_dettaglio_frutta_disidratata_vaschette.webp</image:loc>
      <image:title>Vaschette Frutta Disidratata Dettaglio</image:title>
      <image:caption>Dettaglio vaschette di frutta disidratata assortita, snack salutari e naturali proposti da Bottamedi per tutti i gusti</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/banco_frigo_disidratata_specialita.webp</image:loc>
      <image:title>Banco Frigo Specialità Trentine</image:title>
      <image:caption>Ampia selezione di specialità del Trentino Alto Adige nel banco frigo di Bottamedi, prodotti tipici locali di qualità</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Servizio Ingrosso HORECA -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/albicocche_ingrosso_magazzino.webp</image:loc>
      <image:title>Magazzino Ingrosso HORECA Bottamedi</image:title>
      <image:caption>Magazzino albicocche e frutta per il servizio ingrosso HORECA di Bottamedi, forniture professionali per ristoranti, hotel e pizzerie del Trentino</image:caption>
      <image:geo_location>Via de Gasperi 47, Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Prodotti cuore -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/kiwi-cuore.webp</image:loc>
      <image:title>Kiwi Cuore Specialità</image:title>
      <image:caption>Kiwi freschi a forma di cuore, specialità unica e originale di Bottamedi per sorprendere e deliziare</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/kiwi-gialli-bg.webp</image:loc>
      <image:title>Kiwi Gialli Premium</image:title>
      <image:caption>Kiwi gialli dolci e succosi, varietà premium con polpa dorata e sapore delicato, disponibili da Bottamedi</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Mappe e Localizzazione -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/images/mappa-banchetto-bottamedi.webp</image:loc>
      <image:title>Mappa Posizione Banchetto Bottamedi</image:title>
      <image:caption>Mappa con la posizione esatta del banchetto Bottamedi in Via Cavalleggeri Udine nel centro di Mezzolombardo, Trentino Alto Adige</image:caption>
      <image:geo_location>Via Cavalleggeri Udine, Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/images/mappa-ingrosso-bottamedi.webp</image:loc>
      <image:title>Mappa Sede Ingrosso HORECA Bottamedi</image:title>
      <image:caption>Mappa della sede dell'ingrosso HORECA Bottamedi in Via Alcide de Gasperi 47, Mezzolombardo, per forniture professionali</image:caption>
      <image:geo_location>Via de Gasperi 47, Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <!-- Logo e Branding -->
    <image:image>
      <image:loc>https://www.bottamedi.eu/logo-bottamedi.webp</image:loc>
      <image:title>Logo Bottamedi Frutta e Verdura</image:title>
      <image:caption>Logo ufficiale di Bottamedi, azienda familiare di frutta e verdura fresca attiva dal 1974 a Mezzolombardo, Trentino Alto Adige</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

    <image:image>
      <image:loc>https://www.bottamedi.eu/favicon.webp</image:loc>
      <image:title>Favicon Bottamedi</image:title>
      <image:caption>Icona simbolo di Bottamedi per identificazione rapida del brand online</image:caption>
      <image:geo_location>Mezzolombardo, Trentino Alto Adige, Italia</image:geo_location>
    </image:image>

  </url>

</urlset>


--- FILE: public/sitemap.xml ---
<?php
// Imposta l'header corretto per dire al browser che questo è un file XML.
header("Content-Type: application/xml; charset=utf-8");

// Legge e mostra il contenuto del tuo vero file sitemap.
readfile("sitemap-data.xml");

// Termina lo script.
exit();
?>


--- FILE: public/images/albicocche_ingrosso_magazzino.webp ---
[Contenuto di 'albicocche_ingrosso_magazzino.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/angurie.webp ---
[Contenuto di 'angurie.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/arance_felici.webp ---
[Contenuto di 'arance_felici.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/banchetto.webp ---
[Contenuto di 'banchetto.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/banco_frigo_disidratata_specialita.webp ---
[Contenuto di 'banco_frigo_disidratata_specialita.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/banco_varieta_autunno.webp ---
[Contenuto di 'banco_varieta_autunno.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_ananas_fruitpoint_freschi.webp ---
[Contenuto di 'bottamedi_ananas_fruitpoint_freschi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_dettaglio_frutta_disidratata_vaschette.webp ---
[Contenuto di 'bottamedi_dettaglio_frutta_disidratata_vaschette.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_mele_melinda_montagna_cassetta.webp ---
[Contenuto di 'bottamedi_mele_melinda_montagna_cassetta.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_mele_pink_lady_confezione.webp ---
[Contenuto di 'bottamedi_mele_pink_lady_confezione.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/bottamedi_sacchetti_frutta_disidratata_mista.webp ---
[Contenuto di 'bottamedi_sacchetti_frutta_disidratata_mista.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/kiwi-cuore.webp ---
[Contenuto di 'kiwi-cuore.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/kiwi-gialli-bg.webp ---
[Contenuto di 'kiwi-gialli-bg.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/mappa-banchetto-bottamedi.webp ---
[Contenuto di 'mappa-banchetto-bottamedi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/mappa-ingrosso-bottamedi.webp ---
[Contenuto di 'mappa-ingrosso-bottamedi.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/melinda_golden.webp ---
[Contenuto di 'melinda_golden.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/meloni_sattin_dettaglio.webp ---
[Contenuto di 'meloni_sattin_dettaglio.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/pomodori_cuore_bue.webp ---
[Contenuto di 'pomodori_cuore_bue.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/poster.webp ---
[Contenuto di 'poster.webp' omesso (configurazione o tipo di file)]

--- FILE: public/images/zucche_decorate_banco.webp ---
[Contenuto di 'zucche_decorate_banco.webp' omesso (configurazione o tipo di file)]

--- FILE: public/videos/hero-video-verdure-rotanti.mp4 ---
[Contenuto di 'hero-video-verdure-rotanti.mp4' omesso (configurazione o tipo di file)]

--- FILE: src/app.tsx ---
import React, { useState, useEffect, useMemo, useCallback, Suspense, lazy } from 'react'
import { motion, AnimatePresence, useReducedMotion } from 'framer-motion'
import { HelmetProvider, Helmet } from 'react-helmet-async'

// Hooks ottimizzati
import { useLocalStorage } from './hooks/useLocalStorage'
import { useScrollInfo, useScrollDirection } from './hooks/useScrollDirection'
import { useIntersectionObserver } from './hooks/useIntersectionObserver'

// Layout Components
import Header from './components/layout/Header'
import Footer from './components/layout/Footer'
import MobileDock from './components/layout/MobileDock'

// Legal Components
import CookieBanner from './components/legal/CookieBanner'
import LegalDocuments from './components/legal/LegalDocuments'

// Utility imports
import { getLanguageFromStorage, getBrowserLanguage, isMobile } from './utils/helpers'

// Lazy load delle sezioni per ottimizzazione
const HeroSection = lazy(() => import('./components/sections/HeroSection'))
const AboutSection = lazy(() => import('./components/sections/AboutSection'))
const BanchettoSection = lazy(() => import('./components/sections/Banchettosection'))
const ServicesSection = lazy(() => import('./components/sections/ServicesSection'))
const ProductsSection = lazy(() => import('./components/sections/ProductsSection'))
const WholesaleContact = lazy(() => import('./components/sections/Wholesalecontact'))
const ContactSection = lazy(() => import('./components/sections/ContactSection'))

// Costanti per ottimizzazione - Tempi ridotti per reattività
const SECTIONS = [
  { id: 'hero', Component: HeroSection },
  { id: 'about', Component: AboutSection },
  { id: 'dettaglio', Component: BanchettoSection },
  { id: 'services', Component: ServicesSection },
  { id: 'products', Component: ProductsSection },
  { id: 'wholesale', Component: WholesaleContact },
  { id: 'contact', Component: ContactSection }
] as const

const MOBILE_DOCK_IDLE_TIME = 500 // Ridotto a 500ms per reattività
const SCROLL_DETECTION_DELAY = 16 // 60fps = 16ms per frame
const HEADER_FADE_SPEED = 150 // Scomparsa più veloce header

// Mappa colori per status bar dinamica - FIX: Tipo più flessibile
const SECTION_COLORS: Record<string, string> = {
  hero: '#22c55e', // Green-500
  about: '#16a34a', // Green-600
  dettaglio: '#15803d', // Green-700
  services: '#166534', // Green-800
  products: '#14532d', // Green-900
  wholesale: '#052e16', // Green-950
  contact: '#1f2937' // Gray-800
} as const

// Loading Component ottimizzato
const OptimizedSectionLoader: React.FC<{ name: string }> = React.memo(({ name }) => (
  <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-green-100">
    <div className="relative">
      <motion.div
        className="w-16 h-16 border-4 border-green-200 border-t-green-600 rounded-full"
        animate={{ rotate: 360 }}
        transition={{ duration: 0.8, repeat: Infinity, ease: "linear" }}
      />
      <motion.div
        className="absolute inset-0 flex items-center justify-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        <div className="w-2 h-2 bg-green-600 rounded-full animate-pulse" />
      </motion.div>
    </div>
    <motion.p
      className="absolute bottom-4 text-green-700 font-medium text-sm"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.1 }}
      aria-live="polite"
    >
      Caricamento {name}...
    </motion.p>
  </div>
))
OptimizedSectionLoader.displayName = 'OptimizedSectionLoader'

// Hook personalizzato per gestione mobile dock intelligente - Ottimizzato
const useMobileDockVisibility = (sectionsInView: Record<string, boolean>) => {
  const [isVisible, setIsVisible] = useState(false)
  const [isIdle, setIsIdle] = useState(false)
  const [lastScrollTime, setLastScrollTime] = useState(Date.now())
  
  const scrollDirection = useScrollDirection({ threshold: 3, throttleDelay: SCROLL_DETECTION_DELAY })
  const { scrollY, isScrolling } = useScrollInfo({ throttleDelay: SCROLL_DETECTION_DELAY })
  
  // Gestione idle timer ottimizzata
  useEffect(() => {
    if (isScrolling) {
      setLastScrollTime(Date.now())
      setIsIdle(false)
    }

    const idleTimer = setTimeout(() => {
      const now = Date.now()
      if (now - lastScrollTime > MOBILE_DOCK_IDLE_TIME && !isScrolling) {
        setIsIdle(true)
      }
    }, MOBILE_DOCK_IDLE_TIME)

    return () => clearTimeout(idleTimer)
  }, [isScrolling, lastScrollTime])

  // Logica intelligente di visibilità - Esclude SOLO hero e contact/footer
  useEffect(() => {
    const isInHero = sectionsInView.hero || scrollY < 50
    const isInContact = sectionsInView.contact // Semplificato footer detection
    
    // Nascondi SOLO in hero e contact
    if (isInHero || isInContact) {
      setIsVisible(false)
      return
    }

    // Mostra in TUTTE le altre sezioni (about, dettaglio, services, products, wholesale)
    const shouldShow = 
      scrollY > 50 && ( // Dopo hero
        scrollDirection === 'up' || // Scroll inverso
        isIdle || // Idle state
        (!isScrolling && scrollY > 80) // Quando fermo dopo scroll
      )

    setIsVisible(shouldShow)
  }, [scrollDirection, scrollY, isIdle, isScrolling, sectionsInView])

  return isVisible
}

// Hook per header mobile - Scomparsa più veloce e sempre trasparente
const useMobileHeaderVisibility = (sectionsInView: Record<string, boolean>) => {
  const [isVisible, setIsVisible] = useState(true)
  const { scrollY } = useScrollInfo({ throttleDelay: SCROLL_DETECTION_DELAY })
  
  useEffect(() => {
    const isInHero = sectionsInView.hero || scrollY < 60 // Soglia ridotta per scomparsa più veloce
    setIsVisible(isInHero)
  }, [sectionsInView.hero, scrollY])

  return isVisible
}

// Hook per colore dinamico status bar - FIX: Tipo più flessibile
const useStatusBarColor = (sectionsInView: Record<string, boolean>) => {
  const [currentColor, setCurrentColor] = useState<string>('#22c55e')
  
  useEffect(() => {
    // Trova la sezione attualmente visibile (priorità in ordine)
    for (const section of SECTIONS) {
      if (sectionsInView[section.id]) {
        const color = SECTION_COLORS[section.id]
        if (color) {
          setCurrentColor(color)
          break
        }
      }
    }
  }, [sectionsInView])

  return currentColor
}

// Hook per intersection observer delle sezioni
const useSectionsInView = () => {
  const [sectionsInView, setSectionsInView] = useState<Record<string, boolean>>({})

  const updateSectionInView = useCallback((sectionId: string, inView: boolean) => {
    setSectionsInView(prev => ({
      ...prev,
      [sectionId]: inView
    }))
  }, [])

  return { sectionsInView, updateSectionInView }
}

// Componente sezione ottimizzato con lazy loading intelligente
const OptimizedSection: React.FC<{
  section: typeof SECTIONS[number]
  language: 'it' | 'de'
  onInViewChange: (sectionId: string, inView: boolean) => void
  priority?: boolean
}> = React.memo(({ section, language, onInViewChange, priority = false }) => {
  const shouldReduceMotion = useReducedMotion()
  
  const { ref, inView } = useIntersectionObserver({
    threshold: 0.15,
    triggerOnce: false,
    rootMargin: priority ? '200px' : '100px'
  })

  useEffect(() => {
    onInViewChange(section.id, inView)
  }, [inView, section.id, onInViewChange])

  const sectionVariants = useMemo(() => ({
    hidden: { 
      opacity: 0, 
      y: shouldReduceMotion ? 0 : 15 
    },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.05 : 0.25, // Animazioni più veloci
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [shouldReduceMotion])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={sectionVariants}
      style={{ willChange: inView ? 'transform, opacity' : 'auto' }}
    >
      <Suspense fallback={<OptimizedSectionLoader name={section.id} />}>
        <section.Component language={language} inView={inView} />
      </Suspense>
    </motion.div>
  )
})
OptimizedSection.displayName = 'OptimizedSection'

// Componente principale App
const App: React.FC = () => {
  // States principali
  const [language, setLanguage] = useLocalStorage<'it' | 'de'>('bottamedi-language', 'it')
  const [isMobileDevice, setIsMobileDevice] = useState(false)
  const [isAppReady, setIsAppReady] = useState(false)
  
  // Hooks personalizzati
  const { sectionsInView, updateSectionInView } = useSectionsInView()
  const mobileDockVisible = useMobileDockVisibility(sectionsInView)
  const mobileHeaderVisible = useMobileHeaderVisibility(sectionsInView)
  const statusBarColor = useStatusBarColor(sectionsInView)
  const shouldReduceMotion = useReducedMotion()

  // Inizializzazione app
  useEffect(() => {
    const initializeApp = async () => {
      // Detect device type
      setIsMobileDevice(isMobile())
      
      // Detect language se non salvato
      if (!getLanguageFromStorage()) {
        const browserLang = getBrowserLanguage()
        setLanguage(browserLang)
      }

      // Mark app as ready - Più veloce
      setTimeout(() => {
        setIsAppReady(true)
      }, 50)
    }

    initializeApp()
  }, [setLanguage])

  // Handler per cambio lingua
  const handleLanguageChange = useCallback((newLanguage: 'it' | 'de') => {
    setLanguage(newLanguage)
    
    // Track language change
    if (typeof window !== 'undefined' && (window as any).gtag) {
      (window as any).gtag('event', 'language_change', {
        event_category: 'user_preference',
        event_label: newLanguage,
        value: 1
      })
    }
  }, [setLanguage])

  // SEO Meta tags dinamici
  const seoTitle = useMemo(() => 
    language === 'it' 
      ? '🍎 Bottamedi Frutta e Verdura Mezzolombardo | Ingrosso HORECA e Dettaglio | 50 anni di Qualità Trentino Alto Adige'
      : '🍎 Bottamedi Obst und Gemüse Mezzolombardo | HORECA Großhandel und Einzelhandel | 50 Jahre Qualität Südtirol'
  , [language])

  const seoDescription = useMemo(() => 
    language === 'it'
      ? '🍎 Bottamedi: 50 anni di tradizione familiare nella vendita di frutta e verdura fresca a Mezzolombardo. Banchetto dettaglio e servizio ingrosso HORECA per ristoranti nel Trentino Alto Adige. Qualità garantita dal 1974.'
      : '🍎 Bottamedi: 50 Jahre Familientradition im Verkauf von frischem Obst und Gemüse in Mezzolombardo. Einzelhandel Marktstand und HORECA Großhandelsservice für Restaurants in Südtirol. Qualità garantiert seit 1974.'
  , [language])

  // Animation variants per l'app - Ottimizzati
  const appVariants = useMemo(() => ({
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: {
        duration: shouldReduceMotion ? 0.05 : 0.2,
        ease: "easeOut",
        staggerChildren: shouldReduceMotion ? 0 : 0.05
      }
    }
  }), [shouldReduceMotion])

  // Loading screen mentre app si inizializza
  if (!isAppReady) {
    return (
      <div className="fixed inset-0 bg-gradient-to-br from-green-50 to-green-100 flex items-center justify-center z-50">
        <div className="text-center">
          <motion.img
            src="/logo-bottamedi.webp"
            alt="Bottamedi Loading"
            className="w-20 h-20 mx-auto mb-4"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
          />
          <motion.div
            className="w-8 h-8 border-2 border-green-300 border-t-green-600 rounded-full animate-spin mx-auto"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.1 }}
          />
        </div>
      </div>
    )
  }

  return (
    <HelmetProvider>
      <motion.div
        className="min-h-screen bg-white overflow-x-hidden"
        initial="hidden"
        animate="visible"
        variants={appVariants}
      >
        {/* SEO Meta Tags - Accessibilità migliorata */}
        <Helmet>
          <html lang={language} />
          <title>{seoTitle}</title>
          <meta name="description" content={seoDescription} />
          <meta property="og:title" content={seoTitle} />
          <meta property="og:description" content={seoDescription} />
          <meta property="og:locale" content={language === 'it' ? 'it_IT' : 'de_IT'} />
          
          {/* Status bar dinamica per mobile */}
          <meta name="theme-color" content={statusBarColor} />
          <meta name="apple-mobile-web-app-status-bar-style" content="default" />
          
          {/* Preload critical resources */}
          <link rel="preload" href="/logo-bottamedi.webp" as="image" />
          <link rel="preload" href="/images/banchetto.webp" as="image" />
          <link rel="preload" href="/videos/hero-video-verdure-rotanti.mp4" as="video" type="video/mp4" />
          
          {/* Performance hints */}
          <link rel="dns-prefetch" href="//fonts.googleapis.com" />
          <link rel="dns-prefetch" href="//www.google-analytics.com" />
          
          {/* Viewport ottimizzato per accessibilità - RIMOSSO user-scalable=no */}
          <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
          <meta name="format-detection" content="telephone=yes" />
          <meta name="apple-mobile-web-app-capable" content="yes" />
        </Helmet>

        {/* Header - Desktop sempre, Mobile solo in Hero con sfondo trasparente */}
        {!isMobileDevice ? (
          <Header
            language={language}
            onLanguageChange={handleLanguageChange}
            isMenuOpen={false}
            onToggleMenu={() => {}}
          />
        ) : (
          <AnimatePresence>
            {mobileHeaderVisible && (
              <motion.div
                initial={{ y: -80, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                exit={{ y: -80, opacity: 0 }}
                transition={{
                  type: 'tween',
                  duration: shouldReduceMotion ? 0.05 : HEADER_FADE_SPEED / 1000,
                  ease: [0.25, 0.46, 0.45, 0.94]
                }}
                className="relative z-40 mobile-header-transparent"
                style={{
                  background: 'transparent',
                  backdropFilter: 'none'
                }}
              >
                <Header
                  language={language}
                  onLanguageChange={handleLanguageChange}
                  isMenuOpen={false}
                  onToggleMenu={() => {}}
                />
              </motion.div>
            )}
          </AnimatePresence>
        )}

        {/* Main Content */}
        <main className="relative">
          {SECTIONS.map((section, index) => (
            <OptimizedSection
              key={section.id}
              section={section}
              language={language}
              onInViewChange={updateSectionInView}
              priority={index < 2} // Prime 2 sezioni prioritarie
            />
          ))}
        </main>

        {/* Footer */}
        <Footer language={language} />

        {/* Legal Documents - FIX: Rimossa prop non esistente */}
        <LegalDocuments language={language} />

        {/* Mobile Dock - FIX: Rimossa prop non esistente */}
        {isMobileDevice && (
          <AnimatePresence>
            {mobileDockVisible && (
              <motion.div
                initial={{ y: 100, opacity: 0, scale: 0.9 }}
                animate={{ y: 0, opacity: 1, scale: 1 }}
                exit={{ y: 100, opacity: 0, scale: 0.9 }}
                transition={{ 
                  type: 'spring',
                  damping: 30,
                  stiffness: 400,
                  duration: shouldReduceMotion ? 0.05 : 0.15
                }}
                className="fixed bottom-0 left-0 right-0 z-50 pointer-events-none"
                style={{
                  willChange: 'transform, opacity',
                  touchAction: 'none'
                }}
              >
                <div className="mobile-dock-fast">
                  <MobileDock 
                    language={language} 
                    hideInFooter={false}
                  />
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        )}

        {/* Cookie Banner - Solo se necessario */}
        <CookieBanner language={language} />

        {/* Performance Monitor (solo in development) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="fixed bottom-4 right-4 bg-black/80 text-white p-2 rounded text-xs z-50 font-mono">
            <div>Sections: {Object.keys(sectionsInView).filter(k => sectionsInView[k]).join(', ')}</div>
            <div>Dock: {mobileDockVisible ? '✅' : '❌'}</div>
            <div>Header: {mobileHeaderVisible ? '✅' : '❌'}</div>
            <div>Device: {isMobileDevice ? '📱' : '🖥️'}</div>
            <div>Lang: {language}</div>
            <div>Color: <span style={{color: statusBarColor}}>●</span></div>
          </div>
        )}
      </motion.div>
    </HelmetProvider>
  )
}

export default React.memo(App)


--- FILE: src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Playfair+Display:wght@400;500;600;700;800;900&display=swap');

/* Base Styles */
@layer base {
  html {
    scroll-behavior: smooth;
  }

  body {
    font-family: 'Inter', system-ui, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Playfair Display', serif;
  }
}

/* Custom Components */
@layer components {
  .btn-primary {
    @apply bg-gradient-to-r from-brand-500 to-brand-600 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300;
  }

  .btn-secondary {
    @apply border-2 border-brand-500 text-brand-600 px-6 py-3 rounded-xl font-semibold hover:bg-brand-50 transition-all duration-300;
  }

  .card {
    @apply bg-white rounded-2xl shadow-md hover:shadow-lg transition-shadow duration-300 border border-neutral-100;
  }

  .gradient-text {
    @apply bg-gradient-to-r from-brand-600 to-accent-600 bg-clip-text text-transparent;
  }

  /* Mobile Header - Sempre Trasparente */
  .mobile-header {
    background: transparent !important;
    backdrop-filter: none !important;
    -webkit-backdrop-filter: none !important;
    border-bottom: none !important;
    box-shadow: none !important;
    transition: all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  
  .mobile-header .header-content {
    background: transparent !important;
  }

  /* Mobile Dock - Reattività 60ms */
  .mobile-dock {
    touch-action: manipulation;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
  }

  .mobile-dock button,
  .mobile-dock a,
  .mobile-dock-item {
    touch-action: manipulation;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
    transition: all 60ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .mobile-dock button:active,
  .mobile-dock a:active,
  .mobile-dock-item:active {
    transform: scale(0.95);
    transition-duration: 60ms;
  }

  /* Legal Documents - Scroll Smooth */
  .legal-modal {
    scroll-behavior: smooth;
    -webkit-scroll-behavior: smooth;
  }

  .legal-modal .close-button {
    touch-action: manipulation;
    transition: all 60ms ease;
  }

  .legal-modal .close-button:active {
    transform: scale(0.9);
  }
}

/* Custom Utilities */
@layer utilities {
  .text-shadow {
    text-shadow: 0 2px 8px rgba(0,0,0,0.3);
  }

  .backdrop-blur-custom {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }

  .will-change-transform {
    will-change: transform;
  }

  .animation-delay-100 {
    animation-delay: 0.1s;
  }

  .animation-delay-200 {
    animation-delay: 0.2s;
  }

  .animation-delay-300 {
    animation-delay: 0.3s;
  }

  /* Performance Ottimizzazioni */
  .section-container {
    will-change: auto;
    contain: layout style paint;
  }

  .section-container.in-view {
    will-change: transform, opacity;
  }

  /* Accessibilità - Contrasti Migliorati */
  .text-low-contrast {
    color: #374151 !important; /* Gray-700 invece di gray-500 per migliore contrasto */
  }

  .bg-low-contrast {
    background-color: #f3f4f6 !important; /* Gray-100 invece di gray-50 */
  }

  /* Reattività Touch Globale */
  .touch-target {
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    transition: all 60ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .touch-target:active {
    transform: scale(0.95);
    transition-duration: 60ms;
  }

  /* Status Bar Dynamic Color Support */
  .status-bar-hero { 
    --status-color: #22c55e; 
  }
  .status-bar-about { 
    --status-color: #16a34a; 
  }
  .status-bar-dettaglio { 
    --status-color: #15803d; 
  }
  .status-bar-services { 
    --status-color: #166534; 
  }
  .status-bar-products { 
    --status-color: #14532d; 
  }
  .status-bar-wholesale { 
    --status-color: #052e16; 
  }
  .status-bar-contact { 
    --status-color: #1f2937; 
  }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-neutral-100;
}

::-webkit-scrollbar-thumb {
  @apply bg-brand-400 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-brand-500;
}

/* Focus Styles - Accessibilità Migliorata */
.focus-visible:focus {
  @apply outline-none ring-2 ring-brand-500 ring-offset-2;
}

/* Focus indicators migliorati per tutti gli elementi interattivi */
button:focus-visible,
a:focus-visible,
input:focus-visible,
textarea:focus-visible,
select:focus-visible,
[tabindex]:focus-visible {
  outline: 2px solid #3b82f6 !important;
  outline-offset: 2px !important;
  border-radius: 4px;
}

/* Miglioramenti specifici per mobile */
@media (max-width: 768px) {
  /* Header mobile ottimizzazioni */
  .mobile-header-container {
    background: transparent !important;
    backdrop-filter: none !important;
    -webkit-backdrop-filter: none !important;
  }

  /* Touch targets migliorati per mobile */
  button, 
  a, 
  .clickable {
    min-height: 44px; /* Apple HIG raccomandazione */
    min-width: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Dock mobile ottimizzazioni */
  .mobile-dock-container {
    will-change: transform;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  /* Velocità animazioni mobile */
  .mobile-animation {
    animation-duration: 150ms !important;
    transition-duration: 60ms !important;
  }
}

/* Animazioni ridotte per utenti con preferenze di movimento ridotto */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
  
  .mobile-dock,
  .mobile-header,
  .section-container {
    transition: none !important;
    animation: none !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .text-low-contrast {
    color: #000000 !important;
  }
  
  .bg-low-contrast {
    background-color: #ffffff !important;
    border: 1px solid #000000;
  }
  
  button, 
  a {
    border: 2px solid currentColor !important;
  }
}

/* Dark mode preferences */
@media (prefers-color-scheme: dark) {
  .auto-dark {
    background-color: #1f2937;
    color: #f9fafb;
  }
}

/* Print Styles */
@media print {
  .no-print,
  .mobile-dock,
  .mobile-header {
    display: none !important;
  }
  
  .section-container {
    break-inside: avoid;
  }
}

/* Utilities per performance critiche */
.gpu-accelerated {
  transform: translateZ(0);
  will-change: transform;
}

.critical-render {
  content-visibility: auto;
  contain-intrinsic-size: 0 500px;
}

/* Smooth scrolling con fallback per browser vecchi */
html {
  scroll-behavior: smooth;
}

@supports not (scroll-behavior: smooth) {
  html {
    scroll-behavior: auto;
  }
}

/* Container queries per componenti responsive */
@container (max-width: 768px) {
  .container-responsive {
    padding: 1rem;
  }
}

@container (min-width: 769px) {
  .container-responsive {
    padding: 2rem;
  }
}

/* Prefers reduced transparency */
@media (prefers-reduced-transparency: reduce) {
  .backdrop-blur-custom {
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
    background-color: rgba(255, 255, 255, 0.95);
  }
}

/* Status bar dinamica per ogni sezione */
.theme-color-hero {
  background-color: #22c55e;
}

.theme-color-about {
  background-color: #16a34a;
}

.theme-color-dettaglio {
  background-color: #15803d;
}

.theme-color-services {
  background-color: #166534;
}

.theme-color-products {
  background-color: #14532d;
}

.theme-color-wholesale {
  background-color: #052e16;
}

.theme-color-contact {
  background-color: #1f2937;
}

/* Animazioni ottimizzate per mobile */
@media (max-width: 768px) {
  .mobile-optimized {
    animation-duration: 150ms !important;
    transition-duration: 60ms !important;
  }
  
  .mobile-dock-fast,
  .mobile-header {
    animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;
  }
}

/* Utilities per debugging in development */
@media screen {
  .debug-mobile-only {
    display: none;
  }
  
  @media (max-width: 768px) {
    .debug-mobile-only {
      display: block;
      position: fixed;
      bottom: 10px;
      right: 10px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 8px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 9999;
    }
  }
}

/* Smooth transitions per tutti gli elementi interattivi */
a, button, input, textarea, select {
  transition: all 60ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* Fix per input su iOS */
@supports (-webkit-touch-callout: none) {
  input, textarea, select {
    -webkit-appearance: none;
    border-radius: 0;
  }
  
  .mobile-dock-fast {
    -webkit-transform: translateZ(0);
    -webkit-backface-visibility: hidden;
  }
}


--- FILE: src/main.tsx ---
import React, { Suspense } from 'react'
import { createRoot } from 'react-dom/client'
import { MotionConfig } from 'framer-motion'
import './index.css'

// Lazy load the main App component
const App = React.lazy(() => import('./app'))

// Performance optimized loading component
const LoadingFallback = () => (
  <div className="fixed inset-0 bg-gradient-to-br from-green-50 to-green-100 flex items-center justify-center">
    <div className="relative">
      <div className="w-16 h-16 border-4 border-green-200 border-t-green-600 rounded-full animate-spin"></div>
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="w-2 h-2 bg-green-600 rounded-full animate-pulse"></div>
      </div>
    </div>
  </div>
)

// Get the root element
const container = document.getElementById('root')
if (!container) throw new Error('Failed to find the root element')

// Create root with concurrent features
const root = createRoot(container)

// Render with performance optimizations
root.render(
  <React.StrictMode>
    <MotionConfig
      transition={{
        type: "tween",
        duration: 0.3,
        ease: "easeOut"
      }}
      reducedMotion="user"
    >
      <Suspense fallback={<LoadingFallback />}>
        <App />
      </Suspense>
    </MotionConfig>
  </React.StrictMode>
)


--- FILE: src/utils/animations.ts ---
import { Variants } from 'framer-motion'

// Common animation variants
export const fadeInUp: Variants = {
  hidden: {
    opacity: 0,
    y: 60,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const fadeInDown: Variants = {
  hidden: {
    opacity: 0,
    y: -60,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const fadeInLeft: Variants = {
  hidden: {
    opacity: 0,
    x: -60,
  },
  visible: {
    opacity: 1,
    x: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const fadeInRight: Variants = {
  hidden: {
    opacity: 0,
    x: 60,
  },
  visible: {
    opacity: 1,
    x: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const scaleIn: Variants = {
  hidden: {
    opacity: 0,
    scale: 0.8,
  },
  visible: {
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const slideInUp: Variants = {
  hidden: {
    y: '100%',
    opacity: 0,
  },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.8,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Stagger animations
export const staggerContainer: Variants = {
  hidden: {},
  visible: {
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.3,
    },
  },
}

export const staggerItem: Variants = {
  hidden: {
    opacity: 0,
    y: 20,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Text animations
export const textReveal: Variants = {
  hidden: {
    y: '100%',
    opacity: 0,
  },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.8,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const letterReveal: Variants = {
  hidden: {
    opacity: 0,
    y: 50,
    rotateX: -90,
  },
  visible: {
    opacity: 1,
    y: 0,
    rotateX: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Hover animations
export const magneticHover = {
  scale: 1.05,
  y: -5,
  transition:{
    duration: 0.3,
    ease: [0.25, 0.46, 0.45, 0.94],
  },
}

export const buttonHover = {
  scale: 1.02,
  y: -2,
  boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.15)',
  transition: {
    duration: 0.2,
    ease: 'easeOut',
  },
}

export const cardHover = {
  y: -10,
  scale: 1.02,
  boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
  transition: {
    duration: 0.3,
    ease: [0.25, 0.46, 0.45, 0.94],
  },
}

// Page transitions
export const pageTransition: Variants = {
  initial: {
    opacity: 0,
    y: 20,
  },
  in: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
  out: {
    opacity: 0,
    y: -20,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

// Loading animations
export const spinner = {
  animate: {
    rotate: 360,
    transition: {
      duration: 1,
      repeat: Infinity,
      ease: 'linear',
    },
  },
}

export const pulse = {
  animate: {
    scale: [1, 1.05, 1],
    opacity: [1, 0.8, 1],
    transition: {
      duration: 2,
      repeat: Infinity,
      ease: 'easeInOut',
    },
  },
}

// Parallax helper
export const createParallaxVariants = (strength: number = 50) => ({
  hidden: { y: 0 },
  visible: { y: -strength },
})

// Morphing animations
export const morphButton: Variants = {
  idle: {
    borderRadius: '24px',
    scale: 1,
  },
  hover: {
    borderRadius: '32px',
    scale: 1.05,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
  tap: {
    scale: 0.95,
    transition: {
      duration: 0.1,
    },
  },
}

// Timeline animations
export const timelineVariants: Variants = {
  hidden: {
    scaleY: 0,
    originY: 0,
  },
  visible: {
    scaleY: 1,
    transition: {
      duration: 1.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const timelineItemVariants: Variants = {
  hidden: {
    opacity: 0,
    x: -50,
  },
  visible: (i: number) => ({
    opacity: 1,
    x: 0,
    transition: {
      delay: i * 0.3,
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  }),
}

// Gallery animations
export const galleryItemVariants: Variants = {
  hidden: {
    opacity: 0,
    scale: 0.8,
    y: 20,
  },
  visible: (i: number) => ({
    opacity: 1,
    scale: 1,
    y: 0,
    transition: {
      delay: i * 0.1,
      duration: 0.5,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  }),
}

// Navigation animations
export const menuSlide: Variants = {
  closed: {
    x: '-100%',
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
  open: {
    x: 0,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
}

export const menuItemSlide: Variants = {
  closed: {
    x: -20,
    opacity: 0,
  },
  open: (i: number) => ({
    x: 0,
    opacity: 1,
    transition: {
      delay: i * 0.1,
      duration: 0.3,
    },
  }),
}

// Custom easing curves
export const easings = {
  easeInOutCubic: [0.25, 0.46, 0.45, 0.94],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeOutExpo: [0.19, 1, 0.22, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6],
}

// Animation configuration
export const animationConfig = {
  fast: { duration: 0.2 },
  normal: { duration: 0.3 },
  slow: { duration: 0.5 },
  slower: { duration: 0.8 },
}

// Utility functions
export const createStaggerAnimation = (
  delay: number = 0.1,
  delayChildren: number = 0
) => ({
  hidden: {},
  visible: {
    transition: {
      staggerChildren: delay,
      delayChildren,
    },
  },
})

export const createSlideAnimation = (
  direction: 'up' | 'down' | 'left' | 'right' = 'up',
  distance: number = 60
) => {
  const directions = {
    up: { y: distance },
    down: { y: -distance },
    left: { x: distance },
    right: { x: -distance },
  }

  return {
    hidden: {
      opacity: 0,
      ...directions[direction],
    },
    visible: {
      opacity: 1,
      x: 0,
      y: 0,
      transition: {
        duration: 0.6,
        ease: easings.easeInOutCubic,
      },
    },
  }
}

export const createScaleAnimation = (
  initialScale: number = 0.8,
  finalScale: number = 1
) => ({
  hidden: {
    opacity: 0,
    scale: initialScale,
  },
  visible: {
    opacity: 1,
    scale: finalScale,
    transition: {
      duration: 0.5,
      ease: easings.easeOutQuart,
    },
  },
})

// Page-specific animations
export const heroAnimations = {
  title: {
    hidden: { opacity: 0, y: 100, scale: 0.8 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        duration: 0.8,
        ease: easings.easeInOutCubic,
        staggerChildren: 0.1,
      },
    },
  },
  subtitle: {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        delay: 0.5,
        duration: 0.8,
        ease: easings.easeInOutCubic,
      },
    },
  },
}

export const sectionAnimations = {
  container: staggerContainer,
  item: staggerItem,
  title: fadeInUp,
  subtitle: fadeInUp,
}

// Export all animations
export const animations = {
  fadeInUp,
  fadeInDown,
  fadeInLeft,
  fadeInRight,
  scaleIn,
  slideInUp,
  staggerContainer,
  staggerItem,
  textReveal,
  letterReveal,
  magneticHover,
  buttonHover,
  cardHover,
  pageTransition,
  spinner,
  pulse,
  morphButton,
  timelineVariants,
  timelineItemVariants,
  galleryItemVariants,
  menuSlide,
  menuItemSlide,
  heroAnimations,
  sectionAnimations,
}

export default animations

--- FILE: src/utils/constants.ts ---
// Company Information
export const COMPANY_INFO = {
  name: 'BOTTAMEDI',
  fullName: 'Frutta e Verdura di Pierluigi Bottamedi',
  tagline: {
    it: 'Dal 1974, la passione per la qualità',
    de: 'Seit 1974, Leidenschaft für Qualität'
  },
  description: {
    it: 'Cinquant\'anni di eccellenza nell\'ortofrutta. Freschezza quotidiana e qualità superiore dal cuore del Trentino Alto Adige.',
    de: 'Fünfzig Jahre Exzellenz in Obst und Gemüse. Tägliche Frische und höchste Qualität aus dem Herzen Südtirols.'
  },
  foundedYear: 1974,
  vatNumber: '02273530226'
} as const

// Contact Information
export const CONTACT_INFO = {
  retail: {
    name: {
      it: 'Banchetto (Dettaglio)',
      de: 'Marktstand (Detail)'
    },
    address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
    phone: '351 577 6198',
    phoneFormatted: '+39 351 577 6198',
    email: 'bottamedipierluigi@virgilio.it',
    hours: {
      it: 'Lun-Sab: 07:00-19:30',
      de: 'Mo-Sa: 07:00-19:30'
    },
    coordinates: {
      lat: 46.210472,
      lng: 11.097015
    },
    googleMapsUrl: 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN'
  },
  horeca: {
    name: {
      it: 'Ingrosso HORECA',
      de: 'Großhandel HORECA'
    },
    address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
    phone: '0461 602534',
    phoneFormatted: '+39 0461 602534',
    email: 'bottamedipierluigi@virgilio.it',
    coordinates: {
      lat: 46.213210,
      lng: 11.098930
    },
    googleMapsUrl: 'https://www.google.com/maps/search/?api=1&query=Bottamedi+Ingrosso+Ortofrutta+Via+Alcide+de+Gasperi+47+Mezzolombardo'
  },
  general: {
    email: 'bottamedipierluigi@virgilio.it',
    website: 'https://www.bottamedi.eu'
  }
} as const

// Social Media
export const SOCIAL_MEDIA = {
  facebook: {
    url: 'https://www.facebook.com/profile.php?id=100063456281899',
    handle: '@bottamedi'
  },
  instagram: {
    url: 'https://instagram.com/banchetto.bottamedi',
    handle: '@banchetto.bottamedi'
  },
  whatsapp: {
    url: 'https://wa.me/393515776198',
    number: '+39 351 577 6198'
  }
} as const

// Navigation - SEZIONI CORRETTE
export const NAVIGATION = {
  items: [
    { id: 'hero', label: { it: 'Home', de: 'Home' } },
    { id: 'about', label: { it: 'La Nostra Storia', de: 'Unsere Geschichte' } },
    { id: 'dettaglio', label: { it: 'Al Banchetto', de: 'Marktstand' } }, // CORRETTO
    { id: 'services', label: { it: 'Servizi', de: 'Dienstleistungen' } },
    { id: 'products', label: { it: 'Prodotti', de: 'Produkte' } },
    { id: 'contact', label: { it: 'Contatti', de: 'Kontakt' } }
  ]
} as const

// Validation Rules - AGGIUNTO
export const VALIDATION_RULES = {
  email: {
    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    message: {
      it: 'Email non valida',
      de: 'Ungültige E-Mail'
    }
  },
  phone: {
    pattern: /^[\+]?[0-9\s\-\(\)]{8,15}$/,
    message: {
      it: 'Numero di telefono non valido',
      de: 'Ungültige Telefonnummer'
    }
  },
  name: {
    minLength: 2,
    maxLength: 50,
    pattern: /^[a-zA-ZÀ-ÿ\s\-']+$/,
    message: {
      it: 'Nome non valido',
      de: 'Ungültiger Name'
    }
  },
  message: {
    minLength: 10,
    maxLength: 1000,
    message: {
      it: 'Messaggio troppo breve o lungo',
      de: 'Nachricht zu kurz oder zu lang'
    }
  }
} as const

// Products Categories
export const PRODUCT_CATEGORIES = {
  seasonal: {
    id: 'seasonal',
    name: { it: 'Frutta di Stagione', de: 'Saisonales Obst' },
    icon: '🍎',
    color: 'from-red-500 to-pink-500'
  },
  vegetables: {
    id: 'vegetables',
    name: { it: 'Verdure Fresche', de: 'Frisches Gemüse' },
    icon: '🥕',
    color: 'from-green-500 to-emerald-500'
  },
  specialty: {
    id: 'specialty',
    name: { it: 'Specialità', de: 'Spezialitäten' },
    icon: '✨',
    color: 'from-amber-500 to-orange-500'
  }
} as const

// Services
export const SERVICES = {
  retail: {
    id: 'retail',
    title: { it: 'Vendita al Dettaglio', de: 'Einzelhandel' },
    icon: '🛒',
    color: 'from-brand-500 to-brand-600'
  },
  horeca: {
    id: 'horeca',
    title: { it: 'Servizi HORECA', de: 'HORECA-Service' },
    icon: '🏨',
    color: 'from-accent-500 to-accent-600'
  },
  consulting: {
    id: 'consulting',
    title: { it: 'Consulenza Specializzata', de: 'Fachberatung' },
    icon: '💡',
    color: 'from-emerald-500 to-emerald-600'
  }
} as const

// SEO Meta Data
export const SEO_META = {
  title: {
    it: 'Bottamedi Frutta e Verdura Mezzolombardo | Ingrosso e Dettaglio Trentino Alto Adige',
    de: 'Bottamedi Obst und Gemüse Mezzolombardo | Großhandel und Einzelhandel Südtirol'
  },
  description: {
    it: 'Bottamedi: da 50 anni qualità e freschezza in frutta e verdura a Mezzolombardo. Servizio ingrosso HORECA in Trentino Alto Adige e vendita al dettaglio al Banchetto.',
    de: 'Bottamedi: seit 50 Jahren Qualität und Frische bei Obst und Gemüse in Mezzolombardo. HORECA-Großhandelsservice in Südtirol und Einzelhandel am Marktstand.'
  },
  keywords: {
    it: 'frutta e verdura, mezzolombardo, trentino alto adige, ingrosso ortofrutta, dettaglio frutta verdura, Bottamedi, prodotti freschi, qualità, famiglia, HORECA, ristoranti, hotel, catering, Melinda, prodotti tipici trentini, consegna frutta verdura, ingrosso alimentari trentino',
    de: 'obst und gemüse, mezzolombardo, südtirol, trentino, großhandel obst gemüse, einzelhandel obst gemüse, Bottamedi, frische produkte, qualität, familie, HORECA, restaurants, hotels, catering, Melinda, typische südtiroler produkte, obst gemüse lieferung, lebensmittel großhandel südtirol'
  },
  ogImage: '/images/banco_varieta_autunno.webp'
} as const

// Timeline Data
export const TIMELINE_DATA = {
  items: [
    {
      year: '1974',
      title: { 
        it: 'Le Radici del Sapore', 
        de: 'Die Wurzeln des Geschmacks' 
      },
      description: {
        it: 'Tutto ha inizio con nonno Luigi. Con dedizione e rispetto per la terra del Trentino Alto Adige, piantò il seme di un\'attività basata sulla qualità e fiducia.',
        de: 'Alles beginnt mit Großvater Luigi. Mit Hingabe und Respekt für das Südtiroler Land pflanzte er den Samen eines Geschäfts, das auf Qualität und Vertrauen basiert.'
      },
      image: '/images/melinda_golden.webp'
    },
    {
      year: '1990',
      title: { 
        it: 'L\'Orizzonte si Allarga', 
        de: 'Der Horizont erweitert sich' 
      },
      description: {
        it: 'L\'eredità cresce con papà Giovanni. Albe ai mercati, ricerca delle primizie migliori, consolidamento dei rapporti: il servizio si struttura.',
        de: 'Das Erbe wächst mit Vater Giovanni. Frühe Morgenstunden auf den Märkten, Suche nach den besten Früchten, Festigung der Beziehungen: der Service strukturiert sich.'
      },
      image: '/images/pomodori_cuore_bue.webp'
    },
    {
      year: 'Oggi',
      title: { 
        it: 'Il Futuro nelle Nostre Mani', 
        de: 'Die Zukunft in unseren Händen' 
      },
      description: {
        it: 'Oggi, Pierluigi e la famiglia Bottamedi continuano la tradizione, unendo esperienza e innovazione per il futuro dell\'ortofrutta del Trentino Alto Adige.',
        de: 'Heute führen Pierluigi und die Familie Bottamedi die Tradition fort und verbinden Erfahrung mit Innovation für die Zukunft des Südtiroler Obst- und Gemüsesektors.'
      },
      image: '/images/kiwi-cuore.webp'
    }
  ]
} as const

// Values Data
export const VALUES_DATA = {
  items: [
    {
      icon: '🌱',
      title: { it: 'Freschezza', de: 'Frische' },
      description: {
        it: 'Selezioniamo quotidianamente solo i prodotti migliori',
        de: 'Wir wählen täglich nur die besten Produkte aus'
      }
    },
    {
      icon: '⭐',
      title: { it: 'Qualità', de: 'Qualität' },
      description: {
        it: 'Standard elevati garantiti da tre generazioni di esperienza',
        de: 'Hohe Standards garantiert durch drei Generationen Erfahrung'
      }
    },
    {
      icon: '❤️',
      title: { it: 'Passione', de: 'Leidenschaft' },
      description: {
        it: 'L\'amore per il nostro lavoro si riflette in ogni prodotto',
        de: 'Die Liebe zu unserer Arbeit spiegelt sich in jedem Produkt wider'
      }
    },
    {
      icon: '🏔️',
      title: { it: 'Territorio', de: 'Territorium' },
      description: {
        it: 'Valorizziamo i sapori autentici del Trentino Alto Adige',
        de: 'Wir schätzen die authentischen Aromen Südtirols'
      }
    }
  ]
} as const

// Brand Colors
export const BRAND_COLORS = {
  primary: {
    50: '#f0fdf4',
    100: '#dcfce7',
    200: '#bbf7d0',
    300: '#86efac',
    400: '#4ade80',
    500: '#22c55e',
    600: '#16a34a',
    700: '#15803d',
    800: '#166534',
    900: '#14532d',
    950: '#052e16'
  },
  accent: {
    50: '#fffbeb',
    100: '#fef3c7',
    200: '#fde68a',
    300: '#fcd34d',
    400: '#fbbf24',
    500: '#f59e0b',
    600: '#d97706',
    700: '#b45309',
    800: '#92400e',
    900: '#78350f',
    950: '#451a03'
  }
} as const

// Animation Durations - OTTIMIZZATI
export const ANIMATION_DURATION = {
  fast: 150,
  normal: 250,
  slow: 400,
  slower: 600
} as const

// Breakpoints
export const BREAKPOINTS = {
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px'
} as const

// Z-Index Layers
export const Z_INDEX = {
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  modal: 1040,
  popover: 1050,
  tooltip: 1060,
  toast: 1070
} as const

// Local Storage Keys
export const STORAGE_KEYS = {
  language: 'bottamedi-language',
  theme: 'bottamedi-theme',
  newsletter: 'bottamedi-newsletter-subscribed',
  cookieConsent: 'bottamedi-cookie-consent'
} as const

// Performance Thresholds
export const PERFORMANCE_THRESHOLDS = {
  loadTime: {
    good: 1000,
    needsImprovement: 1500,
    poor: 2500
  },
  firstContentfulPaint: {
    good: 1200,
    needsImprovement: 2000,
    poor: 3000
  },
  largestContentfulPaint: {
    good: 1800,
    needsImprovement: 2500,
    poor: 3500
  },
  cumulativeLayoutShift: {
    good: 0.1,
    needsImprovement: 0.25,
    poor: 0.25
  }
} as const

// Feature Flags - OTTIMIZZATI
export const FEATURE_FLAGS = {
  enableAnalytics: false, // Disabilitato in dev
  enableNewsletter: true,
  enableCookieConsent: false, // Disabilitato in dev
  enableParticles: false, // Disabilitato per performance
  enableAnimations: true,
  enableLazyLoading: true,
  enableServiceWorker: false, // Disabilitato in dev
  enableOfflineMode: false,
  enableDarkMode: false
} as const

// Default Export
export default {
  COMPANY_INFO,
  CONTACT_INFO,
  SOCIAL_MEDIA,
  NAVIGATION,
  PRODUCT_CATEGORIES,
  SERVICES,
  BRAND_COLORS,
  ANIMATION_DURATION,
  BREAKPOINTS,
  Z_INDEX,
  STORAGE_KEYS,
  SEO_META,
  TIMELINE_DATA,
  VALUES_DATA,
  PERFORMANCE_THRESHOLDS,
  FEATURE_FLAGS,
  VALIDATION_RULES
} as const

--- FILE: src/utils/haptics.ts ---
// utils/haptics.ts - Sistema Haptic Feedback COMPLETO per iOS + Android

interface HapticPattern {
  pattern: number[];
  description: string;
  fallback?: 'visual' | 'audio' | 'both';
}

class UniversalHapticManager {
  private isSupported: boolean = false;
  private isEnabled: boolean = true;
  private lastTrigger: number = 0;
  private minInterval: number = 50;
  private userInteracted: boolean = false;
  private isIOS: boolean = false;
  private isAndroid: boolean = false;
  private audioContext: AudioContext | null = null;
  
  public patterns: Record<string, HapticPattern> = {
    // Pattern ottimizzati per tutti i dispositivi
    tap: {
      pattern: [10],
      description: 'Tap leggero',
      fallback: 'visual'
    },
    selection: {
      pattern: [15],
      description: 'Selezione elemento',
      fallback: 'visual'
    },
    button: {
      pattern: [25],
      description: 'Pressione bottone',
      fallback: 'both'
    },
    toggle: {
      pattern: [30],
      description: 'Toggle menu',
      fallback: 'visual'
    },
    success: {
      pattern: [20, 15, 25],
      description: 'Azione completata',
      fallback: 'both'
    },
    error: {
      pattern: [50, 50],
      description: 'Errore',
      fallback: 'both'
    },
    notification: {
      pattern: [15, 20, 25],
      description: 'Notifica',
      fallback: 'audio'
    }
  };

  constructor() {
    this.detectDevice();
    this.checkSupport();
    this.setupUserInteractionDetection();
    this.initializeAlternatives();
  }

  private detectDevice(): void {
    const userAgent = navigator.userAgent.toLowerCase();
    this.isIOS = /iphone|ipad|ipod/.test(userAgent);
    this.isAndroid = /android/.test(userAgent);
    
    console.log(`📱 Device: ${this.isIOS ? 'iOS' : this.isAndroid ? 'Android' : 'Desktop'}`);
  }

  private checkSupport(): void {
    this.isSupported = 'vibrate' in navigator && typeof navigator.vibrate === 'function';
    
    if (this.isIOS) {
      // iOS non supporta vibration API
      this.isSupported = false;
      console.log('🍎 iOS: Vibration API non supportata - usando alternative');
    }
    
    console.log(`🎯 Haptic Support: ${this.isSupported ? 'YES' : 'NO'}`);
  }

  private initializeAlternatives(): void {
    // Initialize audio context per iOS feedback audio
    if (this.isIOS) {
      try {
        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      } catch (e) {
        console.log('🍎 Audio context non disponibile');
      }
    }

    // Add CSS for visual feedback
    this.addFeedbackCSS();
  }

  private addFeedbackCSS(): void {
    const css = `
      @keyframes haptic-ripple {
        0% {
          transform: scale(0);
          opacity: 0.6;
        }
        100% {
          transform: scale(1.5);
          opacity: 0;
        }
      }
      
      @keyframes haptic-pulse {
        0%, 100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
      }
      
      .haptic-ripple {
        position: absolute;
        border-radius: 50%;
        pointer-events: none;
        z-index: 9999;
        animation: haptic-ripple 0.3s ease-out;
      }
      
      .haptic-pulse {
        animation: haptic-pulse 0.2s ease-out;
      }
    `;

    if (!document.getElementById('haptic-styles')) {
      const style = document.createElement('style');
      style.id = 'haptic-styles';
      style.textContent = css;
      document.head.appendChild(style);
    }
  }

  private setupUserInteractionDetection(): void {
    const markUserInteraction = () => {
      if (!this.userInteracted) {
        this.userInteracted = true;
        console.log('🎯 User interaction detected');
        
        // Test immediato per verificare funzionamento
        if (this.isSupported) {
          setTimeout(() => this.triggerHaptic([25]), 100);
        } else if (this.isIOS) {
          console.log('🍎 iOS: Using visual/audio feedback instead of vibration');
        }
      }
    };

    const events = ['click', 'touchstart', 'touchend', 'mousedown', 'keydown'];
    events.forEach(event => {
      document.addEventListener(event, markUserInteraction, { 
        once: false,
        passive: true 
      });
    });
  }

  // Haptic nativo (Android/device che supportano)
  private triggerHaptic(pattern: number[]): boolean {
    if (!this.isSupported || !this.userInteracted) {
      return false;
    }

    try {
      const success = navigator.vibrate(pattern);
      if (success) {
        console.log(`🎯 Haptic success: ${pattern}`);
      }
      return success;
    } catch (error) {
      console.warn('🎯 Haptic error:', error);
      return false;
    }
  }

  // Audio feedback per iOS
  private playAudioFeedback(frequency: number = 800, duration: number = 50): void {
    if (!this.audioContext || !this.userInteracted) return;

    try {
      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      oscillator.frequency.value = frequency;
      oscillator.type = 'sine';

      gainNode.gain.setValueAtTime(0.05, this.audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);

      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + duration / 1000);
    } catch (e) {
      console.log('🍎 Audio feedback fallito');
    }
  }

  // Visual feedback per tutti i dispositivi
  private createVisualFeedback(element?: HTMLElement, type: string = 'tap'): void {
    if (!element) return;

    const colors = {
      tap: '#22c55e',
      button: '#3b82f6',
      success: '#10b981',
      error: '#ef4444',
      notification: '#f59e0b'
    };

    // Ripple effect
    const ripple = document.createElement('div');
    ripple.className = 'haptic-ripple';
    ripple.style.cssText = `
      background: ${colors[type as keyof typeof colors] || colors.tap};
      width: 20px;
      height: 20px;
    `;

    const rect = element.getBoundingClientRect();
    ripple.style.left = (rect.left + rect.width / 2 - 10) + 'px';
    ripple.style.top = (rect.top + rect.height / 2 - 10) + 'px';

    document.body.appendChild(ripple);

    // Cleanup
    setTimeout(() => {
      if (ripple.parentNode) {
        ripple.parentNode.removeChild(ripple);
      }
    }, 300);

    // Pulse effect sull'elemento
    element.classList.add('haptic-pulse');
    setTimeout(() => {
      element.classList.remove('haptic-pulse');
    }, 200);
  }

  // API pubblica principale
  public trigger(type: keyof typeof this.patterns, element?: HTMLElement): boolean {
    if (!this.isEnabled) return false;

    const now = Date.now();
    if (now - this.lastTrigger < this.minInterval) {
      return false;
    }

    const pattern = this.patterns[type];
    if (!pattern) {
      console.warn(`🎯 Pattern "${type}" non trovato`);
      return false;
    }

    let success = false;

    // Prova haptic nativo
    if (this.isSupported && this.userInteracted) {
      success = this.triggerHaptic(pattern.pattern);
    }

    // Fallback per iOS e dispositivi non supportati
    if (!success || this.isIOS) {
      const fallback = pattern.fallback || 'visual';
      
      if (fallback === 'visual' || fallback === 'both') {
        this.createVisualFeedback(element, type);
        success = true;
      }
      
      if (fallback === 'audio' || fallback === 'both') {
        if (this.isIOS) {
          const frequencies = {
            tap: 800,
            button: 1000,
            success: 1200,
            error: 400,
            notification: 900
          };
          this.playAudioFeedback(frequencies[type as keyof typeof frequencies] || 800, 30);
          success = true;
        }
      }
    }

    if (success) {
      this.lastTrigger = now;
    }

    return success;
  }

  public triggerCustom(pattern: number[], element?: HTMLElement): boolean {
    if (!this.isSupported || !this.userInteracted) {
      if (element) {
        this.createVisualFeedback(element, 'tap');
        return true;
      }
      return false;
    }

    return this.triggerHaptic(pattern);
  }

  public stop(): void {
    if (this.isSupported) {
      try {
        navigator.vibrate(0);
      } catch (error) {
        console.warn('🎯 Stop error:', error);
      }
    }
  }

  public enable(): void {
    this.isEnabled = true;
  }

  public disable(): void {
    this.isEnabled = false;
    this.stop();
  }

  // Getters
  public getSupport(): boolean {
    return this.isSupported;
  }

  public getEnabled(): boolean {
    return this.isEnabled;
  }

  public getUserInteracted(): boolean {
    return this.userInteracted;
  }

  public isIOSDevice(): boolean {
    return this.isIOS;
  }

  public isAndroidDevice(): boolean {
    return this.isAndroid;
  }

  public getPatterns(): Record<string, HapticPattern> {
    return { ...this.patterns };
  }
}

// Istanza globale
export const haptic = new UniversalHapticManager();

// React hook con supporto completo
export const useHaptic = () => {
  const trigger = (type: keyof typeof haptic.patterns, element?: HTMLElement) => {
    return haptic.trigger(type, element);
  };

  const triggerCustom = (pattern: number[], element?: HTMLElement) => {
    return haptic.triggerCustom(pattern, element);
  };

  return {
    trigger,
    triggerCustom,
    stop: () => haptic.stop(),
    enable: () => haptic.enable(),
    disable: () => haptic.disable(),
    isSupported: haptic.getSupport(),
    isEnabled: haptic.getEnabled(),
    isIOS: haptic.isIOSDevice(),
    isAndroid: haptic.isAndroidDevice(),
    userInteracted: haptic.getUserInteracted(),
    patterns: haptic.getPatterns()
  };
};

// Utility per elementi DOM
export const addHapticToElement = (
  element: HTMLElement, 
  hapticType: keyof typeof haptic.patterns = 'button',
  eventType: string = 'click'
): (() => void) => {
  const handler = (e: Event) => {
    if (!element.hasAttribute('disabled')) {
      haptic.trigger(hapticType, element);
    }
  };
  
  element.addEventListener(eventType, handler);
  
  return () => {
    element.removeEventListener(eventType, handler);
  };
};

export default haptic;
export type { HapticPattern };
export type HapticType = keyof typeof haptic.patterns;


--- FILE: src/utils/helpers.ts ---
import { VALIDATION_RULES, STORAGE_KEYS } from './constants'

// String utilities
export const capitalizeFirst = (str: string): string => {
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()
}

export const capitalizeWords = (str: string): string => {
  return str.replace(/\w\S*/g, (txt) => 
    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
  )
}

export const slugify = (str: string): string => {
  return str
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '') // Remove special characters
    .replace(/[\s_-]+/g, '-') // Replace spaces and underscores with hyphens
    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
}

export const truncateText = (text: string, maxLength: number, suffix = '...'): string => {
  if (text.length <= maxLength) return text
  return text.substring(0, maxLength - suffix.length) + suffix
}

export const stripHtml = (html: string): string => {
  if (typeof document === 'undefined') return html // SSR safety
  const div = document.createElement('div')
  div.innerHTML = html
  return div.textContent || div.innerText || ''
}

// Number utilities
export const formatPrice = (price: number, currency = '€'): string => {
  return new Intl.NumberFormat('it-IT', {
    style: 'currency',
    currency: currency === '€' ? 'EUR' : currency,
  }).format(price)
}

export const formatNumber = (num: number, locale = 'it-IT'): string => {
  return new Intl.NumberFormat(locale).format(num)
}

export const clamp = (value: number, min: number, max: number): number => {
  return Math.min(Math.max(value, min), max)
}

export const roundToDecimals = (num: number, decimals: number): number => {
  return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals)
}

export const generateRandomId = (length = 8): string => {
  return Math.random().toString(36).substring(2, 2 + length)
}

// Date utilities
export const formatDate = (date: Date | string, locale = 'it-IT'): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return new Intl.DateTimeFormat(locale, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(dateObj)
}

export const formatTime = (date: Date | string, locale = 'it-IT'): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return new Intl.DateTimeFormat(locale, {
    hour: '2-digit',
    minute: '2-digit',
  }).format(dateObj)
}

export const formatDateTime = (date: Date | string, locale = 'it-IT'): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return new Intl.DateTimeFormat(locale, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  }).format(dateObj)
}

export const isToday = (date: Date | string): boolean => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  const today = new Date()
  return dateObj.toDateString() === today.toDateString()
}

export const daysSince = (date: Date | string): number => {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  const today = new Date()
  const diffTime = Math.abs(today.getTime() - dateObj.getTime())
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24))
}

// Validation utilities
export const validateEmail = (email: string): boolean => {
  return VALIDATION_RULES.email.pattern.test(email)
}

export const validatePhone = (phone: string): boolean => {
  return VALIDATION_RULES.phone.pattern.test(phone)
}

export const validateName = (name: string): boolean => {
  return name.length >= VALIDATION_RULES.name.minLength && 
         name.length <= VALIDATION_RULES.name.maxLength &&
         VALIDATION_RULES.name.pattern.test(name)
}

export const validateMessage = (message: string): boolean => {
  return message.length >= VALIDATION_RULES.message.minLength && 
         message.length <= VALIDATION_RULES.message.maxLength
}

// URL utilities
export const isValidUrl = (url: string): boolean => {
  try {
    new URL(url)
    return true
  } catch {
    return false
  }
}

export const getUrlParams = (url = window?.location?.href || ''): URLSearchParams => {
  if (typeof window === 'undefined') return new URLSearchParams()
  return new URL(url).searchParams
}

export const buildUrl = (base: string, params: Record<string, string>): string => {
  const url = new URL(base)
  Object.entries(params).forEach(([key, value]) => {
    url.searchParams.set(key, value)
  })
  return url.toString()
}

export const getBaseDomain = (url: string): string => {
  try {
    return new URL(url).hostname
  } catch {
    return ''
  }
}

// Local Storage utilities
export const setLocalStorage = (key: string, value: any): void => {
  if (typeof window === 'undefined') return
  try {
    localStorage.setItem(key, JSON.stringify(value))
  } catch (error) {
    console.warn('Failed to save to localStorage:', error)
  }
}

export const getLocalStorage = <T>(key: string, defaultValue: T): T => {
  if (typeof window === 'undefined') return defaultValue
  try {
    const item = localStorage.getItem(key)
    return item ? JSON.parse(item) : defaultValue
  } catch (error) {
    console.warn('Failed to read from localStorage:', error)
    return defaultValue
  }
}

export const removeLocalStorage = (key: string): void => {
  if (typeof window === 'undefined') return
  try {
    localStorage.removeItem(key)
  } catch (error) {
    console.warn('Failed to remove from localStorage:', error)
  }
}

export const clearLocalStorage = (): void => {
  if (typeof window === 'undefined') return
  try {
    localStorage.clear()
  } catch (error) {
    console.warn('Failed to clear localStorage:', error)
  }
}

// Session Storage utilities
export const setSessionStorage = (key: string, value: any): void => {
  if (typeof window === 'undefined') return
  try {
    sessionStorage.setItem(key, JSON.stringify(value))
  } catch (error) {
    console.warn('Failed to save to sessionStorage:', error)
  }
}

export const getSessionStorage = <T>(key: string, defaultValue: T): T => {
  if (typeof window === 'undefined') return defaultValue
  try {
    const item = sessionStorage.getItem(key)
    return item ? JSON.parse(item) : defaultValue
  } catch (error) {
    console.warn('Failed to read from sessionStorage:', error)
    return defaultValue
  }
}

// Cookie utilities
export const setCookie = (name: string, value: string, days: number): void => {
  if (typeof document === 'undefined') return
  const expires = new Date()
  expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000)
  document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict`
}

export const getCookie = (name: string): string | null => {
  if (typeof document === 'undefined') return null
  const nameEQ = name + '='
  const ca = document.cookie.split(';')
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i]
    while (c.charAt(0) === ' ') c = c.substring(1, c.length)
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length)
  }
  return null
}

export const deleteCookie = (name: string): void => {
  setCookie(name, '', -1)
}

// Array utilities
export const shuffle = <T>(array: T[]): T[] => {
  const shuffled = [...array]
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
  }
  return shuffled
}

export const chunk = <T>(array: T[], size: number): T[][] => {
  const chunks: T[][] = []
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size))
  }
  return chunks
}

export const unique = <T>(array: T[]): T[] => {
  return [...new Set(array)]
}

export const groupBy = <T>(array: T[], key: keyof T): Record<string, T[]> => {
  return array.reduce((groups, item) => {
    const group = String(item[key])
    groups[group] = groups[group] || []
    groups[group].push(item)
    return groups
  }, {} as Record<string, T[]>)
}

export const sortBy = <T>(array: T[], key: keyof T, direction: 'asc' | 'desc' = 'asc'): T[] => {
  return [...array].sort((a, b) => {
    const aVal = a[key]
    const bVal = b[key]
    
    if (aVal < bVal) return direction === 'asc' ? -1 : 1
    if (aVal > bVal) return direction === 'asc' ? 1 : -1
    return 0
  })
}

// Object utilities
export const pick = <T, K extends keyof T>(obj: T, keys: K[]): Pick<T, K> => {
  const result = {} as Pick<T, K>
  keys.forEach(key => {
    if (key in obj) {
      result[key] = obj[key]
    }
  })
  return result
}

export const omit = <T, K extends keyof T>(obj: T, keys: K[]): Omit<T, K> => {
  const result = { ...obj }
  keys.forEach(key => {
    delete result[key]
  })
  return result
}

export const deepClone = <T>(obj: T): T => {
  if (obj === null || typeof obj !== 'object') return obj
  if (obj instanceof Date) return new Date(obj.getTime()) as unknown as T
  if (obj instanceof Array) return obj.map(item => deepClone(item)) as unknown as T
  if (typeof obj === 'object') {
    const clonedObj = {} as T
    Object.keys(obj).forEach(key => {
      (clonedObj as any)[key] = deepClone((obj as any)[key])
    })
    return clonedObj
  }
  return obj
}

export const isEmpty = (value: any): boolean => {
  if (value == null) return true
  if (typeof value === 'string') return value.trim().length === 0
  if (Array.isArray(value)) return value.length === 0
  if (typeof value === 'object') return Object.keys(value).length === 0
  return false
}

// DOM utilities
export const scrollToElement = (elementId: string, offset = 0): void => {
  if (typeof document === 'undefined') return
  const element = document.getElementById(elementId)
  if (element) {
    const elementPosition = element.getBoundingClientRect().top + window.pageYOffset
    window.scrollTo({
      top: elementPosition - offset,
      behavior: 'smooth'
    })
  }
}

export const scrollToTop = (): void => {
  if (typeof window === 'undefined') return
  window.scrollTo({
    top: 0,
    behavior: 'smooth'
  })
}

export const getElementPosition = (element: HTMLElement): { x: number; y: number } => {
  const rect = element.getBoundingClientRect()
  return {
    x: rect.left + window.scrollX,
    y: rect.top + window.scrollY
  }
}

export const isElementInViewport = (element: HTMLElement): boolean => {
  const rect = element.getBoundingClientRect()
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
    rect.right <= (window.innerWidth || document.documentElement.clientWidth)
  )
}

export const getScrollPercentage = (): number => {
  if (typeof window === 'undefined') return 0
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop
  const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight
  return (scrollTop / scrollHeight) * 100
}

// Performance utilities
export const debounce = <T extends (...args: any[]) => any>(
  func: T,
  wait: number
): ((...args: Parameters<T>) => void) => {
  let timeout: NodeJS.Timeout | null = null
  
  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

export const throttle = <T extends (...args: any[]) => any>(
  func: T,
  limit: number
): ((...args: Parameters<T>) => void) => {
  let inThrottle: boolean
  
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args)
      inThrottle = true
      setTimeout(() => inThrottle = false, limit)
    }
  }
}

// Device detection
export const isMobile = (): boolean => {
  if (typeof navigator === 'undefined') return false
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
}

export const isIOS = (): boolean => {
  if (typeof navigator === 'undefined') return false
  return /iPad|iPhone|iPod/.test(navigator.userAgent)
}

export const isAndroid = (): boolean => {
  if (typeof navigator === 'undefined') return false
  return /Android/.test(navigator.userAgent)
}

export const isSafari = (): boolean => {
  if (typeof navigator === 'undefined') return false
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
}

export const getTouchSupport = (): boolean => {
  if (typeof window === 'undefined') return false
  return 'ontouchstart' in window || navigator.maxTouchPoints > 0
}

// Browser utilities
export const copyToClipboard = async (text: string): Promise<boolean> => {
  if (typeof navigator === 'undefined') return false
  
  try {
    await navigator.clipboard.writeText(text)
    return true
  } catch (error) {
    // Fallback for older browsers
    if (typeof document === 'undefined') return false
    
    const textArea = document.createElement('textarea')
    textArea.value = text
    document.body.appendChild(textArea)
    textArea.focus()
    textArea.select()
    try {
      document.execCommand('copy')
      document.body.removeChild(textArea)
      return true
    } catch (fallbackError) {
      document.body.removeChild(textArea)
      return false
    }
  }
}

// Error handling
export const handleError = (error: unknown, context?: string): void => {
  const message = error instanceof Error ? error.message : 'Unknown error'
  console.error(`${context ? `[${context}] ` : ''}${message}`, error)
  
  // In production, you might want to send errors to a logging service
  if (process.env.NODE_ENV === 'production') {
    // logErrorToService(error, context)
  }
}

export const safeJsonParse = <T>(json: string, fallback: T): T => {
  try {
    return JSON.parse(json)
  } catch {
    return fallback
  }
}

// Language utilities
export const getLanguageFromStorage = (): 'it' | 'de' => {
  return getLocalStorage(STORAGE_KEYS.language, 'it')
}

export const setLanguageToStorage = (language: 'it' | 'de'): void => {
  setLocalStorage(STORAGE_KEYS.language, language)
}

export const getBrowserLanguage = (): 'it' | 'de' => {
  if (typeof navigator === 'undefined') return 'it'
  const lang = navigator.language.toLowerCase()
  if (lang.startsWith('de')) return 'de'
  return 'it' // Default to Italian
}

export default {
  capitalizeFirst,
  capitalizeWords,
  slugify,
  truncateText,
  stripHtml,
  formatPrice,
  formatNumber,
  clamp,
  roundToDecimals,
  generateRandomId,
  formatDate,
  formatTime,
  formatDateTime,
  isToday,
  daysSince,
  validateEmail,
  validatePhone,
  validateName,
  validateMessage,
  isValidUrl,
  getUrlParams,
  buildUrl,
  getBaseDomain,
  setLocalStorage,
  getLocalStorage,
  removeLocalStorage,
  clearLocalStorage,
  setSessionStorage,
  getSessionStorage,
  setCookie,
  getCookie,
  deleteCookie,
  shuffle,
  chunk,
  unique,
  groupBy,
  sortBy,
  pick,
  omit,
  deepClone,
  isEmpty,
  scrollToElement,
  scrollToTop,
  getElementPosition,
  isElementInViewport,
  getScrollPercentage,
  debounce,
  throttle,
  isMobile,
  isIOS,
  isAndroid,
  isSafari,
  getTouchSupport,
  copyToClipboard,
  handleError,
  safeJsonParse,
  getLanguageFromStorage,
  setLanguageToStorage,
  getBrowserLanguage
}


--- FILE: src/components/ui/Button.tsx ---
import React from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface ButtonProps extends BaseComponentProps {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  loading?: boolean
  disabled?: boolean
  icon?: React.ReactNode
  iconPosition?: 'left' | 'right'
  fullWidth?: boolean
  onClick?: () => void
  type?: 'button' | 'submit' | 'reset'
  href?: string
  target?: string
  rel?: string
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  loading = false,
  disabled = false,
  icon,
  iconPosition = 'left',
  fullWidth = false,
  onClick,
  type = 'button',
  href,
  target,
  rel,
  className = '',
  ...props
}) => {
  // Base styles
  const baseStyles = `
    relative inline-flex items-center justify-center font-semibold
    rounded-2xl transition-all duration-300 focus:outline-none focus:ring-4
    transform-gpu will-change-transform disabled:cursor-not-allowed
    ${fullWidth ? 'w-full' : ''}
  `

  // Variant styles
  const variants = {
    primary: `
      bg-gradient-to-r from-brand-500 to-brand-600 text-white
      hover:from-brand-600 hover:to-brand-700 hover:shadow-lg hover:shadow-brand-500/25
      focus:ring-brand-500/30 disabled:from-neutral-400 disabled:to-neutral-400
    `,
    secondary: `
      bg-gradient-to-r from-accent-500 to-accent-600 text-white
      hover:from-accent-600 hover:to-accent-700 hover:shadow-lg hover:shadow-accent-500/25
      focus:ring-accent-500/30 disabled:from-neutral-400 disabled:to-neutral-400
    `,
    outline: `
      border-2 border-brand-500 text-brand-600 bg-transparent
      hover:bg-brand-500 hover:text-white hover:shadow-lg
      focus:ring-brand-500/30 disabled:border-neutral-300 disabled:text-neutral-300
    `,
    ghost: `
      text-neutral-700 bg-transparent hover:bg-neutral-100
      focus:ring-neutral-500/30 disabled:text-neutral-300
    `
  }

  // Size styles
  const sizes = {
    sm: 'px-4 py-2 text-sm min-h-[36px]',
    md: 'px-6 py-3 text-base min-h-[44px]',
    lg: 'px-8 py-4 text-lg min-h-[52px]',
    xl: 'px-10 py-5 text-xl min-h-[60px]'
  }

  const buttonClass = `
    ${baseStyles}
    ${variants[variant]}
    ${sizes[size]}
    ${className}
  `.trim()

  // Loading spinner
  const LoadingSpinner = () => (
    <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
  )

  // Button content
  const ButtonContent = () => (
    <>
      {loading && <LoadingSpinner />}
      {!loading && icon && iconPosition === 'left' && (
        <span className="mr-2">{icon}</span>
      )}
      {!loading && <span>{children}</span>}
      {!loading && icon && iconPosition === 'right' && (
        <span className="ml-2">{icon}</span>
      )}
    </>
  )

  // Motion variants
  const motionVariants = {
    hover: { 
      scale: disabled || loading ? 1 : 1.02,
      y: disabled || loading ? 0 : -2
    },
    tap: { 
      scale: disabled || loading ? 1 : 0.98,
      y: disabled || loading ? 0 : 0
    }
  }

  // If href is provided, render as link
  if (href) {
    return (
      <motion.a
        href={href}
        target={target}
        rel={rel}
        className={buttonClass}
        whileHover="hover"
        whileTap="tap"
        variants={motionVariants}
        {...props}
      >
        <ButtonContent />
        
        {/* Ripple effect overlay */}
        <motion.div
          className="absolute inset-0 bg-white/20 rounded-2xl opacity-0 pointer-events-none"
          whileHover={{ opacity: variant === 'ghost' ? 0 : 0.1 }}
          transition={{ duration: 0.2 }}
        />
      </motion.a>
    )
  }

  // Render as button
  return (
    <motion.button
      type={type}
      onClick={onClick}
      disabled={disabled || loading}
      className={buttonClass}
      whileHover="hover"
      whileTap="tap"
      variants={motionVariants}
      {...props}
    >
      <ButtonContent />
      
      {/* Ripple effect overlay */}
      <motion.div
        className="absolute inset-0 bg-white/20 rounded-2xl opacity-0 pointer-events-none"
        whileHover={{ opacity: variant === 'ghost' ? 0 : 0.1 }}
        transition={{ duration: 0.2 }}
      />
    </motion.button>
  )
}

export default Button


--- FILE: src/components/ui/Card.tsx ---
import React from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface CardProps extends BaseComponentProps {
  variant?: 'default' | 'elevated' | 'bordered' | 'glass'
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl'
  hover?: boolean
  clickable?: boolean
  onClick?: () => void
}

const Card: React.FC<CardProps> = ({
  children,
  variant = 'default',
  padding = 'md',
  hover = false,
  clickable = false,
  onClick,
  className = '',
  ...props
}) => {
  // Base styles
  const baseStyles = `
    relative bg-white rounded-3xl transition-all duration-300
    transform-gpu will-change-transform
    ${clickable ? 'cursor-pointer' : ''}
  `

  // Variant styles
  const variants = {
    default: 'shadow-sm border border-neutral-100',
    elevated: 'shadow-lg hover:shadow-xl',
    bordered: 'border-2 border-neutral-200',
    glass: 'bg-white/80 backdrop-blur-xl border border-white/20 shadow-lg'
  }

  // Padding styles
  const paddings = {
    none: '',
    sm: 'p-4',
    md: 'p-6',
    lg: 'p-8',
    xl: 'p-12'
  }

  const cardClass = `
    ${baseStyles}
    ${variants[variant]}
    ${paddings[padding]}
    ${className}
  `.trim()

  // Motion variants
  const motionVariants = {
    hover: hover ? {
      y: -8,
      scale: 1.02,
      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
    } : {},
    tap: clickable ? { scale: 0.98 } : {}
  }

  return (
    <motion.div
      className={cardClass}
      onClick={onClick}
      whileHover="hover"
      whileTap="tap"
      variants={motionVariants}
      {...props}
    >
      {children}
      
      {/* Magnetic effect overlay */}
      {(hover || clickable) && (
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-brand-500/5 to-accent-500/5 rounded-3xl opacity-0 pointer-events-none"
          whileHover={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        />
      )}
    </motion.div>
  )
}

// Card components
export const CardHeader: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`pb-6 border-b border-neutral-100 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const CardBody: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`py-6 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const CardFooter: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`pt-6 border-t border-neutral-100 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export default Card

--- FILE: src/components/ui/Loading.tsx ---
import React from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface LoadingProps extends BaseComponentProps {
  variant?: 'spinner' | 'dots' | 'pulse' | 'skeleton'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  color?: 'brand' | 'accent' | 'neutral'
  text?: string
  fullScreen?: boolean
}

const Loading: React.FC<LoadingProps> = ({
  variant = 'spinner',
  size = 'md',
  color = 'brand',
  text,
  fullScreen = false,
  className = '',
  ...props
}) => {
  // Size mappings
  const sizes = {
    sm: { spinner: 'w-4 h-4', text: 'text-sm' },
    md: { spinner: 'w-8 h-8', text: 'text-base' },
    lg: { spinner: 'w-12 h-12', text: 'text-lg' },
    xl: { spinner: 'w-16 h-16', text: 'text-xl' }
  }

  // Color mappings
  const colors = {
    brand: 'text-brand-500',
    accent: 'text-accent-500',
    neutral: 'text-neutral-500'
  }

  // Spinner component
  const Spinner = () => (
    <motion.div
      className={`
        ${sizes[size].spinner} border-2 border-current border-t-transparent 
        rounded-full ${colors[color]}
      `}
      animate={{ rotate: 360 }}
      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
    />
  )

  // Dots component
  const Dots = () => (
    <div className="flex space-x-1">
      {[0, 1, 2].map((i) => (
        <motion.div
          key={i}
          className={`
            ${size === 'sm' ? 'w-2 h-2' : size === 'md' ? 'w-3 h-3' : size === 'lg' ? 'w-4 h-4' : 'w-5 h-5'}
            bg-current rounded-full ${colors[color]}
          `}
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.7, 1, 0.7]
          }}
          transition={{
            duration: 0.6,
            repeat: Infinity,
            delay: i * 0.2
          }}
        />
      ))}
    </div>
  )

  // Pulse component
  const Pulse = () => (
    <motion.div
      className={`
        ${sizes[size].spinner} bg-current rounded-full ${colors[color]}
      `}
      animate={{
        scale: [1, 1.2, 1],
        opacity: [1, 0.7, 1]
      }}
      transition={{
        duration: 1.5,
        repeat: Infinity
      }}
    />
  )

  // Skeleton component
  const Skeleton = () => (
    <div className="space-y-3">
      {[1, 0.8, 0.6].map((width, i) => (
        <motion.div
          key={i}
          className={`
            h-4 bg-neutral-200 rounded-lg
            ${size === 'sm' ? 'h-2' : size === 'md' ? 'h-3' : size === 'lg' ? 'h-4' : 'h-5'}
          `}
          style={{ width: `${width * 100}%` }}
          animate={{ opacity: [0.5, 1, 0.5] }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            delay: i * 0.2
          }}
        />
      ))}
    </div>
  )

  // Component mapping
  const components = {
    spinner: <Spinner />,
    dots: <Dots />,
    pulse: <Pulse />,
    skeleton: <Skeleton />
  }

  // Container styles
  const containerClass = `
    flex flex-col items-center justify-center space-y-4
    ${fullScreen ? 'fixed inset-0 bg-white/80 backdrop-blur-sm z-50' : ''}
    ${className}
  `.trim()

  return (
    <div className={containerClass} {...props}>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
      >
        {components[variant]}
      </motion.div>
      
      {text && (
        <motion.p
          className={`${sizes[size].text} ${colors[color]} font-medium`}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2, duration: 0.3 }}
        >
          {text}
        </motion.p>
      )}
    </div>
  )
}

// Skeleton components for specific layouts
export const SkeletonCard: React.FC<{ lines?: number; showAvatar?: boolean }> = ({ 
  lines = 3, 
  showAvatar = false 
}) => (
  <div className="animate-pulse space-y-4 p-6">
    {showAvatar && (
      <div className="flex items-center space-x-4">
        <div className="w-12 h-12 bg-neutral-200 rounded-full"></div>
        <div className="space-y-2 flex-1">
          <div className="h-4 bg-neutral-200 rounded w-1/4"></div>
          <div className="h-3 bg-neutral-200 rounded w-1/2"></div>
        </div>
      </div>
    )}
    <div className="space-y-3">
      {Array.from({ length: lines }).map((_, i) => (
        <div key={i} className="space-y-2">
          <div className={`h-4 bg-neutral-200 rounded ${i === lines - 1 ? 'w-2/3' : 'w-full'}`}></div>
        </div>
      ))}
    </div>
  </div>
)

export const SkeletonImage: React.FC<{ aspect?: 'square' | 'video' | 'wide' }> = ({ 
  aspect = 'video' 
}) => {
  const aspectClasses = {
    square: 'aspect-square',
    video: 'aspect-video',
    wide: 'aspect-[3/1]'
  }

  return (
    <div className={`animate-pulse bg-neutral-200 rounded-2xl ${aspectClasses[aspect]}`}>
      <div className="flex items-center justify-center h-full">
        <svg className="w-12 h-12 text-neutral-400" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd" />
        </svg>
      </div>
    </div>
  )
}

export default Loading

--- FILE: src/components/ui/Modal.tsx ---
import React, { useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface ModalProps extends BaseComponentProps {
  isOpen: boolean
  onClose: () => void
  title?: string
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
  closeOnOverlayClick?: boolean
  closeOnEscape?: boolean
  showCloseButton?: boolean
  preventScroll?: boolean
}

const Modal: React.FC<ModalProps> = ({
  children,
  isOpen,
  onClose,
  title,
  size = 'md',
  closeOnOverlayClick = true,
  closeOnEscape = true,
  showCloseButton = true,
  preventScroll = true,
  className = '',
  ...props
}) => {
  // Size mappings
  const sizes = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
    full: 'max-w-full mx-4'
  }

  // Handle escape key
  useEffect(() => {
    if (!closeOnEscape) return

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        onClose()
      }
    }

    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [isOpen, onClose, closeOnEscape])

  // Handle body scroll
  useEffect(() => {
    if (!preventScroll) return

    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }

    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen, preventScroll])

  // Handle overlay click
  const handleOverlayClick = (e: React.MouseEvent) => {
    if (closeOnOverlayClick && e.target === e.currentTarget) {
      onClose()
    }
  }

  // Animation variants
  const overlayVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 }
  }

  const modalVariants = {
    hidden: {
      opacity: 0,
      scale: 0.75,
      y: 20
    },
    visible: {
      opacity: 1,
      scale: 1,
      y: 0,
      transition: {
        type: 'spring',
        damping: 25,
        stiffness: 300
      }
    },
    exit: {
      opacity: 0,
      scale: 0.75,
      y: 20,
      transition: {
        duration: 0.2
      }
    }
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          {/* Overlay */}
          <motion.div
            className="fixed inset-0 bg-black/50 backdrop-blur-sm"
            variants={overlayVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            transition={{ duration: 0.3 }}
            onClick={handleOverlayClick}
          />

          {/* Modal Container */}
          <div className="flex min-h-full items-center justify-center p-4">
            <motion.div
              className={`
                relative w-full ${sizes[size]} bg-white rounded-3xl shadow-2xl
                max-h-[90vh] overflow-hidden ${className}
              `}
              variants={modalVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              {...props}
            >
              {/* Header */}
              {(title || showCloseButton) && (
                <div className="flex items-center justify-between p-6 border-b border-neutral-100">
                  {title && (
                    <h2 className="text-2xl font-bold text-neutral-900">
                      {title}
                    </h2>
                  )}
                  
                  {showCloseButton && (
                    <motion.button
                      onClick={onClose}
                      className="w-10 h-10 flex items-center justify-center rounded-xl text-neutral-400 hover:text-neutral-600 hover:bg-neutral-100 transition-colors"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </motion.button>
                  )}
                </div>
              )}

              {/* Content */}
              <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
                {children}
              </div>
            </motion.div>
          </div>
        </div>
      )}
    </AnimatePresence>
  )
}

// Modal components
export const ModalHeader: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`px-6 py-4 border-b border-neutral-100 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const ModalBody: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`p-6 ${className}`}
    {...props}
  >
    {children}
  </div>
)

export const ModalFooter: React.FC<BaseComponentProps> = ({
  children,
  className = '',
  ...props
}) => (
  <div 
    className={`px-6 py-4 border-t border-neutral-100 flex items-center justify-end space-x-3 ${className}`}
    {...props}
  >
    {children}
  </div>
)

// Confirmation Modal
interface ConfirmationModalProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: () => void
  title: string
  message: string
  confirmText?: string
  cancelText?: string
  variant?: 'danger' | 'warning' | 'info'
}

export const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message,
  confirmText = 'Conferma',
  cancelText = 'Annulla',
  variant = 'info'
}) => {
  const variantStyles = {
    danger: 'text-red-600 bg-red-50',
    warning: 'text-amber-600 bg-amber-50',
    info: 'text-brand-600 bg-brand-50'
  }

  const buttonStyles = {
    danger: 'bg-red-600 hover:bg-red-700',
    warning: 'bg-amber-600 hover:bg-amber-700',
    info: 'bg-brand-600 hover:bg-brand-700'
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="sm">
      <ModalBody>
        <div className="text-center">
          <div className={`w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center ${variantStyles[variant]}`}>
            {variant === 'danger' && (
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            )}
            {variant === 'warning' && (
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            )}
            {variant === 'info' && (
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            )}
          </div>
          
          <h3 className="text-xl font-bold text-neutral-900 mb-2">
            {title}
          </h3>
          
          <p className="text-neutral-600 mb-6">
            {message}
          </p>

          <div className="flex space-x-3">
            <motion.button
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-neutral-300 text-neutral-700 rounded-xl hover:bg-neutral-50 transition-colors"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {cancelText}
            </motion.button>
            
            <motion.button
              onClick={() => {
                onConfirm()
                onClose()
              }}
              className={`flex-1 px-4 py-2 text-white rounded-xl transition-colors ${buttonStyles[variant]}`}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {confirmText}
            </motion.button>
          </div>
        </div>
      </ModalBody>
    </Modal>
  )
}

export default Modal

--- FILE: src/components/ui/OptimizedImage.tsx ---
import React, { useState, useCallback, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'

interface OptimizedImageProps {
  src: string
  alt: string
  className?: string
  style?: React.CSSProperties
  priority?: boolean
  placeholder?: 'blur' | 'empty' | 'skeleton'
  sizes?: string
  quality?: number
  onLoad?: () => void
  onError?: () => void
  lazy?: boolean
  aspectRatio?: string
  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down'
}

const OptimizedImage: React.FC<OptimizedImageProps> = ({
  src,
  alt,
  className = '',
  style = {},
  priority = false,
  placeholder = 'skeleton',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 85,
  onLoad,
  onError,
  lazy = true,
  aspectRatio,
  objectFit = 'cover'
}) => {
  const [imageState, setImageState] = useState<'loading' | 'loaded' | 'error'>('loading')
  const [inView, setInView] = useState(!lazy || priority)
  const imgRef = useRef<HTMLImageElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)

  // Intersection Observer per lazy loading
  useEffect(() => {
    if (!lazy || priority) return

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setInView(true)
            observer.disconnect()
          }
        })
      },
      {
        rootMargin: '50px',
        threshold: 0.1
      }
    )

    if (containerRef.current) {
      observer.observe(containerRef.current)
    }

    return () => observer.disconnect()
  }, [lazy, priority])

  // Preload per immagini prioritarie
  useEffect(() => {
    if (priority && src) {
      const link = document.createElement('link')
      link.rel = 'preload'
      link.as = 'image'
      link.href = src
      document.head.appendChild(link)
      
      return () => {
        if (document.head.contains(link)) {
          document.head.removeChild(link)
        }
      }
    }
  }, [priority, src])

  const handleImageLoad = useCallback(() => {
    setImageState('loaded')
    onLoad?.()
    
    // Track successful image load
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'image_load_success', {
        event_category: 'performance',
        event_label: src,
        value: 1
      })
    }
  }, [onLoad, src])

  const handleImageError = useCallback(() => {
    setImageState('error')
    onError?.()
    
    // Track image load errors
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'image_load_error', {
        event_category: 'performance',
        event_label: src,
        value: 1
      })
    }
    
    console.warn(`Failed to load image: ${src}`)
  }, [onError, src])

  // Generate responsive srcSet
  const generateSrcSet = (baseSrc: string) => {
    if (!baseSrc.includes('.webp') && !baseSrc.includes('.jpg') && !baseSrc.includes('.png')) {
      return baseSrc
    }
    
    const extension = baseSrc.split('.').pop()
    const baseName = baseSrc.replace(`.${extension}`, '')
    
    return [
      `${baseName}_400w.${extension} 400w`,
      `${baseName}_800w.${extension} 800w`,
      `${baseName}_1200w.${extension} 1200w`,
      `${baseName}_1600w.${extension} 1600w`,
      `${baseSrc} 2000w`
    ].join(', ')
  }

  // Placeholder components
  const SkeletonPlaceholder = () => (
    <div className="absolute inset-0 bg-gradient-to-r from-gray-200 via-gray-100 to-gray-200 animate-pulse">
      <div 
        className="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent animate-shimmer"
        style={{
          backgroundSize: '200% 100%',
          animation: 'shimmer 1.5s infinite'
        }}
      />
    </div>
  )

  const BlurPlaceholder = () => (
    <div className="absolute inset-0 bg-gradient-to-br from-green-100 to-green-200 filter blur-sm" />
  )

  const ErrorPlaceholder = () => (
    <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
      <div className="text-center text-gray-400">
        <div className="w-12 h-12 mx-auto mb-2 bg-gray-200 rounded-lg flex items-center justify-center">
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        </div>
        <p className="text-xs">Immagine non disponibile</p>
      </div>
    </div>
  )

  const containerStyles: React.CSSProperties = {
    ...style,
    position: 'relative',
    overflow: 'hidden',
    aspectRatio: aspectRatio,
    display: 'block'
  }

  const imageStyles: React.CSSProperties = {
    width: '100%',
    height: '100%',
    objectFit: objectFit,
    transition: 'opacity 0.3s ease-in-out',
    opacity: imageState === 'loaded' ? 1 : 0
  }

  return (
    <>
      {/* CSS per shimmer effect */}
      <style>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        .animate-shimmer {
          animation: shimmer 1.5s infinite;
        }
      `}</style>
      
      <div 
        ref={containerRef}
        className={`relative ${className}`}
        style={containerStyles}
      >
        {/* Placeholder */}
        {imageState === 'loading' && (
          <motion.div
            initial={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0"
          >
            {placeholder === 'skeleton' && <SkeletonPlaceholder />}
            {placeholder === 'blur' && <BlurPlaceholder />}
          </motion.div>
        )}

        {/* Error state */}
        {imageState === 'error' && <ErrorPlaceholder />}

        {/* Main image */}
        {inView && imageState !== 'error' && (
          <motion.img
            ref={imgRef}
            src={src}
            alt={alt}
            className="absolute inset-0 w-full h-full"
            style={imageStyles}
            loading={priority ? 'eager' : 'lazy'}
            decoding="async"
            fetchPriority={priority ? 'high' : 'low'}
            srcSet={generateSrcSet(src)}
            sizes={sizes}
            onLoad={handleImageLoad}
            onError={handleImageError}
            // Modern performance attributes
            {...(priority && { 'data-priority': 'true' })}
          />
        )}

        {/* Loading indicator for priority images */}
        {priority && imageState === 'loading' && (
          <div className="absolute top-2 right-2 w-4 h-4 bg-green-500 rounded-full animate-pulse" />
        )}
      </div>
    </>
  )
}

export default React.memo(OptimizedImage)

// Hook per lazy loading avanzato
export const useImagePreloader = (imageSrcs: string[]) => {
  const [loadedImages, setLoadedImages] = useState<Set<string>>(new Set())
  
  useEffect(() => {
    const preloadImage = (src: string) => {
      return new Promise<string>((resolve, reject) => {
        const img = new Image()
        img.onload = () => resolve(src)
        img.onerror = reject
        img.src = src
      })
    }

    const preloadAll = async () => {
      for (const src of imageSrcs) {
        try {
          await preloadImage(src)
          setLoadedImages(prev => new Set(prev).add(src))
        } catch (error) {
          console.warn(`Failed to preload image: ${src}`)
        }
      }
    }

    preloadAll()
  }, [imageSrcs])

  return loadedImages
}

// Utility per ottimizzazione batch delle immagini
export const optimizeImageBatch = (images: string[], callback: (progress: number) => void) => {
  let loaded = 0
  const total = images.length

  images.forEach(src => {
    const img = new Image()
    img.onload = img.onerror = () => {
      loaded++
      callback((loaded / total) * 100)
    }
    img.src = src
  })
}

--- FILE: src/components/ui/Particles.tsx ---
import React, { useEffect, useRef } from 'react'
import { motion } from 'framer-motion'
import { BaseComponentProps } from '../types'

interface ParticleSystemProps extends BaseComponentProps {
  count?: number
  color?: string
  size?: number
  speed?: number
  direction?: 'up' | 'down' | 'left' | 'right' | 'random'
  shape?: 'circle' | 'square' | 'triangle'
  opacity?: number
  blur?: boolean
}

interface Particle {
  id: number
  x: number
  y: number
  vx: number
  vy: number
  size: number
  opacity: number
  color: string
  life: number
  maxLife: number
}

const Particles: React.FC<ParticleSystemProps> = ({
  count = 50,
  color = '#22c55e',
  size = 4,
  speed = 1,
  direction = 'up',
  shape = 'circle',
  opacity = 0.6,
  blur = false,
  className = '',
  ...props
}) => {
  const containerRef = useRef<HTMLDivElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const particlesRef = useRef<Particle[]>([])
  const animationRef = useRef<number>()

  // Get velocity based on direction
  const getDirectionVelocity = () => {
    switch (direction) {
      case 'up':
        return -Math.random() * 2 - 0.5
      case 'down':
        return Math.random() * 2 + 0.5
      case 'left':
        return -Math.random() * 2 - 0.5
      case 'right':
        return Math.random() * 2 + 0.5
      case 'random':
      default:
        return (Math.random() - 0.5) * 2
    }
  }

  // Initialize particles
  const initParticles = () => {
    const particles: Particle[] = []
    const container = containerRef.current
    if (!container) return particles

    const { width, height } = container.getBoundingClientRect()

    for (let i = 0; i < count; i++) {
      particles.push({
        id: i,
        x: Math.random() * width,
        y: Math.random() * height,
        vx: (Math.random() - 0.5) * speed,
        vy: getDirectionVelocity() * speed,
        size: size + Math.random() * (size / 2),
        opacity: opacity * (0.5 + Math.random() * 0.5),
        color,
        life: Math.random() * 1000,
        maxLife: 1000 + Math.random() * 2000
      })
    }

    return particles;
  }

  // Update particles
  const updateParticles = () => {
    const container = containerRef.current
    if (!container) return

    const { width, height } = container.getBoundingClientRect()

    particlesRef.current = particlesRef.current.map(particle => {
      // Update position
      particle.x += particle.vx
      particle.y += particle.vy
      particle.life += 16 // ~60fps

      // Wrap around edges
      if (particle.x < 0) particle.x = width
      if (particle.x > width) particle.x = 0
      if (particle.y < 0) particle.y = height
      if (particle.y > height) particle.y = 0

      // Reset particle if life exceeded
      if (particle.life > particle.maxLife) {
        particle.x = Math.random() * width
        particle.y = direction === 'up' ? height : direction === 'down' ? 0 : Math.random() * height
        particle.life = 0
      }

      return particle
    })
  }

  // Draw particles
  const drawParticles = () => {
    const canvas = canvasRef.current
    const ctx = canvas?.getContext('2d')
    if (!canvas || !ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // Set blur effect
    if (blur) {
      ctx.filter = 'blur(1px)'
    }

    // Draw each particle
    particlesRef.current.forEach(particle => {
      ctx.save()
      
      // Set opacity based on life
      const lifeRatio = 1 - (particle.life / particle.maxLife)
      ctx.globalAlpha = particle.opacity * lifeRatio

      // Set color
      ctx.fillStyle = particle.color

      // Draw shape
      switch (shape) {
        case 'circle':
          ctx.beginPath()
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2)
          ctx.fill()
          break
        case 'square':
          ctx.fillRect(
            particle.x - particle.size / 2,
            particle.y - particle.size / 2,
            particle.size,
            particle.size
          )
          break
        case 'triangle':
          ctx.beginPath()
          ctx.moveTo(particle.x, particle.y - particle.size)
          ctx.lineTo(particle.x - particle.size, particle.y + particle.size)
          ctx.lineTo(particle.x + particle.size, particle.y + particle.size)
          ctx.closePath()
          ctx.fill()
          break
      }

      ctx.restore()
    })
  }

  // Animation loop
  const animate = () => {
    updateParticles()
    drawParticles()
    animationRef.current = requestAnimationFrame(animate)
  }

  // Resize canvas
  const resizeCanvas = () => {
    const canvas = canvasRef.current
    const container = containerRef.current
    if (!canvas || !container) return

    const { width, height } = container.getBoundingClientRect()
    canvas.width = width
    canvas.height = height
  }

  // Initialize
  useEffect(() => {
    particlesRef.current = initParticles()
    resizeCanvas()
    animate()

    const handleResize = () => {
      resizeCanvas()
      particlesRef.current = initParticles()
    }

    window.addEventListener('resize', handleResize)

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
      window.removeEventListener('resize', handleResize)
    }
  }, [count, color, size, speed, direction, shape, opacity])

  return (
    <div
      ref={containerRef}
      className={`absolute inset-0 pointer-events-none overflow-hidden ${className}`}
      {...props}
    >
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full"
        style={{ filter: blur ? 'blur(0.5px)' : 'none' }}
      />
    </div>
  )
}

// Floating elements component (alternative to canvas-based particles)
interface FloatingElementsProps extends BaseComponentProps {
  count?: number
  children: React.ReactNode
  duration?: number
  delay?: number
}

export const FloatingElements: React.FC<FloatingElementsProps> = ({
  count = 20,
  children,
  duration = 6,
  delay = 0,
  className = '',
  ...props
}) => {
  return (
    <div className={`absolute inset-0 pointer-events-none overflow-hidden ${className}`} {...props}>
      {Array.from({ length: count }).map((_, i) => (
        <motion.div
          key={i}
          className="absolute"
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
          }}
          animate={{
            y: [0, -30, 0],
            x: [0, Math.random() * 20 - 10, 0],
            rotate: [0, Math.random() * 360],
            scale: [1, 1.1, 1],
          }}
          transition={{
            duration: duration + Math.random() * 2,
            repeat: Infinity,
            delay: delay + Math.random() * 2,
            ease: 'easeInOut',
          }}
        >
          {children}
        </motion.div>
      ))}
    </div>
  )
}

// Particle trail effect
interface ParticleTrailProps {
  color?: string
  size?: number
  count?: number
  life?: number
}

export const ParticleTrail: React.FC<ParticleTrailProps> = ({
  color = '#22c55e',
  size = 3,
  count = 10,
  life = 1000
}) => {
  const [particles, setParticles] = React.useState<Array<{
    id: number
    x: number
    y: number
    timestamp: number
  }>>([])

  const handleMouseMove = (e: MouseEvent) => {
    const newParticle = {
      id: Date.now() + Math.random(),
      x: e.clientX,
      y: e.clientY,
      timestamp: Date.now()
    }

    setParticles(prev => [...prev.slice(-count + 1), newParticle])
  }

  useEffect(() => {
    document.addEventListener('mousemove', handleMouseMove)
    
    const cleanup = setInterval(() => {
      const now = Date.now()
      setParticles(prev => prev.filter(p => now - p.timestamp < life))
    }, 100)

    return () => {
      document.removeEventListener('mousemove', handleMouseMove)
      clearInterval(cleanup)
    }
  }, [life, count])

  return (
    <div className="fixed inset-0 pointer-events-none z-50">
      {particles.map((particle) => {
        const age = Date.now() - particle.timestamp
        const opacity = Math.max(0, 1 - age / life)
        
        return (
          <motion.div
            key={particle.id}
            className="absolute rounded-full"
            style={{
              left: particle.x - size / 2,
              top: particle.y - size / 2,
              width: size,
              height: size,
              backgroundColor: color,
              opacity,
            }}
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
          />
        )
      })}
    </div>
  )
}

// Background particles for hero sections
export const HeroParticles: React.FC = () => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {/* Floating fruit icons */}
      <FloatingElements count={15} duration={8}>
        <div className="text-2xl opacity-20">🍎</div>
      </FloatingElements>
      
      <FloatingElements count={12} duration={10} delay={2}>
        <div className="text-xl opacity-15">🥕</div>
      </FloatingElements>
      
      <FloatingElements count={10} duration={12} delay={4}>
        <div className="text-lg opacity-10">🍅</div>
      </FloatingElements>

      {/* Abstract particles */}
      <Particles
        count={30}
        color="rgba(34, 197, 94, 0.1)"
        size={2}
        speed={0.5}
        direction="up"
        shape="circle"
      />
    </div>
  )
}

// Section background particles
export const SectionParticles: React.FC<{
  variant?: 'brand' | 'accent' | 'neutral'
  density?: 'low' | 'medium' | 'high'
}> = ({ variant = 'brand', density = 'low' }) => {
  const colors = {
    brand: 'rgba(34, 197, 94, 0.08)',
    accent: 'rgba(245, 158, 11, 0.08)',
    neutral: 'rgba(115, 115, 115, 0.05)'
  }

  const counts = {
    low: 15,
    medium: 25,
    high: 40
  }

  return (
    <Particles
      count={counts[density]}
      color={colors[variant]}
      size={1.5}
      speed={0.3}
      direction="random"
      shape="circle"
      opacity={0.6}
    />
  )
}

export default Particles


--- FILE: src/components/3d/FloatingFruits.tsx ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/3d/HeroScene.tsx ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/3d/ParticleSystem.tsx ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/sections/AboutSection.tsx ---
import React, { useState, useCallback, useMemo, useEffect } from 'react'
import { motion, useScroll, useTransform, useReducedMotion } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

// Declare tracking functions for TypeScript
declare global {
  interface Window {
    trackStoriaTradizione: (elemento: string, interesse: string) => void;
    trackQualitaProdotti: (aspetto: string, valutazione: string) => void;
    trackTempoSezione: (sezione: string, secondi: number) => void;
    trackNavigazione: (sezione: string, azione: string, dettaglio: string) => void;
    updateCurrentSection: (sectionName: string) => void;
    gtag: (...args: any[]) => void;
  }
}

interface AboutSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'La Nostra Storia',
    subtitle: 'Tre Generazioni di Eccellenza nel Settore Ortofrutticolo',
    timeline: [
      {
        year: '1974',
        title: 'Le Fondamenta',
        description: 'Nonno Lorenzo pose le prime pietre di quello che sarebbe diventato un punto di riferimento nel settore ortofrutticolo trentino. Con dedizione assoluta e visione imprenditoriale, fondò un\'attività basata su principi saldi: qualità inarrivabile, fiducia reciproca e servizio autentico.',
        image: '/images/melinda_golden.webp'
      },
      {
        year: '2013',
        title: 'L\'Evoluzione',
        description: 'Pierluigi trasformò la passione familiare in una realtà strutturata e moderna. Consolidando rapporti esclusivi con i migliori produttori locali e ampliando la rete di fornitura, elevò gli standard qualitativi e pose le basi per servire anche il settore professionale.',
        image: '/images/pomodori_cuore_bue.webp'
      },
      {
        year: 'OGGI',
        title: 'Il Futuro',
        description: 'Lorenzo, Pierluigi con i figli e l\'intera famiglia Bottamedi continuano la tradizione con rinnovato slancio. Unendo l\'esperienza di tre generazioni all\'innovazione moderna, serviamo ogni giorno famiglie, ristoranti d\'eccellenza e istituti del territorio, sempre fedeli ai nostri valori fondanti.',
        image: '/images/kiwi-cuore.webp'
      }
    ],
    values: {
      title: 'I Nostri Valori',
      items: [
        {
          icon: '🌱',
          title: 'Freschezza',
          description: 'Selezione quotidiana alle prime ore per garantire prodotti al massimo della qualità',
          number: '50',
          label: 'Anni di esperienza'
        },
        {
          icon: '⭐',
          title: 'Eccellenza',
          description: 'Standard elevati certificati da tre generazioni di competenza nel settore',
          number: '150+',
          label: 'Varietà selezionate'
        },
        {
          icon: '❤️',
          title: 'Passione',
          description: 'L\'amore per il nostro lavoro si riflette nella cura di ogni singolo prodotto',
          number: '50+',
          label: 'Partner commerciali'
        },
        {
          icon: '🏔️',
          title: 'Territorio',
          description: 'Valorizzazione dei sapori autentici del Trentino Alto Adige e delle sue tradizioni',
          number: '6',
          label: 'Giorni di servizio'
        }
      ]
    }
  },
  de: {
    title: 'Unsere Geschichte',
    subtitle: 'Drei Generationen Exzellenz im Obst- und Gemüsesektor',
    timeline: [
      {
        year: '1974',
        title: 'Die Grundlagen',
        description: 'Großvater Lorenzo legte die ersten Steine dessen, was zu einem Bezugspunkt im Südtiroler Obst- und Gemüsesektor werden sollte. Mit absoluter Hingabe und unternehmerischer Weitsicht gründete er ein Unternehmen basierend auf soliden Prinzipien: unerreichbare Qualität, gegenseitiges Vertrauen und authentischen Service.',
        image: '/images/melinda_golden.webp'
      },
      {
        year: '2013',
        title: 'Die Entwicklung',
        description: 'Pierluigi verwandelte die Familienleidenschaft in eine strukturierte und moderne Realität. Durch die Festigung exklusiver Beziehungen zu den besten lokalen Produzenten und die Erweiterung des Liefernetzwerks hob er die Qualitätsstandards an und schuf die Grundlagen für die Belieferung auch des professionellen Sektors.',
        image: '/images/pomodori_cuore_bue.webp'
      },
      {
        year: 'HEUTE',
        title: 'Die Zukunft',
        description: 'Lorenzo, Pierluigi mit den Söhnen und die gesamte Familie Bottamedi setzen die Tradition mit erneuertem Schwung fort. Durch die Verbindung der Erfahrung von drei Generationen mit moderner Innovation bedienen wir täglich Familien, Exzellenz-Restaurants und Institutionen des Gebiets, immer treu unseren Grundwerten.',
        image: '/images/kiwi-cuore.webp'
      }
    ],
    values: {
      title: 'Unsere Werte',
      items: [
        {
          icon: '🌱',
          title: 'Frische',
          description: 'Tägliche Auswahl in den frühen Morgenstunden für Produkte höchster Qualität',
          number: '50',
          label: 'Jahre Erfahrung'
        },
        {
          icon: '⭐',
          title: 'Exzellenz',
          description: 'Hohe Standards zertifiziert durch drei Generationen Kompetenz im Sektor',
          number: '150+',
          label: 'Ausgewählte Sorten'
        },
        {
          icon: '❤️',
          title: 'Leidenschaft',
          description: 'Die Liebe zu unserer Arbeit spiegelt sich in der Pflege jedes einzelnen Produkts wider',
          number: '50+',
          label: 'Geschäftspartner'
        },
        {
          icon: '🏔️',
          title: 'Territorium',
          description: 'Förderung der authentischen Aromen Südtirols und seiner Traditionen',
          number: '6',
          label: 'Servicetage'
        }
      ]
    }
  }
}

const LazyImage: React.FC<{
  src: string
  alt: string
  className?: string
  style?: React.CSSProperties
  onLoadComplete?: () => void
}> = React.memo(({ src, alt, className = '', style = {}, onLoadComplete }) => {
  const [imageState, setImageState] = useState<'loading' | 'loaded' | 'error'>('loading')
  const [ref, inView] = useInView({
    threshold: 0.1,
    triggerOnce: true,
    rootMargin: '50px'
  })

  const handleLoad = useCallback(() => {
    setImageState('loaded')
    onLoadComplete?.()
  }, [onLoadComplete])

  const handleError = useCallback(() => {
    setImageState('error')
    console.warn(`Failed to load image: ${src}`)
  }, [src])

  return (
    <div ref={ref} className={`relative overflow-hidden ${className}`} style={style}>
      {imageState === 'loading' && (
        <div className="absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 animate-pulse" />
      )}
      
      {imageState === 'error' && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="text-center text-gray-400">
            <div className="w-12 h-12 mx-auto mb-2 bg-gray-200 rounded-lg flex items-center justify-center">
              📷
            </div>
            <p className="text-xs">Immagine non disponibile</p>
          </div>
        </div>
      )}
      
      {inView && imageState !== 'error' && (
        <img
          src={src}
          alt={alt}
          className={`w-full h-full object-cover transition-opacity duration-500 ${
            imageState === 'loaded' ? 'opacity-100' : 'opacity-0'
          }`}
          loading="lazy"
          decoding="async"
          onLoad={handleLoad}
          onError={handleError}
          style={{ willChange: 'opacity' }}
        />
      )}
    </div>
  )
})

LazyImage.displayName = 'LazyImage'

const useOptimizedCountUp = (endValue: number, inView: boolean, delay: number = 0) => {
  const [count, setCount] = useState(0)
  const shouldReduceMotion = useReducedMotion()
  
  React.useEffect(() => {
    if (!inView) return

    const startAnimation = () => {
      if (shouldReduceMotion) {
        setCount(endValue)
        return
      }

      let startTime: number
      const duration = 2000 + delay
      
      const animate = (currentTime: number) => {
        if (!startTime) startTime = currentTime
        const progress = Math.min((currentTime - startTime) / duration, 1)
        
        const easeOutQuart = 1 - Math.pow(1 - progress, 4)
        const currentValue = easeOutQuart * endValue
        
        setCount(Math.floor(currentValue))

        if (progress < 1) {
          requestAnimationFrame(animate)
        } else {
          setCount(endValue)
        }
      }

      requestAnimationFrame(animate)
    }

    const timeoutId = setTimeout(startAnimation, delay)
    return () => clearTimeout(timeoutId)
  }, [inView, endValue, delay, shouldReduceMotion])

  return count
}

const TimelineItem: React.FC<{
  item: any
  index: number
  isEven: boolean
}> = React.memo(({ item, index, isEven }) => {
  const [ref, inView] = useInView({
    threshold: 0.2,
    triggerOnce: true,
    rootMargin: '50px'
  })
  
  const shouldReduceMotion = useReducedMotion()
  const [imageLoaded, setImageLoaded] = useState(false)

  // 🎯 TRACKING INTERESSE TIMELINE
  useEffect(() => {
    if (inView && typeof window !== 'undefined') {
      const periodoMap: Record<string, string> = {
        '1974': 'fondazione_lorenzo',
        '2013': 'evoluzione_pierluigi', 
        'OGGI': 'futuro_famiglia',
        'HEUTE': 'futuro_famiglia'
      }
      
      const elementoStoria = periodoMap[item.year] || 'periodo_sconosciuto'
      
      // Track storia e tradizione
      window.trackStoriaTradizione?.(elementoStoria, 'visualizzazione_timeline')
      
      // Track qualità percepita nel tempo
      if (item.year === '1974') {
        window.trackQualitaProdotti?.('tradizione_familiare', 'interesse_origini')
      } else if (item.year === '2013') {
        window.trackQualitaProdotti?.('evoluzione_professionale', 'interesse_crescita')
      } else if (item.year === 'OGGI' || item.year === 'HEUTE') {
        window.trackQualitaProdotti?.('innovazione_moderna', 'interesse_futuro')
      }

      // Analytics dettagliate timeline
      if (window.gtag) {
        window.gtag('event', 'timeline_visualizzata', {
          event_category: 'Storia e Tradizione',
          event_label: `timeline_${item.year}`,
          custom_parameter_1: elementoStoria,
          custom_parameter_2: `posizione_${index + 1}`,
          custom_parameter_3: 'interesse_storia_aziendale',
          value: 5
        })
      }
    }
  }, [inView, item.year, index])

  const itemVariants = useMemo(() => ({
    hidden: { 
      opacity: 0, 
      x: shouldReduceMotion ? 0 : (isEven ? -60 : 60),
      y: shouldReduceMotion ? 20 : 0
    },
    visible: { 
      opacity: 1, 
      x: 0, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.3 : 0.6,
        delay: shouldReduceMotion ? 0 : index * 0.2,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index, isEven, shouldReduceMotion])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={itemVariants}
      className={`flex flex-col lg:flex-row items-center gap-8 ${
        isEven ? 'lg:flex-row-reverse' : ''
      }`}
    >
      <div className="flex-1 space-y-4">
        <div className="relative">
          <motion.div
            initial={{ scale: 0 }}
            animate={inView ? { scale: 1 } : {}}
            transition={{ 
              duration: shouldReduceMotion ? 0.2 : 0.5, 
              delay: shouldReduceMotion ? 0 : index * 0.2 + 0.3 
            }}
            className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl text-white font-bold text-lg shadow-lg"
          >
            {item.year}
          </motion.div>
        </div>
        
        <motion.h3
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ 
            duration: shouldReduceMotion ? 0.2 : 0.6, 
            delay: shouldReduceMotion ? 0 : index * 0.2 + 0.4 
          }}
          className="text-2xl lg:text-3xl font-bold text-neutral-900"
        >
          {item.title}
        </motion.h3>
        
        <motion.p
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ 
            duration: shouldReduceMotion ? 0.2 : 0.6, 
            delay: shouldReduceMotion ? 0 : index * 0.2 + 0.5 
          }}
          className="text-base text-neutral-600 leading-relaxed"
        >
          {item.description}
        </motion.p>
      </div>

      <motion.div
        initial={{ opacity: 0, scale: shouldReduceMotion ? 1 : 0.8 }}
        animate={inView ? { opacity: 1, scale: 1 } : {}}
        transition={{ 
          duration: shouldReduceMotion ? 0.2 : 0.6, 
          delay: shouldReduceMotion ? 0 : index * 0.2 + 0.2 
        }}
        className="flex-1 relative group max-w-md"
      >
        <div className="relative overflow-hidden rounded-2xl shadow-xl">
          <LazyImage
            src={item.image}
            alt={item.title}
            className="w-full h-64 lg:h-72 transition-transform duration-500 group-hover:scale-105"
            onLoadComplete={() => setImageLoaded(true)}
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        </div>
      </motion.div>
    </motion.div>
  )
})

TimelineItem.displayName = 'TimelineItem'

const ValueCard: React.FC<{
  item: any
  index: number
}> = React.memo(({ item, index }) => {
  const [ref, inView] = useInView({ 
    threshold: 0.2, 
    triggerOnce: true,
    rootMargin: '50px'
  })
  
  const count = useOptimizedCountUp(
    parseInt(item.number.replace('+', '')),
    inView,
    index * 200
  )
  
  const shouldReduceMotion = useReducedMotion()

  // 🎯 TRACKING VALORI AZIENDALI
  useEffect(() => {
    if (inView && typeof window !== 'undefined') {
      const valoriMap: Record<string, string> = {
        'Freschezza': 'freschezza_quotidiana',
        'Frische': 'freschezza_quotidiana',
        'Eccellenza': 'standard_elevati',
        'Exzellenz': 'standard_elevati',
        'Passione': 'passione_familiare',
        'Leidenschaft': 'passione_familiare',
        'Territorio': 'valorizzazione_territorio',
        'Territorium': 'valorizzazione_territorio'
      }
      
      const valoreSpecifico = valoriMap[item.title] || 'valore_generico'
      
      // Track qualità prodotti attraverso valori
      window.trackQualitaProdotti?.(valoreSpecifico, 'visualizzazione_valore')
      
      // Track storia e tradizione per valori legati alla famiglia
      if (['passione_familiare', 'freschezza_quotidiana'].includes(valoreSpecifico)) {
        window.trackStoriaTradizione?.(valoreSpecifico, 'comprensione_valori')
      }

      // Analytics dettagliate valori
      if (window.gtag) {
        window.gtag('event', 'valore_aziendale_visualizzato', {
          event_category: 'Valori e Qualità',
          event_label: `valore_${valoreSpecifico}`,
          custom_parameter_1: valoreSpecifico,
          custom_parameter_2: `numero_${item.number}`,
          custom_parameter_3: 'comprensione_brand',
          value: 3
        })
      }
    }
  }, [inView, item.title, item.number])

  const cardVariants = useMemo(() => ({
    hidden: { 
      opacity: 0, 
      y: shouldReduceMotion ? 0 : 30,
      scale: shouldReduceMotion ? 1 : 0.95
    },
    visible: { 
      opacity: 1, 
      y: 0,
      scale: 1,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.5,
        delay: shouldReduceMotion ? 0 : index * 0.1,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index, shouldReduceMotion])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={cardVariants}
      whileHover={shouldReduceMotion ? {} : { y: -5, scale: 1.02 }}
      className="relative group"
      style={{ willChange: 'transform' }}
    >
      <div className="bg-white rounded-2xl p-6 shadow-md hover:shadow-xl transition-all duration-300 border border-neutral-100 h-full">
        <div className="text-center mb-4">
          <motion.div
            whileHover={shouldReduceMotion ? {} : { scale: 1.1, rotate: 5 }}
            className="text-4xl mb-3"
          >
            {item.icon}
          </motion.div>
          
          <div className="mb-2">
            <motion.span 
              className="text-2xl sm:text-3xl lg:text-4xl font-bold text-green-600 block"
              key={count}
              initial={{ scale: shouldReduceMotion ? 1 : 1.2, opacity: 0.8 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: shouldReduceMotion ? 0.1 : 0.3 }}
            >
              {count}{item.number.includes('+') ? '+' : ''}
            </motion.span>
            <p className="text-xs sm:text-sm text-neutral-500 font-medium">
              {item.label}
            </p>
          </div>
        </div>
        
        <div className="text-center">
          <h3 className="text-lg font-bold text-neutral-900 mb-2">
            {item.title}
          </h3>
          <p className="text-neutral-600 text-sm leading-relaxed">
            {item.description}
          </p>
        </div>
        
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-green-500/5 to-green-600/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"
          initial={false}
        />
      </div>
    </motion.div>
  )
})

ValueCard.displayName = 'ValueCard'

const AboutSection: React.FC<AboutSectionProps> = ({ language, inView }) => {
  const { scrollYProgress } = useScroll()
  const y = useTransform(scrollYProgress, [0, 1], [0, -30])
  const shouldReduceMotion = useReducedMotion()
  const [sectionStartTime] = useState(Date.now())
  
  const t = useMemo(() => translations[language], [language])

  // 🎯 TRACKING SEZIONE ABOUT
  useEffect(() => {
    if (inView && typeof window !== 'undefined') {
      // Aggiorna sezione corrente
      window.updateCurrentSection?.('about')
      
      // Track storia e tradizione - interesse generale
      window.trackStoriaTradizione?.('sezione_storia_visualizzata', 'interesse_iniziale')
      
      // Track qualità - comprensione brand
      window.trackQualitaProdotti?.('presentazione_aziendale', 'prima_conoscenza')

      // Analytics ingresso sezione
      if (window.gtag) {
        window.gtag('event', 'sezione_about_visualizzata', {
          event_category: 'Navigazione Sezioni',
          event_label: 'ingresso_storia',
          custom_parameter_1: 'about',
          custom_parameter_2: 'comprensione_brand',
          custom_parameter_3: 'interesse_storia_aziendale',
          value: 8
        })
      }
    }

    // Cleanup: track tempo nella sezione
    return () => {
      if (inView && typeof window !== 'undefined') {
        const timeInSection = Math.round((Date.now() - sectionStartTime) / 1000)
        if (timeInSection > 5) {
          window.trackTempoSezione?.('about', timeInSection)
          
          // Se ha passato molto tempo, è molto interessato alla storia
          if (timeInSection > 30) {
            window.trackStoriaTradizione?.('lettura_approfondita_storia', 'interesse_molto_alto')
          }
        }
      }
    }
  }, [inView, sectionStartTime])

  const headerVariants = useMemo(() => ({
    hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.6,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [shouldReduceMotion])

  const subtitleVariants = useMemo(() => ({
    hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.6,
        delay: shouldReduceMotion ? 0 : 0.2,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [shouldReduceMotion])

  const valuesHeaderVariants = useMemo(() => ({
    hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.6,
        delay: shouldReduceMotion ? 0 : 0.4,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [shouldReduceMotion])

  return (
    <section id="about" className="py-16 lg:py-24 bg-gradient-to-br from-neutral-50 to-white relative overflow-hidden">
      {!shouldReduceMotion && (
        <>
          <motion.div
            style={{ y }}
            className="absolute top-1/4 left-0 w-48 h-48 bg-green-200/20 rounded-full blur-3xl"
          />
          <motion.div
            style={{ y }}
            className="absolute bottom-1/4 right-0 w-56 h-56 bg-green-300/20 rounded-full blur-3xl"
          />
        </>
      )}

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={headerVariants}
          className="text-center mb-16"
        >
          <motion.h2
            className="text-3xl lg:text-5xl font-bold text-neutral-900 mb-4"
            style={{
              background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #f59e0b 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}
          >
            {t.title}
          </motion.h2>
          <motion.p
            initial="hidden"
            animate={inView ? "visible" : "hidden"}
            variants={subtitleVariants}
            className="text-lg text-neutral-600 max-w-2xl mx-auto"
          >
            {t.subtitle}
          </motion.p>
        </motion.div>

        <div className="space-y-20 mb-20">
          {t.timeline.map((item, index) => (
            <TimelineItem
              key={`timeline-${index}`}
              item={item}
              index={index}
              isEven={index % 2 === 0}
            />
          ))}
        </div>

        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={valuesHeaderVariants}
          className="text-center mb-12"
        >
          <h3 className="text-2xl lg:text-4xl font-bold text-neutral-900 mb-6">
            {t.values.title}
          </h3>
        </motion.div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {t.values.items.map((item, index) => (
            <ValueCard key={`value-${index}`} item={item} index={index} />
          ))}
        </div>
      </div>
    </section>
  )
}

export default React.memo(AboutSection)


--- FILE: src/components/sections/Banchettosection.tsx ---
import React, { useState, useCallback, useMemo } from 'react'
import { motion, useReducedMotion } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface BanchettoSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'Al Banchetto: Colori, Sapori e Freschezza Quotidiana',
    subtitle: 'Vieni a trovarci in Via Cavalleggeri Udine a Mezzolombardo!',
    description: 'Lasciati tentare da un\'esplosione di colori, profumi e dalla migliore frutta e verdura freschissima, selezionata per te ogni giorno con la cura e la passione di famiglia che ci contraddistingue da generazioni.',
    cta: 'Orari e Contatti del Banchetto',
    gallery: [
      {
        src: '/images/banco_varieta_autunno.webp',
        title: 'Abbondanza di Stagione',
        description: 'Ricca esposizione di frutta fresca di stagione, verdure e prodotti tipici del Trentino'
      },
      {
        src: '/images/pomodori_cuore_bue.webp',
        title: 'Verdure dell\'Orto Locale',
        description: 'Pomodori cuore di bue rossi freschi e profumati'
      },
      {
        src: '/images/melinda_golden.webp',
        title: 'Golden Melinda',
        description: 'Mele Golden Melinda fresche e succose'
      },
      {
        src: '/images/angurie.webp',
        title: 'Dolcezza Estiva',
        description: 'Angurie fresche e succose, tagliate e intere'
      },
      {
        src: '/images/meloni_sattin_dettaglio.webp',
        title: 'Meloni Pregiati',
        description: 'Meloni Sattin Dolce Passione profumati e dolci'
      },
      {
        src: '/images/banco_frigo_disidratata_specialita.webp',
        title: 'Tesori del Trentino',
        description: 'Ampia selezione di specialità del Trentino'
      },
      {
        src: '/images/arance_felici.webp',
        title: 'Agrumi Selezionati',
        description: 'Arance fresche e succose La Favorita Felici'
      },
      {
        src: '/images/zucche_decorate_banco.webp',
        title: 'Ti Aspettiamo!',
        description: 'Atmosfera accogliente e stagionale al Banchetto'
      },
      {
        src: '/images/bottamedi_mele_pink_lady_confezione.webp',
        title: 'Mele Pink Lady',
        description: 'Confezione di Mele Pink Lady fresche e croccanti'
      },
      {
        src: '/images/bottamedi_ananas_fruitpoint_freschi.webp',
        title: 'Ananas Esotici di Qualità',
        description: 'Ananas freschi e maturi Fruitpoint'
      },
      {
        src: '/images/bottamedi_sacchetti_frutta_disidratata_mista.webp',
        title: 'Frutta Disidratata Mista',
        description: 'Sacchetti di frutta disidratata mista colorata e gustosa'
      },
      {
        src: '/images/bottamedi_mele_melinda_montagna_cassetta.webp',
        title: 'Mela di Montagna Melinda',
        description: 'Cassetta di Mele Melinda \'Mela di Montagna\' fresche'
      }
    ]
  },
  de: {
    title: 'Am Marktstand: Farben, Geschmäcker und tägliche Frische',
    subtitle: 'Besuchen Sie uns in der Via Cavalleggeri Udine in Mezzolombardo!',
    description: 'Lassen Sie sich von einer Explosion von Farben, Düften und dem besten frischen Obst und Gemüse verführen, das täglich mit der Sorgfalt und Leidenschaft der Familie ausgewählt wird, die uns seit Generationen auszeichnet.',
    cta: 'Öffnungszeiten und Kontakt zum Marktstand',
    gallery: [
      {
        src: '/images/banco_varieta_autunno.webp',
        title: 'Saisonale Fülle',
        description: 'Reiche Ausstellung von frischem saisonalem Obst, Gemüse und typischen Südtiroler Produkten'
      },
      {
        src: '/images/pomodori_cuore_bue.webp',
        title: 'Gemüse aus dem lokalen Garten',
        description: 'Rote frische und duftende Ochsenherz-Tomaten'
      },
      {
        src: '/images/melinda_golden.webp',
        title: 'Golden Melinda',
        description: 'Frische und saftige Golden Melinda Äpfel'
      },
      {
        src: '/images/angurie.webp',
        title: 'Sommerliche Süße',
        description: 'Frische und saftige Wassermelonen, geschnitten und ganz'
      },
      {
        src: '/images/meloni_sattin_dettaglio.webp',
        title: 'Edle Melonen',
        description: 'Duftende und süße Sattin Dolce Passione Melonen'
      },
      {
        src: '/images/banco_frigo_disidratata_specialita.webp',
        title: 'Schätze Südtirols',
        description: 'Große Auswahl an Spezialitäten aus Südtirol'
      },
      {
        src: '/images/arance_felici.webp',
        title: 'Ausgewählte Zitrusfrüchte',
        description: 'Frische und saftige Orangen La Favorita Felici'
      },
      {
        src: '/images/zucche_decorate_banco.webp',
        title: 'Wir erwarten Sie!',
        description: 'Einladende und saisonale Atmosphäre am Marktstand'
      },
      {
        src: '/images/bottamedi_mele_pink_lady_confezione.webp',
        title: 'Pink Lady Äpfel',
        description: 'Packung frischer und knackiger Pink Lady Äpfel'
      },
      {
        src: '/images/bottamedi_ananas_fruitpoint_freschi.webp',
        title: 'Exotische Qualitäts-Ananas',
        description: 'Frische und reife Fruitpoint Ananas'
      },
      {
        src: '/images/bottamedi_sacchetti_frutta_disidratata_mista.webp',
        title: 'Gemischte Trockenfrüchte',
        description: 'Beutel mit bunten und leckeren gemischten Trockenfrüchten'
      },
      {
        src: '/images/bottamedi_mele_melinda_montagna_cassetta.webp',
        title: 'Melinda Bergapfel',
        description: 'Kiste mit frischen Melinda \'Bergapfel\' Äpfeln'
      }
    ]
  }
}

const AdvancedLazyImage: React.FC<{
  item: any
  index: number
  priority?: boolean
}> = React.memo(({ item, index, priority = false }) => {
  const [imageState, setImageState] = useState<'loading' | 'loaded' | 'error'>('loading')
  const shouldReduceMotion = useReducedMotion()
  
  const [ref, inView] = useInView({
    threshold: 0.1,
    triggerOnce: true,
    rootMargin: priority ? '200px' : '100px'
  })

  const handleImageLoad = useCallback(() => {
    setImageState('loaded')
  }, [])

  const handleImageError = useCallback(() => {
    setImageState('error')
  }, [])

  const itemVariants = useMemo(() => ({
    hidden: { 
      opacity: 0, 
      y: shouldReduceMotion ? 0 : 20, 
      scale: shouldReduceMotion ? 1 : 0.98 
    },
    visible: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.4,
        delay: shouldReduceMotion ? 0 : Math.min(index * 0.05, 0.3),
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index, shouldReduceMotion])

  const imageVariants = useMemo(() => ({
    loading: { 
      opacity: 0, 
      scale: shouldReduceMotion ? 1 : 1.05,
      filter: shouldReduceMotion ? 'none' : 'blur(4px)'
    },
    loaded: { 
      opacity: 1, 
      scale: 1,
      filter: 'blur(0px)',
      transition: { 
        duration: shouldReduceMotion ? 0.2 : 0.5,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    },
    hover: shouldReduceMotion ? {} : { 
      scale: 1.03,
      transition: { 
        duration: 0.3,
        ease: "easeOut"
      } 
    }
  }), [shouldReduceMotion])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={itemVariants}
      whileHover={shouldReduceMotion ? {} : { y: -3 }}
      className="group relative bg-white rounded-2xl overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300"
      style={{ willChange: 'transform' }}
    >
      <div className="relative h-56 overflow-hidden bg-gradient-to-br from-green-50 to-green-100">
        
        {imageState === 'loading' && (
          <div className="absolute inset-0 flex items-center justify-center bg-green-100">
            <div className="flex flex-col items-center space-y-2">
              <div className="w-8 h-8 border-2 border-green-300 border-t-green-600 rounded-full animate-spin" />
              <div className="text-green-600 text-xs font-medium">Caricamento...</div>
            </div>
          </div>
        )}

        {imageState === 'error' && (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
            <div className="text-center text-gray-400">
              <div className="w-12 h-12 mx-auto mb-2 bg-gray-200 rounded-lg flex items-center justify-center">
                📷
              </div>
              <p className="text-xs">Immagine non disponibile</p>
            </div>
          </div>
        )}

        {imageState !== 'error' && inView && (
          <motion.img
            src={item.src}
            alt={item.description}
            className="w-full h-full object-cover"
            loading={priority ? "eager" : "lazy"}
            onLoad={handleImageLoad}
            onError={handleImageError}
            initial="loading"
            animate={imageState}
            whileHover="hover"
            variants={imageVariants}
            style={{
              willChange: 'transform, opacity, filter'
            }}
            decoding="async"
            fetchPriority={priority ? "high" : "low"}
          />
        )}
        
        <div 
          className="absolute inset-0 bg-gradient-to-t from-black/50 via-black/10 to-transparent opacity-70 group-hover:opacity-90 transition-opacity duration-300"
          style={{ willChange: 'opacity' }}
        />

        <div className="absolute bottom-3 left-3 right-3">
          <motion.h3 
            className="text-white font-semibold text-sm mb-1 drop-shadow-lg leading-tight"
            initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 5 }}
            animate={imageState === 'loaded' ? { opacity: 1, y: 0 } : {}}
            transition={{ delay: shouldReduceMotion ? 0 : 0.2, duration: shouldReduceMotion ? 0.1 : 0.3 }}
          >
            {item.title}
          </motion.h3>
        </div>
      </div>

      <div
        className="absolute inset-0 bg-gradient-to-br from-green-500/5 to-green-600/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
        style={{ willChange: 'opacity' }}
      />
    </motion.div>
  )
})

AdvancedLazyImage.displayName = 'AdvancedLazyImage'

const HeroImage: React.FC<{ inView: boolean }> = React.memo(({ inView }) => {
  const [imageLoaded, setImageLoaded] = useState(false)
  const shouldReduceMotion = useReducedMotion()

  const handleImageLoad = useCallback(() => {
    setImageLoaded(true)
  }, [])

  return (
    <motion.div
      initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 40 }}
      animate={inView ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: shouldReduceMotion ? 0.2 : 0.6, ease: [0.25, 0.46, 0.45, 0.94] }}
      className="mb-14"
    >
      <div className="relative h-80 lg:h-96 rounded-2xl overflow-hidden shadow-xl">
        {!imageLoaded && (
          <div className="absolute inset-0 bg-gradient-to-br from-green-100 to-green-200 animate-pulse" />
        )}
        
        <img
          src="/images/banchetto.webp"
          alt="Il Banchetto Bottamedi a Mezzolombardo ricco di frutta e verdura fresca"
          className={`w-full h-full object-cover transition-opacity duration-500 ${
            imageLoaded ? 'opacity-100' : 'opacity-0'
          }`}
          loading="eager"
          onLoad={handleImageLoad}
          style={{ willChange: 'opacity' }}
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent" />
      </div>
    </motion.div>
  )
})

HeroImage.displayName = 'HeroImage'

const BanchettoSection: React.FC<BanchettoSectionProps> = ({ language, inView }) => {
  const t = useMemo(() => translations[language], [language])
  const shouldReduceMotion = useReducedMotion()

  const scrollToContact = useCallback(() => {
    const element = document.getElementById('contact')
    if (element) {
      const offset = 80
      const elementPosition = element.offsetTop - offset
      window.scrollTo({
        top: Math.max(0, elementPosition),
        behavior: 'smooth'
      })
    }

    if ('vibrate' in navigator) {
      try {
        navigator.vibrate(25)
      } catch (e) {
        console.log('Haptic non disponibile')
      }
    }
  }, [])

  const containerVariants = useMemo(() => ({
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: shouldReduceMotion ? 0 : 0.03,
        delayChildren: shouldReduceMotion ? 0 : 0.1
      }
    }
  }), [shouldReduceMotion])

  const headerVariants = useMemo(() => ({
    hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.6,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [shouldReduceMotion])

  const ctaVariants = useMemo(() => ({
    hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: shouldReduceMotion ? 0.2 : 0.6,
        delay: shouldReduceMotion ? 0 : 0.4,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [shouldReduceMotion])

  const priorityImages = useMemo(() => new Set([0, 1, 2, 3]), [])

  return (
    <section id="dettaglio" className="py-20 lg:py-28 bg-gradient-to-br from-green-50 to-white relative overflow-hidden">
      {!shouldReduceMotion && (
        <>
          <div className="absolute top-1/4 left-0 w-80 h-80 bg-green-200/15 rounded-full blur-3xl" />
          <div className="absolute bottom-1/4 right-0 w-80 h-80 bg-green-300/15 rounded-full blur-3xl" />
        </>
      )}

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <HeroImage inView={inView} />

        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={headerVariants}
          className="text-center mb-16"
        >
          <h2 className="text-3xl lg:text-4xl xl:text-5xl font-bold text-neutral-900 mb-5 leading-tight">
            {t.title}
          </h2>
          <p className="text-lg lg:text-xl text-green-600 font-semibold mb-3">
            {t.subtitle}
          </p>
          <p className="text-base lg:text-lg text-neutral-600 max-w-3xl mx-auto leading-relaxed">
            {t.description}
          </p>
        </motion.div>

        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={containerVariants}
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-14"
        >
          {t.gallery.map((item, index) => (
            <AdvancedLazyImage 
              key={`gallery-${index}`} 
              item={item} 
              index={index}
              priority={priorityImages.has(index)}
            />
          ))}
        </motion.div>

        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={ctaVariants}
          className="text-center"
        >
          <motion.button
            onClick={scrollToContact}
            whileHover={shouldReduceMotion ? {} : { scale: 1.03, y: -2 }}
            whileTap={{ scale: 0.97 }}
            className="bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 lg:px-8 lg:py-4 rounded-xl font-semibold text-base lg:text-lg shadow-lg hover:shadow-xl transition-all duration-300"
            style={{ willChange: 'transform' }}
          >
            {t.cta}
          </motion.button>
        </motion.div>
      </div>
    </section>
  )
}

export default React.memo(BanchettoSection);

--- FILE: src/components/sections/ContactSection.tsx ---
import React, { useState, useCallback, useEffect } from 'react'
import { motion, AnimatePresence, useReducedMotion } from 'framer-motion'

// Declare gtag function for TypeScript
declare global {
  interface Window {
    gtag: (...args: any[]) => void;
    trackAzioneContatto: (tipoContatto: string, fonte: string, destinazione: string) => void;
    trackLocalizzazione: (azione: string, luogo: string, risultato: string) => void;
    trackRichiestaInformazioni: (tipo: string, argomento: string, modalita: string) => void;
    trackTempoSezione: (sezione: string, secondi: number) => void;
    updateCurrentSection: (sectionName: string) => void;
  }
}

interface ContactSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const ContactCard: React.FC<{
  contact: any
  icon: string
  gradient: string
  index: number
  quickActions: any
  isIngrosso?: boolean
}> = React.memo(({ contact, icon, gradient, index, quickActions, isIngrosso = false }) => {
  const shouldReduceMotion = useReducedMotion()
  
  const openMap = useCallback(() => {
    // 🎯 TRACKING ANALYTICS COMPLETO
    if (typeof window !== 'undefined') {
      const tipoDestinazione = isIngrosso ? 'ingrosso' : 'banchetto'
      const luogo = isIngrosso ? 'via_de_gasperi' : 'via_cavalleggeri'
      
      // Track azione contatto
      window.trackAzioneContatto?.('mappa', 'sezione_contatti', tipoDestinazione)
      
      // Track localizzazione
      window.trackLocalizzazione?.('visualizza_mappa', luogo, 'navigazione_avviata')
      
      // Track richiesta informazioni
      window.trackRichiestaInformazioni?.(tipoDestinazione, 'direzioni_sede', 'mappa')
      
      // Analytics legacy per compatibilità
      if (window.gtag) {
        window.gtag('event', 'mappa_aperta', {
          event_category: 'Navigazione e Contatti',
          event_label: `mappa_${tipoDestinazione}`,
          custom_parameter_1: luogo,
          custom_parameter_2: 'click_da_card_contatti',
          custom_parameter_3: 'interesse_localizzazione',
          value: 8
        })
      }
    }
    
    const mapUrl = isIngrosso 
      ? 'https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6'
      : 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN'
    
    window.open(mapUrl, '_blank')
  }, [isIngrosso])

  const callPhone = useCallback(() => {
    // 🎯 TRACKING ANALYTICS COMPLETO
    if (typeof window !== 'undefined') {
      const tipoDestinazione = isIngrosso ? 'ingrosso' : 'banchetto'
      const numeroTelefono = contact.phone.replace(/\s/g, '')
      
      // Track azione contatto
      window.trackAzioneContatto?.('telefono', 'sezione_contatti', tipoDestinazione)
      
      // Track richiesta informazioni
      window.trackRichiestaInformazioni?.(tipoDestinazione, 'contatto_diretto', 'telefono')
      
      // Analytics legacy
      if (window.gtag) {
        window.gtag('event', 'chiamata_telefonica', {
          event_category: 'Conversioni Importanti',
          event_label: `chiamata_${tipoDestinazione}`,
          custom_parameter_1: numeroTelefono,
          custom_parameter_2: 'click_da_card_contatti',
          custom_parameter_3: 'conversione_diretta',
          value: 25
        })
      }
    }
    
    window.open(`tel:${contact.phone.replace(/\s/g, '')}`, '_self')
  }, [contact.phone, isIngrosso])

  const sendWhatsApp = useCallback(() => {
    // 🎯 TRACKING ANALYTICS COMPLETO
    if (typeof window !== 'undefined') {
      const tipoDestinazione = isIngrosso ? 'ingrosso' : 'banchetto'
      
      // Track azione contatto
      window.trackAzioneContatto?.('whatsapp', 'sezione_contatti', tipoDestinazione)
      
      // Track richiesta informazioni
      window.trackRichiestaInformazioni?.(tipoDestinazione, 'chat_whatsapp', 'whatsapp')
      
      // Analytics legacy
      if (window.gtag) {
        window.gtag('event', 'whatsapp_avviato', {
          event_category: 'Conversioni Social',
          event_label: `whatsapp_${tipoDestinazione}`,
          custom_parameter_1: '393515776198',
          custom_parameter_2: 'click_da_card_contatti',
          custom_parameter_3: 'preferenza_chat',
          value: 20
        })
      }
    }
    
    const message = encodeURIComponent(`Ciao! Sono interessato ai vostri servizi di ${contact.title}`)
    window.open(`https://wa.me/393515776198?text=${message}`, '_blank')
  }, [contact.title, isIngrosso])

  const sendEmail = useCallback(() => {
    // 🎯 TRACKING ANALYTICS COMPLETO
    if (typeof window !== 'undefined') {
      const tipoDestinazione = isIngrosso ? 'ingrosso' : 'banchetto'
      
      // Track azione contatto
      window.trackAzioneContatto?.('email', 'sezione_contatti', tipoDestinazione)
      
      // Track richiesta informazioni
      window.trackRichiestaInformazioni?.(tipoDestinazione, 'email_formale', 'email')
      
      // Analytics legacy
      if (window.gtag) {
        window.gtag('event', 'email_avviata', {
          event_category: 'Conversioni Email',
          event_label: `email_${tipoDestinazione}`,
          custom_parameter_1: contact.email,
          custom_parameter_2: 'click_da_card_contatti',
          custom_parameter_3: 'preferenza_email',
          value: 15
        })
      }
    }
    
    window.open(`mailto:${contact.email}`, '_blank')
  }, [contact.email, isIngrosso])

  return (
    <motion.div
      initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: shouldReduceMotion ? 0.2 : 0.4, delay: shouldReduceMotion ? 0 : index * 0.1 }}
      whileHover={shouldReduceMotion ? {} : { y: -2, scale: 1.01 }}
      className="relative group"
    >
      <div className="bg-white rounded-2xl p-6 shadow-md hover:shadow-lg transition-all duration-300 border border-neutral-100 h-full">
        {/* Icon Header */}
        <div className="relative mb-6">
          <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${gradient} flex items-center justify-center text-xl mb-3 group-hover:scale-105 transition-transform duration-200`}>
            {icon}
          </div>
          <h3 className="text-lg font-bold text-neutral-900">
            {contact.title}
          </h3>
        </div>

        {/* Contact Info */}
        <div className="space-y-3 mb-5">
          <div className="flex items-start space-x-3">
            <svg className="w-4 h-4 text-green-500 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <p className="text-neutral-600 leading-relaxed text-sm">
              {contact.address}
            </p>
          </div>

          <div className="flex items-center space-x-3">
            <svg className="w-4 h-4 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
            <button 
              onClick={callPhone}
              className="text-neutral-600 hover:text-green-600 transition-colors text-sm text-left"
            >
              {contact.phone}
            </button>
          </div>

          <div className="flex items-center space-x-3">
            <svg className="w-4 h-4 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <button 
              onClick={sendEmail}
              className="text-neutral-600 hover:text-green-600 transition-colors text-sm text-left"
            >
              {contact.email}
            </button>
          </div>

          {contact.hours && (
            <div className="flex items-center space-x-3">
              <svg className="w-4 h-4 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-neutral-600 text-sm">
                {contact.hours}
              </p>
            </div>
          )}
        </div>

        {/* Quick Actions */}
        <div className="space-y-2">
          <h4 className="text-xs font-semibold text-neutral-700 mb-2">{quickActions.title}</h4>
          
          <div className="grid grid-cols-1 gap-2">
            <motion.button
              onClick={callPhone}
              whileHover={shouldReduceMotion ? {} : { scale: 1.01 }}
              whileTap={{ scale: 0.99 }}
              className={`w-full py-2 px-3 bg-gradient-to-r ${gradient} text-white rounded-lg font-medium text-xs transition-all duration-200 hover:shadow-md flex items-center justify-center space-x-2`}
            >
              <span>📞</span>
              <span>{quickActions.call}</span>
            </motion.button>

            <div className="grid grid-cols-2 gap-2">
              <motion.button
                onClick={sendWhatsApp}
                whileHover={shouldReduceMotion ? {} : { scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                className="py-2 px-2 bg-green-500 hover:bg-green-600 text-white rounded-lg font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1"
              >
                <span>💬</span>
                <span>{quickActions.whatsapp}</span>
              </motion.button>

              <motion.button
                onClick={openMap}
                whileHover={shouldReduceMotion ? {} : { scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                className="py-2 px-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1"
              >
                <span>🗺️</span>
                <span>{quickActions.directions}</span>
              </motion.button>
            </div>
          </div>
        </div>

        {/* Hover Effect */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-green-500/5 to-blue-500/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none"
          initial={false}
        />
      </div>
    </motion.div>
  )
})

ContactCard.displayName = 'ContactCard'

const ContactSection: React.FC<ContactSectionProps> = ({ language, inView }) => {
  const shouldReduceMotion = useReducedMotion()
  const [sectionStartTime] = useState(Date.now())
  
  // 🎯 TRACKING SEZIONE E TEMPO PERMANENZA
  useEffect(() => {
    if (inView && typeof window !== 'undefined') {
      // Aggiorna sezione corrente
      window.updateCurrentSection?.('contact')
      
      // Analytics ingresso sezione
      if (window.gtag) {
        window.gtag('event', 'sezione_contatti_visualizzata', {
          event_category: 'Navigazione Sezioni',
          event_label: 'ingresso_contatti',
          custom_parameter_1: 'contact',
          custom_parameter_2: 'sezione_finale',
          custom_parameter_3: 'possibili_conversioni',
          value: 5
        })
      }
    }

    // Cleanup: track tempo nella sezione
    return () => {
      if (inView && typeof window !== 'undefined') {
        const timeInSection = Math.round((Date.now() - sectionStartTime) / 1000)
        if (timeInSection > 3) {
          window.trackTempoSezione?.('contact', timeInSection)
        }
      }
    }
  }, [inView, sectionStartTime])
  
  const translations = {
    it: {
      title: 'Contattaci',
      subtitle: 'Siamo qui per te',
      description: 'Scegli come preferisci entrare in contatto con noi. Rispondiamo sempre entro 24 ore.',
      whyChoose: 'Perché scegliere Bottamedi:',
      whyChooseItems: [
        '🏆 50 anni di esperienza e tradizione familiare',
        '🌱 Selezione quotidiana alle prime ore del mattino',
        '🚚 Servizio affidabile 6 giorni su 7',
        '❤️ Rapporto di fiducia con ogni cliente',
        '📱 Supporto e consulenza sempre disponibili'
      ],
      highlight: {
        title: "La Nostra Promessa",
        text: "Quando la valle è ancora avvolta nel silenzio dell'alba, noi siamo già al lavoro per selezionare con cura ogni frutto, ogni verdura. È la passione che tramanda da tre generazioni il sapore autentico della qualità.",
        icon: "🌅"
      },
      mapSection: {
        title: 'Come Raggiungerci',
        subtitle: 'Vieni a trovarci nelle nostre sedi a Mezzolombardo'
      },
      contact: {
        retail: {
          title: 'Banchetto (Dettaglio)',
          address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
          phone: '351 577 6198',
          email: 'bottamedipierluigi@virgilio.it',
          hours: 'Lun-Sab: 07:00-19:30'
        },
        horeca: {
          title: 'Ingrosso HORECA',
          address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
          phone: '0461 602534',
          email: 'bottamedipierluigi@virgilio.it'
        }
      },
      quickActions: {
        title: 'Azioni Rapide',
        call: 'Chiama',
        whatsapp: 'WhatsApp',
        directions: 'Mappa'
      }
    },
    de: {
      title: 'Kontakt',
      subtitle: 'Wir sind für Sie da',
      description: 'Wählen Sie, wie Sie uns am liebsten kontaktieren möchten. Wir antworten immer innerhalb von 24 Stunden.',
      whyChoose: 'Warum Bottamedi wählen:',
      whyChooseItems: [
        '🏆 50 Jahre Erfahrung und Familientradition',
        '🌱 Tägliche Auswahl in den frühen Morgenstunden',
        '🚚 Zuverlässiger Service 6 Tage die Woche',
        '❤️ Vertrauensverhältnis zu jedem Kunden',
        '📱 Support und Beratung immer verfügbar'
      ],
      highlight: {
        title: "Unser Versprechen",
        text: "Wenn das Tal noch im Schweigen der Morgendämmerung gehüllt ist, sind wir bereits bei der Arbeit, um sorgfältig jede Frucht, jedes Gemüse auszuwählen. Es ist die Leidenschaft, die seit drei Generationen den authentischen Geschmack der Qualität weitergibt.",
        icon: "🌅"
      },
      mapSection: {
        title: 'So Erreichen Sie Uns',
        subtitle: 'Besuchen Sie uns in unseren Standorten in Mezzolombardo'
      },
      contact: {
        retail: {
          title: 'Marktstand (Detail)',
          address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
          phone: '351 577 6198',
          email: 'bottamedipierluigi@virgilio.it',
          hours: 'Mo-Sa: 07:00-19:30'
        },
        horeca: {
          title: 'Großhandel HORECA',
          address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
          phone: '0461 602534',
          email: 'bottamedipierluigi@virgilio.it'
        }
      },
      quickActions: {
        title: 'Schnelle Aktionen',
        call: 'Anrufen',
        whatsapp: 'WhatsApp',
        directions: 'Karte'
      }
    }
  }

  const t = translations[language]

  // 🎯 TRACKING MAP CLICKS
  const handleMapClick = useCallback((tipo: 'banchetto' | 'ingrosso') => {
    if (typeof window !== 'undefined') {
      const luogo = tipo === 'banchetto' ? 'via_cavalleggeri' : 'via_de_gasperi'
      
      // Track localizzazione
      window.trackLocalizzazione?.('click_mappa_sezione', luogo, 'navigazione_avviata')
      
      // Track azione contatto
      window.trackAzioneContatto?.('mappa', 'sezione_contatti_mappa', tipo)
      
      // Analytics legacy
      if (window.gtag) {
        window.gtag('event', 'mappa_cliccata_sezione', {
          event_category: 'Interazioni Mappa',
          event_label: `mappa_${tipo}_da_sezione`,
          custom_parameter_1: luogo,
          custom_parameter_2: 'sezione_contatti',
          custom_parameter_3: 'interesse_ubicazione',
          value: 10
        })
      }
    }

    const url = tipo === 'ingrosso' 
      ? 'https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6'
      : 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN'
    
    window.open(url, '_blank')
  }, [])

  return (
    <section id="contact" className="py-20 lg:py-24 bg-gradient-to-br from-white to-neutral-50 relative overflow-hidden">
      {/* Background Elements */}
      {!shouldReduceMotion && (
        <>
          <div className="absolute top-1/4 left-0 w-80 h-80 bg-green-200/20 rounded-full blur-3xl" />
          <div className="absolute bottom-1/4 right-0 w-80 h-80 bg-blue-200/20 rounded-full blur-3xl" />
        </>
      )}

      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.2 : 0.4 }}
          className="text-center mb-16"
        >
          <motion.h2
            className="text-3xl lg:text-5xl font-bold text-neutral-900 mb-4"
            style={{
              background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #f59e0b 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}
          >
            {t.title}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 10 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.2 : 0.4, delay: shouldReduceMotion ? 0 : 0.1 }}
            className="text-lg lg:text-xl text-neutral-600 mb-3"
          >
            {t.subtitle}
          </motion.p>
          <motion.p
            initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 10 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.2 : 0.4, delay: shouldReduceMotion ? 0 : 0.2 }}
            className="text-base text-neutral-500 max-w-2xl mx-auto"
          >
            {t.description}
          </motion.p>
        </motion.div>

        {/* Why Choose Section */}
        <motion.div
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.2 : 0.4, delay: shouldReduceMotion ? 0 : 0.3 }}
          className="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-6 mb-12"
        >
          <h3 className="text-xl font-bold text-neutral-900 mb-4 text-center">{t.whyChoose}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {t.whyChooseItems.map((item, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, x: shouldReduceMotion ? 0 : -10 }}
                animate={inView ? { opacity: 1, x: 0 } : {}}
                transition={{ duration: shouldReduceMotion ? 0.2 : 0.3, delay: shouldReduceMotion ? 0 : 0.4 + index * 0.05 }}
                className="flex items-center space-x-2 text-sm text-neutral-700"
              >
                <span>{item}</span>
              </motion.div>
            ))}
          </div>
          
          {/* Highlight Box */}
          <motion.div
            initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 10 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.2 : 0.4, delay: shouldReduceMotion ? 0 : 0.7 }}
            className="mt-6 p-6 bg-gradient-to-br from-green-50 to-blue-50 rounded-xl border border-green-200"
          >
            <div className="flex items-start space-x-4">
              <div className="text-3xl">{t.highlight.icon}</div>
              <div>
                <h4 className="font-bold text-neutral-900 mb-2 text-lg">{t.highlight.title}</h4>
                <p className="text-neutral-700 text-sm leading-relaxed italic">{t.highlight.text}</p>
              </div>
            </div>
          </motion.div>
        </motion.div>

        {/* Contact Cards */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-16">
          <ContactCard
            contact={t.contact.retail}
            icon="🛒"
            gradient="from-green-500 to-green-600"
            index={0}
            quickActions={t.quickActions}
            isIngrosso={false}
          />
          <ContactCard
            contact={t.contact.horeca}
            icon="🏨"
            gradient="from-blue-500 to-blue-600"
            index={1}
            quickActions={t.quickActions}
            isIngrosso={true}
          />
        </div>

        {/* Map Section */}
        <motion.div
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.2 : 0.5, delay: shouldReduceMotion ? 0 : 0.4 }}
          className="mt-16"
        >
          <div className="text-center mb-10">
            <h3 className="text-2xl lg:text-3xl font-bold text-neutral-900 mb-3">
              {t.mapSection.title}
            </h3>
            <p className="text-lg lg:text-xl text-neutral-600">
              {t.mapSection.subtitle}
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Banchetto Map */}
            <motion.div
              whileHover={shouldReduceMotion ? {} : { scale: 1.01 }}
              className="relative group cursor-pointer"
              onClick={() => handleMapClick('banchetto')}
            >
              <div className="bg-white rounded-2xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300">
                <div className="h-48 bg-gradient-to-br from-green-100 to-green-200 relative overflow-hidden">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center">
                      <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center text-white text-xl mb-3 mx-auto">
                        📍
                      </div>
                      <h4 className="text-lg font-bold text-neutral-900">
                        {language === 'it' ? 'Banchetto' : 'Marktstand'}
                      </h4>
                      <p className="text-neutral-600 text-sm">Via Cavalleggeri Udine</p>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>

            {/* HORECA Map */}
            <motion.div
              whileHover={shouldReduceMotion ? {} : { scale: 1.01 }}
              className="relative group cursor-pointer"
              onClick={() => handleMapClick('ingrosso')}
            >
              <div className="bg-white rounded-2xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300">
                <div className="h-48 bg-gradient-to-br from-blue-100 to-blue-200 relative overflow-hidden">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center">
                      <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white text-xl mb-3 mx-auto">
                        📍
                      </div>
                      <h4 className="text-lg font-bold text-neutral-900">
                        {language === 'it' ? 'Ingrosso HORECA' : 'Großhandel HORECA'}
                      </h4>
                      <p className="text-neutral-600 text-sm">Via A. de Gasperi, 47</p>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </section>
  )
}

export default React.memo(ContactSection)


--- FILE: src/components/sections/HeroSection.tsx ---
import React, { useRef, useEffect, useState, useCallback, useMemo } from 'react'
import { motion, useScroll, useTransform, useReducedMotion } from 'framer-motion'

// Declare tracking functions for TypeScript
declare global {
  interface Window {
    trackNavigazione: (sezione: string, azione: string, dettaglio: string) => void;
    trackStoriaTradizione: (elemento: string, interesse: string) => void;
    trackQualitaProdotti: (aspetto: string, valutazione: string) => void;
    trackPerformanceSito: (metrica: string, valore: number, soglia: number) => void;
    updateCurrentSection: (sectionName: string) => void;
    gtag: (...args: any[]) => void;
  }
}

interface HeroSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'BOTTAMEDI',
    subtitle: 'Frutta e Verdura',
    tagline: 'Qualità Inarrivabile',
    tagline2: 'Passione Familiare',
    since: 'Da oltre',
    yearsCount: 50,
    yearsLabel: 'anni',
    cta1: 'Al Banchetto',
    cta2: 'Ingrosso',
    cta3: 'La Nostra Storia'
  },
  de: {
    title: 'BOTTAMEDI',
    subtitle: 'Obst und Gemüse',
    tagline: 'Unübertreffliche Qualität',
    tagline2: 'Familiäre Leidenschaft',
    since: 'Seit über',
    yearsCount: 50,
    yearsLabel: 'Jahren',
    cta1: 'Marktstand',
    cta2: 'Großhandel', 
    cta3: 'Unsere Geschichte'
  }
}

// 🚀 PERFORMANCE: Memoized Counter Hook con requestAnimationFrame
const useOptimizedCounter = (endValue: number, inView: boolean, duration: number = 2000) => {
  const [count, setCount] = useState(0)
  const animationRef = useRef<number>()
  const startTimeRef = useRef<number>()

  useEffect(() => {
    if (!inView) return

    const animate = (currentTime: number) => {
      if (!startTimeRef.current) startTimeRef.current = currentTime
      const progress = Math.min((currentTime - startTimeRef.current) / duration, 1)
      
      // Easing function ottimizzata
      const easeOutQuart = 1 - Math.pow(1 - progress, 4)
      const currentValue = easeOutQuart * endValue
      
      setCount(Math.floor(currentValue))

      if (progress < 1) {
        animationRef.current = requestAnimationFrame(animate)
      } else {
        setCount(endValue)
      }
    }

    animationRef.current = requestAnimationFrame(animate)

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
    }
  }, [inView, endValue, duration])

  return count
}

// 🎬 PERFORMANCE: Memoized Video Component con tracking
const OptimizedVideoBackground: React.FC<{ inView: boolean }> = React.memo(({ inView }) => {
  const videoRef = useRef<HTMLVideoElement>(null)
  const [videoLoaded, setVideoLoaded] = useState(false)
  const [videoError, setVideoError] = useState(false)
  const [loadStartTime] = useState(Date.now())

  useEffect(() => {
    const video = videoRef.current
    if (!video || !inView) return

    const playVideo = async () => {
      try {
        await video.play()
        
        // 🎯 TRACKING VIDEO PERFORMANCE
        const loadTime = Date.now() - loadStartTime
        if (typeof window !== 'undefined') {
          window.trackPerformanceSito?.('caricamento_video_hero', loadTime, 3000)
          
          if (window.gtag) {
            window.gtag('event', 'video_hero_caricato', {
              event_category: 'Performance Video',
              event_label: loadTime > 3000 ? 'caricamento_lento' : 'caricamento_veloce',
              custom_parameter_1: 'video_verdure_rotanti',
              custom_parameter_2: loadTime + 'ms',
              custom_parameter_3: 'video_autoplay_riuscito',
              value: Math.round(loadTime)
            })
          }
        }
      } catch (error) {
        console.warn('📹 Video autoplay failed:', error)
        setVideoError(true)
        
        // 🎯 TRACKING VIDEO ERROR
        if (typeof window !== 'undefined' && window.gtag) {
          window.gtag('event', 'video_hero_errore', {
            event_category: 'Errori Video',
            event_label: 'autoplay_fallito',
            custom_parameter_1: 'video_verdure_rotanti',
            custom_parameter_2: 'fallback_immagine',
            custom_parameter_3: 'esperienza_degradata',
            value: 1
          })
        }
      }
    }

    if (video.readyState >= 2) {
      playVideo()
    } else {
      video.addEventListener('loadeddata', playVideo, { once: true })
    }

    return () => {
      video.removeEventListener('loadeddata', playVideo)
    }
  }, [inView, loadStartTime])

  const handleLoadedData = useCallback(() => {
    setVideoLoaded(true)
  }, [])

  const handleError = useCallback(() => {
    setVideoError(true)
    console.warn('📹 Video failed to load')
  }, [])

  // Fallback per dispositivi che non supportano il video
  if (videoError) {
    return (
      <div 
        className="w-full h-full bg-gradient-to-br from-green-600 via-green-500 to-green-700"
        style={{
          backgroundImage: 'url(/images/poster.webp)',
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        }}
      />
    )
  }

  return (
    <>
      {/* Loading placeholder */}
      {!videoLoaded && (
        <div className="absolute inset-0 bg-gradient-to-br from-green-600 via-green-500 to-green-700 animate-pulse" />
      )}
      
      <video
        ref={videoRef}
        className={`w-full h-full object-cover transition-opacity duration-500 ${
          videoLoaded ? 'opacity-100' : 'opacity-0'
        }`}
        autoPlay
        muted
        loop
        playsInline
        preload="metadata"
        poster="/images/poster.webp"
        onLoadedData={handleLoadedData}
        onError={handleError}
        style={{ willChange: 'opacity' }}
      >
        <source src="/videos/hero-video-verdure-rotanti.mp4" type="video/mp4" />
      </video>
    </>
  )
})

OptimizedVideoBackground.displayName = 'OptimizedVideoBackground'

const HeroSection: React.FC<HeroSectionProps> = ({ language, inView }) => {
  const ref = useRef<HTMLDivElement>(null)
  const { scrollY } = useScroll()
  const shouldReduceMotion = useReducedMotion()
  const [sectionStartTime] = useState(Date.now())
  
  const t = useMemo(() => translations[language], [language])
  
  // 🚀 PERFORMANCE: Parallax ottimizzato con range limitato
  const y = useTransform(scrollY, [0, 800], [0, shouldReduceMotion ? 0 : 60])
  const opacity = useTransform(scrollY, [0, 600], [1, 0.4])

  // 📊 Counter animato ottimizzato
  const count = useOptimizedCounter(t.yearsCount, inView, 2000)

  // 🎯 TRACKING SEZIONE HERO
  useEffect(() => {
    if (inView && typeof window !== 'undefined') {
      // Aggiorna sezione corrente
      window.updateCurrentSection?.('hero')
      
      // Track interesse per qualità e tradizione
      window.trackQualitaProdotti?.('presentazione_iniziale', 'prima_impressione')
      window.trackStoriaTradizione?.('50_anni_esperienza', 'visualizzazione_hero')
      
      // Analytics dettagliate hero
      if (window.gtag) {
        window.gtag('event', 'hero_visualizzato', {
          event_category: 'Engagement Hero',
          event_label: 'prima_impressione_sito',
          custom_parameter_1: 'hero_section',
          custom_parameter_2: 'landing_page',
          custom_parameter_3: 'primo_impatto_brand',
          value: 10
        })
      }
    }

    // Cleanup: track tempo nella sezione hero
    return () => {
      if (inView && typeof window !== 'undefined') {
        const timeInHero = Math.round((Date.now() - sectionStartTime) / 1000)
        if (timeInHero > 2) {
          if (window.gtag) {
            window.gtag('event', 'tempo_in_hero', {
              event_category: 'Engagement Hero',
              event_label: timeInHero > 10 ? 'alta_attenzione' : 'veloce_passaggio',
              custom_parameter_1: timeInHero + '_secondi',
              custom_parameter_2: timeInHero > 10 ? 'interessato' : 'esplorazione_veloce',
              value: timeInHero
            })
          }
        }
      }
    }
  }, [inView, sectionStartTime])

  // 🎯 PERFORMANCE: Memoized click handlers con tracking
  const handleCTAClick = useCallback((type: 'dettaglio' | 'services' | 'about') => {
    // 🎯 TRACKING CTA CLICKS
    if (typeof window !== 'undefined') {
      const azioniMap = {
        dettaglio: 'esplora_banchetto',
        services: 'scopri_ingrosso', 
        about: 'leggi_storia'
      }
      
      const destinazioniMap = {
        dettaglio: 'sezione_banchetto',
        services: 'sezione_servizi',
        about: 'sezione_storia'
      }

      // Track navigazione
      window.trackNavigazione?.('hero', azioniMap[type], destinazioniMap[type])

      // Track interessi specifici
      if (type === 'about') {
        window.trackStoriaTradizione?.('click_storia_da_hero', 'interesse_alto')
      } else if (type === 'dettaglio') {
        window.trackQualitaProdotti?.('interesse_banchetto', 'click_da_hero')
      }

      // Analytics dettagliate CTA
      if (window.gtag) {
        window.gtag('event', 'cta_hero_click', {
          event_category: 'Conversioni Hero',
          event_label: `cta_${type}`,
          custom_parameter_1: type,
          custom_parameter_2: azioniMap[type],
          custom_parameter_3: 'navigazione_guidata',
          value: type === 'services' ? 25 : (type === 'dettaglio' ? 20 : 15)
        })
      }
    }

    const sectionMap = {
      dettaglio: 'dettaglio',
      services: 'services',
      about: 'about'
    }
    
    const element = document.getElementById(sectionMap[type])
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }

    // 🎯 Haptic feedback ottimizzato
    if ('vibrate' in navigator) {
      try {
        navigator.vibrate(25)
      } catch (e) {
        console.log('Haptic non disponibile')
      }
    }
  }, [])

  // 🎯 TRACKING COUNTER ANIMATION
  useEffect(() => {
    if (count === t.yearsCount && typeof window !== 'undefined') {
      window.trackStoriaTradizione?.('animazione_50_anni_completata', 'alta')
      
      if (window.gtag) {
        window.gtag('event', 'counter_50_anni_completato', {
          event_category: 'Animazioni Hero',
          event_label: 'counter_tradizione_finito',
          custom_parameter_1: '50_anni_esperienza',
          custom_parameter_2: 'animazione_vista_completa',
          custom_parameter_3: 'impatto_tradizione',
          value: 8
        })
      }
    }
  }, [count, t.yearsCount])

  // 🎨 PERFORMANCE: Memoized animation variants
  const animationVariants = useMemo(() => ({
    initial: { opacity: 0, y: shouldReduceMotion ? 0 : 40 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: shouldReduceMotion ? 0.1 : 0.8, ease: "easeOut" }
  }), [shouldReduceMotion])

  const titleVariants = useMemo(() => ({
    initial: { opacity: 0, y: shouldReduceMotion ? 0 : 30 },
    animate: { opacity: 1, y: 0 },
    transition: { delay: shouldReduceMotion ? 0 : 0.4, duration: shouldReduceMotion ? 0.1 : 0.6 }
  }), [shouldReduceMotion])

  const subtitleVariants = useMemo(() => ({
    initial: { opacity: 0, y: shouldReduceMotion ? 0 : 20 },
    animate: { opacity: 1, y: 0 },
    transition: { delay: shouldReduceMotion ? 0 : 0.6, duration: shouldReduceMotion ? 0.1 : 0.5 }
  }), [shouldReduceMotion])

  // 🎨 CTAs memoizzati per performance con tracking migliorato
  const ctaButtons = useMemo(() => [
    { 
      type: 'dettaglio' as const, 
      label: t.cta1, 
      icon: '🛒', 
      gradient: 'from-green-500 to-green-600',
      trackingValue: 20
    },
    { 
      type: 'services' as const, 
      label: t.cta2, 
      icon: '🚛', 
      gradient: 'from-blue-500 to-blue-600',
      trackingValue: 25
    },
    { 
      type: 'about' as const, 
      label: t.cta3, 
      icon: '🌱', 
      gradient: 'from-gray-500 to-gray-600',
      trackingValue: 15
    }
  ], [t])

  return (
    <section
      id="hero"
      ref={ref}
      className="relative min-h-screen flex items-center justify-center overflow-hidden"
      style={{ willChange: 'transform' }}
    >
      {/* 🎬 Background Video Ottimizzato */}
      <div className="absolute inset-0 w-full h-full">
        <OptimizedVideoBackground inView={inView} />
        
        {/* Overlay ottimizzato con gradients ridotti */}
        <div className="absolute inset-0 bg-gradient-to-br from-black/50 via-black/30 to-black/60" />
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent" />
      </div>

      {/* 📱 Content ottimizzato e centrato */}
      <motion.div
        style={{ y, opacity }}
        className="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-6xl mx-auto"
      >
        {/* 🏆 Header ottimizzato */}
        <motion.div
          initial={animationVariants.initial}
          animate={animationVariants.animate}
          transition={animationVariants.transition}
          className="mb-8"
        >
          {/* Titolo principale ottimizzato */}
          <motion.h1
            initial={titleVariants.initial}
            animate={titleVariants.animate}
            transition={titleVariants.transition}
            className="text-5xl md:text-7xl lg:text-8xl font-black tracking-tight mb-4 text-center"
            style={{
              fontFamily: "'Playfair Display', serif",
              background: 'linear-gradient(135deg, #ffffff 0%, #dcfce7 50%, #22c55e 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
              filter: 'drop-shadow(0 4px 12px rgba(0,0,0,0.4))',
              willChange: 'transform'
            }}
          >
            {t.title}
          </motion.h1>
          
          {/* Sottotitolo ottimizzato */}
          <motion.h2
            initial={subtitleVariants.initial}
            animate={subtitleVariants.animate}
            transition={subtitleVariants.transition}
            className="text-xl md:text-2xl lg:text-3xl text-white/95 font-light tracking-wide mb-2 text-center"
            style={{ 
              fontFamily: "'Playfair Display', serif",
              textShadow: '0 2px 8px rgba(0,0,0,0.5)',
              willChange: 'transform'
            }}
          >
            {t.subtitle}
          </motion.h2>
        </motion.div>

        {/* 🏷️ Slogan ottimizzato */}
        <motion.div
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: shouldReduceMotion ? 0 : 0.8, duration: shouldReduceMotion ? 0.1 : 0.5 }}
          className="mb-8 text-center"
        >
          <motion.p 
            className="text-lg md:text-xl text-white/95 font-medium mb-1"
            style={{ textShadow: '0 2px 8px rgba(0,0,0,0.5)' }}
          >
            {t.tagline}
          </motion.p>
          <motion.p 
            className="text-lg md:text-xl text-white/95 font-medium"
            style={{ textShadow: '0 2px 8px rgba(0,0,0,0.5)' }}
          >
            {t.tagline2}
          </motion.p>
          
          {/* 🎯 Badge con counter animato ottimizzato */}
          <motion.div
            initial={{ opacity: 0, scale: shouldReduceMotion ? 1 : 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: shouldReduceMotion ? 0 : 1, duration: shouldReduceMotion ? 0.1 : 0.4 }}
            className="flex justify-center mt-4"
          >
            <motion.div 
              className="inline-flex items-center space-x-2 bg-gradient-to-r from-emerald-500/20 to-green-500/20 backdrop-blur-md border border-white/30 rounded-full px-6 py-3 text-white font-semibold shadow-lg"
              whileHover={shouldReduceMotion ? {} : { scale: 1.05 }}
              style={{ willChange: 'transform' }}
            >
              <motion.span 
                className="text-xl"
                animate={shouldReduceMotion ? {} : { 
                  rotate: [0, 10, -10, 0],
                  scale: [1, 1.1, 1]
                }}
                transition={shouldReduceMotion ? {} : { 
                  duration: 3, 
                  repeat: Infinity, 
                  ease: "easeInOut" 
                }}
              >
                ⭐
              </motion.span>
              <span className="flex items-center space-x-1">
                <span>{t.since}</span>
                <motion.span 
                  key={count}
                  initial={{ scale: shouldReduceMotion ? 1 : 1.2, opacity: 0.8 }}
                  animate={{ scale: 1, opacity: 1 }}
                  className="font-bold text-lg"
                >
                  {count}
                </motion.span>
                <span>{t.yearsLabel}</span>
              </span>
            </motion.div>
          </motion.div>
        </motion.div>

        {/* 🎯 CTA Buttons Ottimizzati con tracking */}
        <motion.div
          initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: shouldReduceMotion ? 0 : 1.2, duration: shouldReduceMotion ? 0.1 : 0.6 }}
          className="flex flex-col items-center space-y-6"
        >
          {/* 📱 Mobile Layout ottimizzato */}
          <div className="flex flex-col md:hidden space-y-3 w-full max-w-xs mx-auto">
            {ctaButtons.map((button, index) => (
              <motion.button
                key={button.type}
                onClick={() => handleCTAClick(button.type)}
                whileHover={shouldReduceMotion ? {} : { scale: 1.05, y: -3 }}
                whileTap={{ scale: 0.95 }}
                initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: shouldReduceMotion ? 0 : 1.4 + index * 0.1, duration: shouldReduceMotion ? 0.1 : 0.5 }}
                className={`group relative bg-gradient-to-r ${
                  button.type === 'about' 
                    ? 'border-2 border-white/50 text-white backdrop-blur-md hover:bg-white/10 hover:border-white/70' 
                    : `${button.gradient} text-white shadow-xl`
                } px-6 py-3 rounded-xl font-bold text-base transition-all duration-300 flex items-center justify-center space-x-2 w-full`}
                style={{ willChange: 'transform' }}
              >
                <span className="text-lg">{button.icon}</span>
                <span>{button.label}</span>
              </motion.button>
            ))}
          </div>

          {/* 🖥️ Desktop Layout ottimizzato */}
          <div className="hidden md:flex items-center justify-center space-x-4 lg:space-x-6">
            {ctaButtons.map((button, index) => (
              <motion.button
                key={button.type}
                onClick={() => handleCTAClick(button.type)}
                initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: shouldReduceMotion ? 0 : 1.3 + index * 0.1, duration: shouldReduceMotion ? 0.1 : 0.5 }}
                whileHover={shouldReduceMotion ? {} : { scale: 1.05, y: -4 }}
                whileTap={{ scale: 0.95 }}
                className={`group relative ${
                  button.type === 'about'
                    ? 'border-2 border-white/40 text-white backdrop-blur-md hover:bg-white/10 hover:border-white/60'
                    : `bg-gradient-to-r ${button.gradient} text-white shadow-xl hover:shadow-xl`
                } px-6 py-3 lg:px-8 lg:py-4 rounded-xl font-bold text-sm lg:text-base transition-all duration-300 flex items-center space-x-2 min-w-[140px] lg:min-w-[160px] justify-center`}
                style={{ willChange: 'transform' }}
              >
                <span className="text-lg lg:text-xl">{button.icon}</span>
                <span>{button.label}</span>
              </motion.button>
            ))}
          </div>

          {/* 📍 Scroll Indicator ottimizzato */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: shouldReduceMotion ? 0 : 2, duration: shouldReduceMotion ? 0.1 : 0.6 }}
            className="text-center mt-6 md:mt-8"
          >
            <motion.div
              animate={shouldReduceMotion ? {} : { y: [0, 8, 0] }}
              transition={shouldReduceMotion ? {} : { duration: 2, repeat: Infinity, ease: "easeInOut" }}
              className="text-white/80 flex flex-col items-center space-y-3"
            >
              {/* Icona scroll ottimizzata */}
              <div className="flex flex-col space-y-1">
                {[0, 0.2, 0.4].map((delay, index) => (
                  <motion.div 
                    key={index}
                    className="w-1 h-1 bg-white/60 rounded-full mx-auto"
                    animate={shouldReduceMotion ? {} : { 
                      opacity: [0.4, 1, 0.4],
                      scale: [1, 1.2, 1] 
                    }}
                    transition={shouldReduceMotion ? {} : { 
                      duration: 1.5, 
                      repeat: Infinity, 
                      delay 
                    }}
                  />
                ))}
              </div>
              <div className="text-xs hidden md:block font-medium opacity-80">
                Scorri per scoprire di più
              </div>
            </motion.div>
          </motion.div>
        </motion.div>
      </motion.div>

      {/* 🎨 Elementi decorativi ridotti per performance */}
      <div className="absolute top-1/4 left-0 w-48 h-48 bg-green-500/5 rounded-full blur-2xl opacity-50"></div>
      <div className="absolute bottom-1/4 right-0 w-48 h-48 bg-amber-400/5 rounded-full blur-2xl opacity-50"></div>
    </section>
  )
}

export default React.memo(HeroSection)


--- FILE: src/components/sections/ProductsSection.tsx ---
import React, { useState, useCallback, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface ProductsSectionProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'I Nostri Prodotti',
    subtitle: 'Oltre 150 varietà di frutta e verdura fresca selezionata ogni giorno',
    categories: [
      {
        id: 'fruits',
        title: 'Frutta Fresca',
        shortDesc: 'Varietà di stagione dal Trentino e oltre',
        description: 'La nostra frutta viene selezionata alle prime ore del mattino dai migliori produttori del Trentino Alto Adige e da fornitori selezionati in tutta Italia.',
        longDescription: 'Ogni giorno iniziamo la nostra giornata controllando personalmente ogni cassetta di frutta che arriva al nostro deposito. Dalle famose mele Melinda del Trentino agli agrumi siciliani, dalla frutta esotica di stagione ai piccoli frutti di montagna, garantiamo sempre la massima freschezza e qualità. La nostra esperienza di 50 anni ci permette di selezionare solo i prodotti migliori per i nostri clienti.',
        icon: '🍎',
        color: 'from-red-500 to-orange-500',
        image: '/images/melinda_golden.webp',
        products: [
          { name: 'Mele Melinda DOP', season: 'Tutto l\'anno', origin: 'Val di Non' },
          { name: 'Kiwi Gold Premium', season: 'Ott-Apr', origin: 'Nuova Zelanda' },
          { name: 'Pesche & Albicocche', season: 'Giu-Set', origin: 'Emilia Romagna' },
          { name: 'Uva da tavola Italia', season: 'Ago-Nov', origin: 'Puglia/Sicilia' },
          { name: 'Agrumi Premium', season: 'Nov-Apr', origin: 'Sicilia/Calabria' },
          { name: 'Frutti di bosco', season: 'Mag-Set', origin: 'Val di Sole' },
          { name: 'Pere Williams', season: 'Lug-Ott', origin: 'Val di Non' },
          { name: 'Fragole di montagna', season: 'Mar-Giu', origin: 'Altopiani trentini' },
          { name: 'Susine Regina Claudia', season: 'Lug-Set', origin: 'Trentino' },
          { name: 'Ciliegie Duroni', season: 'Mag-Lug', origin: 'Vignola/Trentino' }
        ],
        features: [
          { icon: '🌅', title: 'Selezione Mattutina', desc: 'Controllo qualità alle prime ore' },
          { icon: '❄️', title: 'Catena del Freddo', desc: 'Conservazione ottimale garantita' },
          { icon: '🏔️', title: 'Prodotti Alpini', desc: 'Specialità del territorio trentino' },
          { icon: '📦', title: 'Packaging Curato', desc: 'Confezionamento per preservare la freschezza' }
        ]
      },
      {
        id: 'vegetables',
        title: 'Verdure Fresche',
        shortDesc: 'Dal campo alla tavola in 24 ore',
        description: 'Le nostre verdure arrivano direttamente dai campi del Trentino Alto Adige e del Veneto, garantendo freschezza e sapore autentici.',
        longDescription: 'Collaboriamo direttamente con i migliori agricoltori del territorio per offrire verdure di stagione sempre fresche e saporite. I nostri famosi pomodori cuore di bue, le zucche di Mantova, i cavoli verza del Trentino e tutte le verdure a foglia verde vengono selezionate una per una. Privilegiamo sempre i prodotti a chilometro zero quando possibile, per ridurre l\'impatto ambientale e garantire la massima freschezza.',
        icon: '🥬',
        color: 'from-green-500 to-emerald-500',
        image: '/images/pomodori_cuore_bue.webp',
        products: [
          { name: 'Pomodori Cuore di Bue', season: 'Mag-Set', origin: 'Trentino' },
          { name: 'Zucche di Mantova', season: 'Set-Feb', origin: 'Lombardia' },
          { name: 'Insalate Miste', season: 'Tutto l\'anno', origin: 'Veneto' },
          { name: 'Cavoli e Verze', season: 'Ott-Mar', origin: 'Trentino' },
          { name: 'Asparagi Bianchi', season: 'Mar-Giu', origin: 'Zambana/Lungo Adige' },
          { name: 'Radicchio di Treviso', season: 'Nov-Feb', origin: 'Veneto' },
          { name: 'Patate di montagna', season: 'Ago-Mar', origin: 'Altopiani trentini' },
          { name: 'Melanzane viola', season: 'Giu-Set', origin: 'Trentino/Veneto' },
          { name: 'Zucchine tonde', season: 'Mag-Set', origin: 'Valle dei Laghi' },
          { name: 'Pomodori San Marzano', season: 'Lug-Set', origin: 'Campania' }
        ],
        features: [
          { icon: '🚚', title: 'Filiera Corta', desc: 'Dal produttore in massimo 24 ore' },
          { icon: '🌱', title: 'Coltivazione Tradizionale', desc: 'Metodi rispettosi dell\'ambiente' },
          { icon: '📍', title: 'Km Zero', desc: 'Priorità ai produttori locali del Trentino' },
          { icon: '🧺', title: 'Varietà Stagionali', desc: 'Seguiamo i ritmi naturali delle stagioni' }
        ]
      },
      {
        id: 'specialties',
        title: 'Specialità Locali',
        shortDesc: 'Prodotti tipici del territorio trentino',
        description: 'Selezioniamo i migliori prodotti tipici del Trentino Alto Adige per portare sulla tua tavola i sapori autentici della nostra terra.',
        longDescription: 'Il Trentino Alto Adige è ricco di eccellenze enogastronomiche che rappresentiamo con orgoglio. Dalle mele Melinda DOP alle pere della Val di Non, dai piccoli frutti di montagna alle erbe aromatiche alpine, ogni prodotto racconta la storia del nostro territorio. Lavoriamo anche con piccoli produttori locali per offrirti specialità uniche che difficilmente trovi altrove, come le antiche varietà di mele recuperate o i frutti dimenticati delle nostre montagne.',
        icon: '🏔️',
        color: 'from-blue-500 to-indigo-500',
        image: '/images/kiwi-cuore.webp',
        products: [
          { name: 'Mele Melinda DOP', season: 'Set-Lug', origin: 'Val di Non' },
          { name: 'Pere Williams', season: 'Ago-Nov', origin: 'Val di Non' },
          { name: 'Piccoli Frutti', season: 'Giu-Set', origin: 'Val di Sole' },
          { name: 'Erbe Aromatiche Alpine', season: 'Mar-Set', origin: 'Altopiani' },
          { name: 'Castagne', season: 'Set-Nov', origin: 'Valsugana' },
          { name: 'Noci della Valle', season: 'Set-Mar', origin: 'Valle dell\'Adige' },
          { name: 'Funghi Porcini', season: 'Set-Nov', origin: 'Boschi trentini' },
          { name: 'Mirtilli di montagna', season: 'Lug-Set', origin: 'Sopra i 1000m' },
          { name: 'Lamponi selvatici', season: 'Giu-Ago', origin: 'Val di Fiemme' },
          { name: 'More di rovo', season: 'Ago-Set', origin: 'Valli alpine' }
        ],
        features: [
          { icon: '🏅', title: 'Certificazioni DOP', desc: 'Prodotti a denominazione protetta' },
          { icon: '🌸', title: 'Varietà Antiche', desc: 'Frutti tradizionali recuperati' },
          { icon: '⛰️', title: 'Alta Montagna', desc: 'Prodotti coltivati oltre i 1000m' },
          { icon: '🤝', title: 'Piccoli Produttori', desc: 'Sosteniamo l\'agricoltura familiare' }
        ]
      }
    ]
  },
  de: {
    title: 'Unsere Produkte',
    subtitle: 'Über 150 Sorten frisches Obst und Gemüse täglich ausgewählt',
    categories: [
      {
        id: 'fruits',
        title: 'Frisches Obst',
        shortDesc: 'Saisonale Sorten aus Südtirol und darüber hinaus',
        description: 'Unser Obst wird in den frühen Morgenstunden von den besten Produzenten Südtirols und ausgewählten Lieferanten aus ganz Italien ausgewählt.',
        longDescription: 'Jeden Tag beginnen wir unseren Tag damit, jede Obstkiste persönlich zu kontrollieren, die in unserem Lager ankommt. Von den berühmten Melinda-Äpfeln aus Südtirol bis zu sizilianischen Zitrusfrüchten, von exotischen Saisonfrüchten bis zu kleinen Bergfrüchten garantieren wir immer maximale Frische und Qualität.',
        icon: '🍎',
        color: 'from-red-500 to-orange-500',
        image: '/images/melinda_golden.webp',
        products: [
          { name: 'Melinda DOP Äpfel', season: 'Ganzjährig', origin: 'Nonstal' },
          { name: 'Kiwi Gold Premium', season: 'Okt-Apr', origin: 'Neuseeland' },
          { name: 'Pfirsiche & Aprikosen', season: 'Jun-Sep', origin: 'Emilia Romagna' },
          { name: 'Tafeltrauben Italien', season: 'Aug-Nov', origin: 'Apulien/Sizilien' },
          { name: 'Premium Zitrusfrüchte', season: 'Nov-Apr', origin: 'Sizilien/Kalabrien' },
          { name: 'Waldbeeren', season: 'Mai-Sep', origin: 'Sulztal' },
          { name: 'Williams Birnen', season: 'Jul-Okt', origin: 'Nonstal' },
          { name: 'Bergerdbeeren', season: 'Mär-Jun', origin: 'Südtiroler Hochebenen' },
          { name: 'Königin Claudia Pflaumen', season: 'Jul-Sep', origin: 'Südtirol' },
          { name: 'Duroni Kirschen', season: 'Mai-Jul', origin: 'Vignola/Südtirol' }
        ],
        features: [
          { icon: '🌅', title: 'Morgendliche Auswahl', desc: 'Qualitätskontrolle in den frühen Stunden' },
          { icon: '❄️', title: 'Kühlkette', desc: 'Optimale Konservierung garantiert' },
          { icon: '🏔️', title: 'Alpine Produkte', desc: 'Spezialitäten des Südtiroler Gebiets' },
          { icon: '📦', title: 'Sorgfältige Verpackung', desc: 'Verpackung zur Erhaltung der Frische' }
        ]
      },
      {
        id: 'vegetables',
        title: 'Frisches Gemüse',
        shortDesc: 'Vom Feld auf den Tisch in 24 Stunden',
        description: 'Unser Gemüse kommt direkt von den Feldern Südtirols und Venetiens und garantiert authentische Frische und Geschmack.',
        longDescription: 'Wir arbeiten direkt mit den besten Landwirten des Gebiets zusammen, um saisonales Gemüse anzubieten, das immer frisch und schmackhaft ist. Unsere berühmten Ochsenherz-Tomaten, Kürbisse aus Mantua, Südtiroler Kohl und alle Blattgemüse werden einzeln ausgewählt.',
        icon: '🥬',
        color: 'from-green-500 to-emerald-500',
        image: '/images/pomodori_cuore_bue.webp',
        products: [
          { name: 'Ochsenherz-Tomaten', season: 'Mai-Sep', origin: 'Südtirol' },
          { name: 'Mantua Kürbisse', season: 'Sep-Feb', origin: 'Lombardei' },
          { name: 'Gemischte Salate', season: 'Ganzjährig', origin: 'Venetien' },
          { name: 'Kohl und Wirsing', season: 'Okt-Mär', origin: 'Südtirol' },
          { name: 'Weißer Spargel', season: 'Mär-Jun', origin: 'Zambana/Lungo Adige' },
          { name: 'Treviso Radicchio', season: 'Nov-Feb', origin: 'Venetien' },
          { name: 'Bergkartoffeln', season: 'Aug-Mär', origin: 'Südtiroler Hochebenen' },
          { name: 'Violette Auberginen', season: 'Jun-Sep', origin: 'Südtirol/Venetien' },
          { name: 'Runde Zucchini', season: 'Mai-Sep', origin: 'Tal der Seen' },
          { name: 'San Marzano Tomaten', season: 'Jul-Sep', origin: 'Kampanien' }
        ],
        features: [
          { icon: '🚚', title: 'Kurze Lieferkette', desc: 'Vom Produzenten in maximal 24 Stunden' },
          { icon: '🌱', title: 'Traditioneller Anbau', desc: 'Umweltschonende Methoden' },
          { icon: '📍', title: 'Km Zero', desc: 'Priorität für lokale Südtiroler Produzenten' },
          { icon: '🧺', title: 'Saisonale Sorten', desc: 'Wir folgen den natürlichen Jahreszeiten' }
        ]
      },
      {
        id: 'specialties',
        title: 'Lokale Spezialitäten',
        shortDesc: 'Typische Produkte des Südtiroler Gebiets',
        description: 'Wir wählen die besten typischen Produkte Südtirols aus, um die authentischen Aromen unseres Landes auf Ihren Tisch zu bringen.',
        longDescription: 'Südtirol ist reich an gastronomischen Exzellenzen, die wir mit Stolz vertreten. Von Melinda DOP-Äpfeln bis zu Birnen aus dem Nonstal, von kleinen Bergfrüchten bis zu alpinen Kräutern erzählt jedes Produkt die Geschichte unseres Gebiets.',
        icon: '🏔️',
        color: 'from-blue-500 to-indigo-500',
        image: '/images/kiwi-cuore.webp',
        products: [
          { name: 'Melinda DOP Äpfel', season: 'Sep-Jul', origin: 'Nonstal' },
          { name: 'Williams Birnen', season: 'Aug-Nov', origin: 'Nonstal' },
          { name: 'Kleine Früchte', season: 'Jun-Sep', origin: 'Sulztal' },
          { name: 'Alpine Kräuter', season: 'Mär-Sep', origin: 'Hochebenen' },
          { name: 'Kastanien', season: 'Sep-Nov', origin: 'Valsugana' },
          { name: 'Talnüsse', season: 'Sep-Mär', origin: 'Etschtal' },
          { name: 'Steinpilze', season: 'Sep-Nov', origin: 'Südtiroler Wälder' },
          { name: 'Bergblaubeeren', season: 'Jul-Sep', origin: 'Über 1000m' },
          { name: 'Wilde Himbeeren', season: 'Jun-Aug', origin: 'Fleimstal' },
          { name: 'Brombeeren', season: 'Aug-Sep', origin: 'Alpentäler' }
        ],
        features: [
          { icon: '🏅', title: 'DOP-Zertifizierungen', desc: 'Produkte mit geschützter Herkunftsbezeichnung' },
          { icon: '🌸', title: 'Alte Sorten', desc: 'Wiedergewonnene traditionelle Früchte' },
          { icon: '⛰️', title: 'Hochgebirge', desc: 'Produkte über 1000m angebaut' },
          { icon: '🤝', title: 'Kleine Produzenten', desc: 'Wir unterstützen die Familienwirtschaft' }
        ]
      }
    ]
  }
}

// 🎭 COMPONENTI OTTIMIZZATI CON MEMOIZZAZIONE
const MobileProductCard: React.FC<{
  category: any
  index: number
  isExpanded: boolean
  onToggle: () => void
}> = React.memo(({ category, index, isExpanded, onToggle }) => {
  const [ref, inView] = useInView({
    threshold: 0.2,
    triggerOnce: true
  })

  const [imageLoaded, setImageLoaded] = useState(false)

  const cardVariants = useMemo(() => ({
    hidden: { opacity: 0, y: 20, scale: 0.98 },
    visible: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: {
        duration: 0.4,
        delay: index * 0.1,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={cardVariants}
      className="bg-white rounded-2xl overflow-hidden shadow-lg border border-gray-100"
    >
      {/* Header */}
      <div className="relative h-48 overflow-hidden">
        {!imageLoaded && (
          <div className="absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 animate-pulse" />
        )}
        
        <img
          src={category.image}
          alt={category.title}
          className="w-full h-full object-cover"
          loading="lazy"
          onLoad={() => setImageLoaded(true)}
          style={{ 
            opacity: imageLoaded ? 1 : 0,
            transition: 'opacity 0.3s ease'
          }}
        />
        <div className={`absolute inset-0 bg-gradient-to-t ${category.color} opacity-75`} />
        
        <div className="absolute inset-0 p-5 flex flex-col justify-end text-white">
          <div className="text-3xl mb-2">{category.icon}</div>
          <h3 className="text-xl font-bold mb-1">{category.title}</h3>
          <p className="text-white/90 text-sm">{category.shortDesc}</p>
        </div>
      </div>

      {/* Content */}
      <div className="p-5">
        <p className="text-gray-700 leading-relaxed mb-4 text-sm">
          {category.description}
        </p>

        {/* Quick Products Preview */}
        <div className="mb-5">
          <h4 className="font-semibold text-gray-900 mb-3 text-sm">Alcuni esempi della nostra selezione:</h4>
          <p className="text-xs text-gray-500 mb-3 italic">*Disponibilità variabile secondo stagione e mercato</p>
          <div className="flex flex-wrap gap-2">
            {category.products.slice(0, 3).map((product: any, i: number) => (
              <span key={i} className="bg-gray-100 text-gray-700 px-2 py-1 rounded-full text-xs">
                {product.name}
              </span>
            ))}
            {category.products.length > 3 && (
              <span className="bg-gray-200 text-gray-600 px-2 py-1 rounded-full text-xs">
                +{category.products.length - 3} altri...
              </span>
            )}
          </div>
        </div>

        {/* Toggle Button */}
        <motion.button
          onClick={onToggle}
          whileTap={{ scale: 0.98 }}
          className={`w-full py-3 px-4 rounded-xl font-medium transition-all duration-300 flex items-center justify-center space-x-2 text-sm ${
            isExpanded 
              ? `bg-gradient-to-r ${category.color} text-white` 
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
        >
          <span>{isExpanded ? 'Mostra Meno' : 'Scopri Tutti i Prodotti'}</span>
          <motion.div
            animate={{ rotate: isExpanded ? 180 : 0 }}
            transition={{ duration: 0.2 }}
          >
            ▼
          </motion.div>
        </motion.button>

        {/* Expanded Content */}
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.25 }}
              className="mt-5 pt-5 border-t border-gray-100"
            >
              <p className="text-gray-600 leading-relaxed mb-5 text-sm">
                {category.longDescription}
              </p>

              {/* Complete Products List */}
              <div className="mb-5">
                <h4 className="font-semibold text-gray-900 mb-3 text-sm">Esempi della nostra selezione stagionale:</h4>
                <p className="text-xs text-gray-500 mb-3 italic">*La disponibilità varia secondo stagione, mercato e qualità</p>
                <div className="grid grid-cols-1 gap-2">
                  {category.products.map((product: any, i: number) => (
                    <motion.div
                      key={i}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.2, delay: i * 0.03 }}
                      className="flex justify-between items-center p-2 bg-gray-50 rounded-lg"
                    >
                      <div>
                        <h5 className="font-medium text-gray-900 text-sm">{product.name}</h5>
                        <p className="text-xs text-gray-600">{product.origin}</p>
                      </div>
                      <span className="bg-white text-gray-700 px-2 py-1 rounded-full text-xs">
                        {product.season}
                      </span>
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* Features */}
              <div>
                <h4 className="font-semibold text-gray-900 mb-3 text-sm">I nostri plus:</h4>
                <div className="space-y-2">
                  {category.features.map((feature: any, i: number) => (
                    <motion.div
                      key={i}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.2, delay: i * 0.05 }}
                      className="flex items-start space-x-3 p-2 rounded-lg bg-gray-50"
                    >
                      <div className="text-lg">{feature.icon}</div>
                      <div>
                        <h5 className="font-medium text-gray-900 mb-1 text-sm">{feature.title}</h5>
                        <p className="text-gray-600 text-xs">{feature.desc}</p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  )
})

MobileProductCard.displayName = 'MobileProductCard'

const DesktopProductCard: React.FC<{
  category: any
  index: number
  isActive: boolean
  onClick: () => void
}> = React.memo(({ category, index, isActive, onClick }) => {
  const [ref, inView] = useInView({
    threshold: 0.2,
    triggerOnce: true
  })

  const [imageLoaded, setImageLoaded] = useState(false)

  const cardVariants = useMemo(() => ({
    hidden: { opacity: 0, y: 20, scale: 0.98 },
    visible: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: {
        duration: 0.4,
        delay: index * 0.1,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={cardVariants}
      className="relative"
    >
      <motion.div
        onClick={onClick}
        whileHover={{ y: -3, scale: 1.01 }}
        whileTap={{ scale: 0.99 }}
        className={`
          relative overflow-hidden rounded-2xl cursor-pointer transition-all duration-250
          ${isActive 
            ? 'ring-2 ring-offset-1 ring-green-400 shadow-xl' 
            : 'shadow-lg hover:shadow-xl'
          }
        `}
        style={{ willChange: 'transform' }}
      >
        <div className="relative h-56 overflow-hidden">
          {!imageLoaded && (
            <div className="absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 animate-pulse" />
          )}
          
          <img
            src={category.image}
            alt={category.title}
            className="w-full h-full object-cover"
            loading="lazy"
            onLoad={() => setImageLoaded(true)}
            style={{ 
              opacity: imageLoaded ? 1 : 0,
              transition: 'opacity 0.3s ease',
              willChange: 'opacity'
            }}
          />
          <div className={`absolute inset-0 bg-gradient-to-t ${category.color} opacity-75`} />
        </div>

        <div className="absolute inset-0 flex flex-col justify-end p-5 text-white">
          <div className="text-3xl mb-3">{category.icon}</div>
          <h3 className="text-lg font-bold mb-2">{category.title}</h3>
          <p className="text-white/90 text-sm mb-3">{category.shortDesc}</p>
          
          <div className="flex flex-wrap gap-1">
            {category.products.slice(0, 2).map((product: any, i: number) => (
              <span key={i} className="bg-white/20 text-white px-2 py-1 rounded-full text-xs">
                {product.name}
              </span>
            ))}
          </div>
        </div>

        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0 }}
              transition={{ duration: 0.15 }}
              className="absolute top-3 right-3 w-6 h-6 bg-white rounded-full flex items-center justify-center"
            >
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </motion.div>
  )
})

DesktopProductCard.displayName = 'DesktopProductCard'

const ProductsSection: React.FC<ProductsSectionProps> = ({ language, inView }) => {
  const [activeCategory, setActiveCategory] = useState(0)
  const [expandedMobile, setExpandedMobile] = useState<number | null>(null)
  
  const t = useMemo(() => translations[language], [language])

  const handleMobileToggle = useCallback((index: number) => {
    setExpandedMobile(prev => prev === index ? null : index)
  }, [])

  const handleDesktopClick = useCallback((index: number) => {
    setActiveCategory(index)
  }, [])

  return (
    <section id="products" className="py-20 lg:py-24 bg-gradient-to-br from-green-50 via-white to-emerald-50 relative overflow-hidden">
      {/* Background Elements OTTIMIZZATI */}
      <div className="absolute inset-0 opacity-25 pointer-events-none">
        <div className="absolute top-0 left-1/4 w-80 h-80 bg-green-200 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-80 h-80 bg-emerald-200 rounded-full blur-3xl"></div>
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header OTTIMIZZATO */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl lg:text-5xl font-bold text-gray-900 mb-5 bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
            {t.title}
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            {t.subtitle}
          </p>
        </motion.div>

        {/* Mobile Layout */}
        <div className="block lg:hidden space-y-6 mb-16">
          {t.categories.map((category, index) => (
            <MobileProductCard
              key={category.id}
              category={category}
              index={index}
              isExpanded={expandedMobile === index}
              onToggle={() => handleMobileToggle(index)}
            />
          ))}
        </div>

        {/* Desktop Layout */}
        <div className="hidden lg:grid lg:grid-cols-3 gap-6 items-start mb-16">
          {t.categories.map((category, index) => (
            <DesktopProductCard
              key={category.id}
              category={category}
              index={index}
              isActive={activeCategory === index}
              onClick={() => handleDesktopClick(index)}
            />
          ))}
        </div>

        {/* Desktop Details Panel OTTIMIZZATO */}
        <div className="hidden lg:block">
          <AnimatePresence mode="wait">
            <motion.div
              key={activeCategory}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3, ease: [0.25, 0.46, 0.45, 0.94] }}
              className="bg-white rounded-2xl shadow-xl p-6 lg:p-8"
              style={{ willChange: 'transform, opacity' }}
            >
              {/* Header */}
              <div className="flex items-center space-x-5 mb-6">
                <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${t.categories[activeCategory].color} flex items-center justify-center text-2xl`}>
                  {t.categories[activeCategory].icon}
                </div>
                <div>
                  <h3 className="text-2xl xl:text-3xl font-bold text-gray-900">{t.categories[activeCategory].title}</h3>
                  <p className="text-gray-600">{t.categories[activeCategory].shortDesc}</p>
                </div>
              </div>

              {/* Description */}
              <div className="mb-6">
                <p className="text-lg text-gray-700 leading-relaxed mb-3">
                  {t.categories[activeCategory].description}
                </p>
                <p className="text-gray-600 leading-relaxed">
                  {t.categories[activeCategory].longDescription}
                </p>
              </div>

              {/* Products Grid */}
              <div className="mb-6">
                <h4 className="text-xl font-semibold text-gray-900 mb-3">Esempi della nostra selezione:</h4>
                <p className="text-sm text-gray-500 mb-4 italic">*Disponibilità variabile secondo stagione, qualità e mercato di riferimento</p>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                  {t.categories[activeCategory].products.map((product: any, index: number) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.2, delay: index * 0.03 }}
                      className="bg-gray-50 rounded-xl p-3 hover:bg-gray-100 transition-colors duration-150"
                    >
                      <h5 className="font-semibold text-gray-900 mb-1 text-sm">{product.name}</h5>
                      <div className="flex justify-between items-center text-xs">
                        <span className="text-gray-600">{product.origin}</span>
                        <span className="bg-white text-gray-700 px-2 py-1 rounded-full">
                          {product.season}
                        </span>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* Features */}
              <div>
                <h4 className="text-xl font-semibold text-gray-900 mb-5">I nostri plus:</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {t.categories[activeCategory].features.map((feature: any, index: number) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.05 }}
                      className="flex items-start space-x-3 p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors duration-150"
                    >
                      <div className="text-2xl">{feature.icon}</div>
                      <div>
                        <h5 className="font-semibold text-gray-900 mb-1">{feature.title}</h5>
                        <p className="text-gray-600 text-sm">{feature.desc}</p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          </AnimatePresence>
        </div>

        {/* CTA Section CORRETTA E TRADOTTA - FIXED VISIBILITY */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="bg-gradient-to-br from-green-50 via-white to-emerald-50 rounded-3xl p-8 lg:p-12 mt-16 border border-green-200 shadow-lg"
        >
          <div className="text-center mb-8">
            <h3 className="text-2xl lg:text-3xl font-bold text-gray-900 mb-4">
              {language === 'it' 
                ? 'Vieni a Scoprire la Qualità Bottamedi' 
                : 'Entdecken Sie die Bottamedi-Qualität'
              }
            </h3>
            <p className="text-lg text-gray-600 mb-6 max-w-3xl mx-auto">
              {language === 'it'
                ? 'Visita il nostro banchetto in Via Cavalleggeri Udine a Mezzolombardo e lasciati guidare dalla nostra esperienza di 50 anni nella selezione dei prodotti migliori.'
                : 'Besuchen Sie unseren Marktstand in der Via Cavalleggeri Udine in Mezzolombardo und lassen Sie sich von unserer 50-jährigen Erfahrung bei der Auswahl der besten Produkte leiten.'
              }
            </p>
          </div>
          
          {/* Grid di caratteristiche */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            {[
              {
                icon: '🌅',
                title: language === 'it' ? 'Selezione Mattutina' : 'Morgendliche Auswahl',
                desc: language === 'it' 
                  ? 'Prodotti freschi selezionati alle prime ore' 
                  : 'Frische Produkte in den frühen Morgenstunden ausgewählt'
              },
              {
                icon: '🏔️',
                title: language === 'it' ? 'Prodotti del Territorio' : 'Regionale Produkte',
                desc: language === 'it' 
                  ? 'Eccellenze del Trentino Alto Adige' 
                  : 'Exzellenz aus Südtirol'
              },
              {
                icon: '👨‍👩‍👧‍👦',
                title: language === 'it' ? 'Tradizione Familiare' : 'Familientradition',
                desc: language === 'it' 
                  ? '3 generazioni di passione ed esperienza' 
                  : '3 Generationen Leidenschaft und Erfahrung'
              },
              {
                icon: '⭐',
                title: language === 'it' ? 'Qualità Garantita' : 'Garantierte Qualität',
                desc: language === 'it' 
                  ? 'Standard elevati da oltre 50 anni' 
                  : 'Hohe Standards seit über 50 Jahren'
              }
            ].map((feature, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}
                className="bg-white rounded-2xl p-4 shadow-sm border border-green-100 hover:shadow-md transition-all duration-300"
              >
                <div className="text-2xl mb-2 text-center">{feature.icon}</div>
                <h4 className="font-semibold text-gray-900 text-sm text-center mb-1">
                  {feature.title}
                </h4>
                <p className="text-gray-600 text-xs text-center leading-relaxed">
                  {feature.desc}
                </p>
              </motion.div>
            ))}
          </div>

          {/* Buttons d'azione */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <motion.button
              whileHover={{ scale: 1.03, y: -2 }}
              whileTap={{ scale: 0.97 }}
              onClick={() => {
                const element = document.getElementById('dettaglio')
                if (element) {
                  const offset = 80
                  const elementPosition = element.offsetTop - offset
                  window.scrollTo({
                    top: Math.max(0, elementPosition),
                    behavior: 'smooth'
                  })
                }
              }}
              className="inline-flex items-center justify-center space-x-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white px-8 py-4 rounded-xl font-semibold text-base shadow-lg hover:shadow-xl transition-all duration-300 min-w-[200px]"
            >
              <span>🛒</span>
              <span>
                {language === 'it' ? 'Visita il Banchetto' : 'Besuchen Sie den Marktstand'}
              </span>
            </motion.button>

            <motion.button
              onClick={() => {
                const element = document.getElementById('wholesale')
                if (element) {
                  const offset = 80
                  const elementPosition = element.offsetTop - offset
                  window.scrollTo({
                    top: Math.max(0, elementPosition),
                    behavior: 'smooth'
                  })
                }
              }}
              whileHover={{ scale: 1.03, y: -2 }}
              whileTap={{ scale: 0.97 }}
              className="inline-flex items-center justify-center space-x-2 border-2 border-green-500 text-green-600 px-8 py-4 rounded-xl font-semibold text-base hover:bg-green-50 transition-all duration-300 min-w-[200px]"
            >
              <span>🏢</span>
              <span>
                {language === 'it' ? 'Servizio Ingrosso' : 'Großhandel Service'}
              </span>
            </motion.button>
          </div>

          {/* Informazioni di contatto ottimizzate */}
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.8 }}
            className="mt-8 pt-6 border-t border-green-200"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
              {/* Banchetto Info */}
              <div className="text-center">
                <h4 className="font-semibold text-gray-900 mb-2 flex items-center justify-center space-x-2">
                  <span>🛒</span>
                  <span>
                    {language === 'it' ? 'Banchetto (Dettaglio)' : 'Marktstand (Einzelhandel)'}
                  </span>
                </h4>
                <div className="space-y-1 text-sm text-gray-600">
                  <div className="flex items-center justify-center space-x-2">
                    <span>📍</span>
                    <span>Via Cavalleggeri Udine, Mezzolombardo (TN)</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <span>🕒</span>
                    <span>
                      {language === 'it' ? 'Lun-Sab: 07:00-19:30' : 'Mo-Sa: 07:00-19:30'}
                    </span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <span>📞</span>
                    <span>+39 351 577 6198</span>
                  </div>
                </div>
              </div>

              {/* HORECA Info */}
              <div className="text-center">
                <h4 className="font-semibold text-gray-900 mb-2 flex items-center justify-center space-x-2">
                  <span>🏢</span>
                  <span>
                    {language === 'it' ? 'Ingrosso HORECA' : 'Großhandel HORECA'}
                  </span>
                </h4>
                <div className="space-y-1 text-sm text-gray-600">
                  <div className="flex items-center justify-center space-x-2">
                    <span>📍</span>
                    <span>Via A. de Gasperi, 47, Mezzolombardo (TN)</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <span>📞</span>
                    <span>+39 0461 602534</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <span>📧</span>
                    <span>bottamedipierluigi@virgilio.it</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Call to action finale */}
            <div className="text-center mt-6">
              <p className="text-gray-600 text-sm max-w-2xl mx-auto">
                {language === 'it'
                  ? '💡 Hai bisogno di consigli? Il nostro team è sempre disponibile per guidarti nella scelta dei prodotti migliori per le tue esigenze!'
                  : '💡 Brauchen Sie Beratung? Unser Team steht Ihnen immer zur Verfügung, um Sie bei der Auswahl der besten Produkte für Ihre Bedürfnisse zu unterstützen!'
                }
              </p>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  )
}

export default ProductsSection


--- FILE: src/components/sections/ServicesSection.tsx ---
import React, { useState, useCallback, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

interface ServicesSectionProps {
  language: 'it' | 'de'
  inView?: boolean
}

const translations = {
  it: {
    title: 'I Nostri Servizi',
    subtitle: 'Due modalità per portare l\'eccellenza Bottamedi sulla tua tavola',
    whatWeOffer: 'I nostri punti di forza:',
    services: [
      {
        id: 'dettaglio',
        title: 'Il Nostro Banchetto',
        shortDesc: 'Esperienza diretta con prodotti di qualità superiore',
        description: 'Nel cuore di Mezzolombardo, il nostro colorato banchetto rappresenta molto più di un semplice punto vendita. È il luogo dove la tradizione familiare incontra l\'eccellenza quotidiana, dove ogni prodotto racconta una storia di qualità.',
        longDescription: 'Ogni alba segna l\'inizio di una nuova giornata di selezione meticolosa. Il nostro team, forte di tre generazioni di esperienza, sceglie personalmente frutta e verdura freschissima, creando un caleidoscopio di sapori che rappresenta il meglio del territorio trentino e delle migliori produzioni italiane. Qui non trovi solo prodotti freschi, ma anche la competenza e i consigli di chi conosce ogni sfumatura del settore ortofrutticolo.',
        features: [
          { icon: '🌅', title: 'Selezione Alba', desc: 'Controllo qualità e scelta prodotti alle prime ore del mattino' },
          { icon: '🎨', title: 'Varietà Premium', desc: 'Oltre 150 tipologie di frutta e verdura sempre disponibili' },
          { icon: '👨‍👩‍👧‍👦', title: 'Esperienza Generazionale', desc: 'Consigli e saperi tramandati da tre generazioni di specialisti' },
          { icon: '🏔️', title: 'Prodotti del Territorio', desc: 'Eccellenze locali del Trentino Alto Adige accuratamente selezionate' },
          { icon: '💝', title: 'Attenzione Personalizzata', desc: 'Servizio dedicato e consulenza individuale per ogni cliente' },
          { icon: '🕰️', title: 'Disponibilità Estesa', desc: 'Aperti 6 giorni su 7 con orari pensati per la tua comodità' }
        ],
        icon: '🛒',
        color: 'from-green-500 to-green-600',
        bgColor: 'bg-green-50',
        textColor: 'text-green-600',
        image: '/images/banchetto.webp',
        stats: [
          { label: 'Anni di tradizione', value: '50' },
          { label: 'Varietà disponibili', value: '150+' },
          { label: 'Clienti fedeli', value: '500+' }
        ]
      },
      {
        id: 'services',
        title: 'Divisione Ingrosso HORECA',
        shortDesc: 'Partner strategico per la ristorazione di qualità',
        description: 'La nostra divisione ingrosso rappresenta l\'anima pulsante dell\'attività Bottamedi: forniamo quotidianamente ristoranti d\'eccellenza, hotel di prestigio, pizzerie gourmet e attività commerciali con la medesima passione e rigore qualitativo che contraddistingue il nostro banchetto.',
        longDescription: 'Non siamo semplici fornitori, ma veri partner strategici che comprendono e anticipano le esigenze del settore professionale. La nostra consolidata esperienza ci permette di servire con successo anche realtà istituzionali del territorio, garantendo sempre standard qualitativi superiori. Ogni alba il nostro team specializzato seleziona i prodotti migliori, applicando protocolli di qualità sviluppati in decenni di esperienza nel settore HORECA.',
        features: [
          { icon: '🚚', title: 'Logistica Affidabile', desc: 'Consegne puntuali 6 giorni su 7 con orari concordati e rispettati' },
          { icon: '🔍', title: 'Controllo Qualità Totale', desc: 'Selezione rigorosa e verifica su ogni singolo prodotto fornito' },
          { icon: '📋', title: 'Condizioni Dedicate', desc: 'Listini personalizzati e condizioni commerciali studiate per ogni cliente' },
          { icon: '🤝', title: 'Relazioni Durature', desc: 'Partnership consolidate basate su fiducia reciproca e professionalità' },
          { icon: '📱', title: 'Ordinazioni Semplificate', desc: 'Sistema di ordini efficiente e comunicazione diretta sempre disponibile' },
          { icon: '🎯', title: 'Consulenza Stagionale', desc: 'Supporto esperto su disponibilità, stagionalità e tendenze di mercato' }
        ],
        icon: '🚛',
        color: 'from-blue-500 to-blue-600',
        bgColor: 'bg-blue-50',
        textColor: 'text-blue-600',
        image: '/images/albicocche_ingrosso_magazzino.webp',
        stats: [
          { label: 'Partner commerciali', value: '50+' },
          { label: 'Consegne settimanali', value: '300+' },
          { label: 'Anni nel settore HORECA', value: '30+' }
        ]
      }
    ]
  },
  de: {
    title: 'Unsere Dienstleistungen',
    subtitle: 'Zwei Modalitäten, um Bottamedi-Exzellenz auf Ihren Tisch zu bringen',
    whatWeOffer: 'Unsere Stärken:',
    services: [
      {
        id: 'dettaglio',
        title: 'Unser Marktstand',
        shortDesc: 'Direkter Kontakt mit Produkten höchster Qualität',
        description: 'Im Herzen von Mezzolombardo repräsentiert unser bunter Marktstand viel mehr als nur einen Verkaufspunkt. Es ist der Ort, wo Familientradition auf tägliche Exzellenz trifft, wo jedes Produkt eine Geschichte der Qualität erzählt.',
        longDescription: 'Jede Morgendämmerung markiert den Beginn eines neuen Tages sorgfältiger Auswahl. Unser Team, gestärkt durch drei Generationen Erfahrung, wählt persönlich frischestes Obst und Gemüse aus und schafft ein Kaleidoskop von Geschmäckern, das das Beste des Südtiroler Gebiets und der besten italienischen Produktionen repräsentiert. Hier finden Sie nicht nur frische Produkte, sondern auch die Kompetenz und Beratung von denen, die jede Nuance des Obst- und Gemüsesektors kennen.',
        features: [
          { icon: '🌅', title: 'Morgendämmerung-Auswahl', desc: 'Qualitätskontrolle und Produktauswahl in den frühen Morgenstunden' },
          { icon: '🎨', title: 'Premium-Vielfalt', desc: 'Über 150 Sorten Obst und Gemüse immer verfügbar' },
          { icon: '👨‍👩‍👧‍👦', title: 'Generationenerfahrung', desc: 'Tipps und Wissen von drei Generationen Spezialisten weitergegeben' },
          { icon: '🏔️', title: 'Regionale Produkte', desc: 'Sorgfältig ausgewählte lokale Exzellenzen aus Südtirol' },
          { icon: '💝', title: 'Persönliche Betreuung', desc: 'Dedizierter Service und individuelle Beratung für jeden Kunden' },
          { icon: '🕰️', title: 'Erweiterte Verfügbarkeit', desc: '6 Tage die Woche geöffnet mit für Ihre Bequemlichkeit gedachten Zeiten' }
        ],
        icon: '🛒',
        color: 'from-green-500 to-green-600',
        bgColor: 'bg-green-50',
        textColor: 'text-green-600',
        image: '/images/banchetto.webp',
        stats: [
          { label: 'Jahre Tradition', value: '50' },
          { label: 'Verfügbare Sorten', value: '150+' },
          { label: 'Treue Kunden', value: '500+' }
        ]
      },
      {
        id: 'services',
        title: 'HORECA Großhandelsabteilung',
        shortDesc: 'Strategischer Partner für Qualitätsgastronomie',
        description: 'Unsere Großhandelsabteilung repräsentiert die pulsierende Seele der Bottamedi-Aktivität: Wir beliefern täglich Exzellenz-Restaurants, Prestige-Hotels, Gourmet-Pizzerien und Handelsbetriebe mit derselben Leidenschaft und Qualitätsstrenge, die unseren Marktstand auszeichnet.',
        longDescription: 'Wir sind nicht einfache Lieferanten, sondern echte strategische Partner, die die Bedürfnisse des professionellen Sektors verstehen und antizipieren. Unsere konsolidierte Erfahrung ermöglicht es uns, auch institutionelle Realitäten des Gebiets erfolgreich zu bedienen und dabei immer höhere Qualitätsstandards zu garantieren. Jeden Morgen wählt unser spezialisiertes Team die besten Produkte aus und wendet Qualitätsprotokolle an, die in Jahrzehnten der Erfahrung im HORECA-Sektor entwickelt wurden.',
        features: [
          { icon: '🚚', title: 'Zuverlässige Logistik', desc: 'Pünktliche Lieferungen 6 Tage die Woche zu vereinbarten und eingehaltenen Zeiten' },
          { icon: '🔍', title: 'Totale Qualitätskontrolle', desc: 'Strenge Auswahl und Überprüfung jedes einzelnen gelieferten Produkts' },
          { icon: '📋', title: 'Dedizierte Konditionen', desc: 'Personalisierte Preislisten und für jeden Kunden studierte Handelsbedingungen' },
          { icon: '🤝', title: 'Dauerhafte Beziehungen', desc: 'Konsolidierte Partnerschaften basierend auf gegenseitigem Vertrauen und Professionalität' },
          { icon: '📱', title: 'Vereinfachte Bestellungen', desc: 'Effizientes Bestellsystem und direkte Kommunikation immer verfügbar' },
          { icon: '🎯', title: 'Saisonale Beratung', desc: 'Expertenunterstützung zu Verfügbarkeit, Saisonalität und Markttrends' }
        ],
        icon: '🚛',
        color: 'from-blue-500 to-blue-600',
        bgColor: 'bg-blue-50',
        textColor: 'text-blue-600',
        image: '/images/albicocche_ingrosso_magazzino.webp',
        stats: [
          { label: 'Geschäftspartner', value: '50+' },
          { label: 'Wöchentliche Lieferungen', value: '300+' },
          { label: 'Jahre im HORECA-Sektor', value: '30+' }
        ]
      }
    ]
  }
}

const optimizedVariants = {
  cardHover: {
    y: -3,
    scale: 1.01,
    transition: { 
      duration: 0.2, 
      ease: [0.25, 0.46, 0.45, 0.94]
    }
  },
  detailsPanel: {
    hidden: { 
      opacity: 0, 
      x: 20,
      filter: 'blur(2px)'
    },
    visible: { 
      opacity: 1, 
      x: 0,
      filter: 'blur(0px)',
      transition: {
        duration: 0.3,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    },
    exit: { 
      opacity: 0, 
      x: -20,
      filter: 'blur(2px)',
      transition: {
        duration: 0.2,
        ease: "easeIn"
      }
    }
  },
  feature: {
    hidden: { opacity: 0, y: 10 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: 0.2,
        ease: "easeOut"
      }
    }
  },
  stat: {
    hidden: { opacity: 0, scale: 0.9 },
    visible: { 
      opacity: 1, 
      scale: 1,
      transition: {
        duration: 0.2,
        ease: "easeOut"
      }
    }
  }
}

const ServiceCard: React.FC<{
  service: any
  index: number
  isActive: boolean
  onClick: () => void
  isMobile?: boolean
}> = React.memo(({ service, index, isActive, onClick, isMobile = false }) => {
  const [ref, inView] = useInView({
    threshold: 0.2,
    triggerOnce: true
  })

  const [imageLoaded, setImageLoaded] = useState(false)

  const cardVariants = useMemo(() => ({
    hidden: { opacity: 0, y: 20, scale: 0.98 },
    visible: { 
      opacity: 1, 
      y: 0,
      scale: 1,
      transition: {
        duration: 0.4,
        delay: index * 0.1,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={cardVariants}
      className="relative"
    >
      <motion.div
        onClick={onClick}
        whileHover={!isMobile ? optimizedVariants.cardHover : undefined}
        whileTap={{ scale: 0.99 }}
        className={`
          relative overflow-hidden rounded-2xl cursor-pointer transition-all duration-200
          ${isActive 
            ? 'ring-2 ring-offset-1 ring-blue-400 shadow-xl' 
            : 'shadow-lg hover:shadow-xl'
          }
          ${isMobile ? 'mb-6' : ''}
        `}
        style={{ willChange: 'transform' }}
      >
        <div className={`relative overflow-hidden ${isMobile ? 'h-56' : 'h-64'}`}>
          {!imageLoaded && (
            <div className="absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 animate-pulse" />
          )}
          
          <motion.img
            src={service.image}
            alt={service.title}
            className="w-full h-full object-cover"
            loading="lazy"
            onLoad={() => setImageLoaded(true)}
            initial={{ opacity: 0, scale: 1.05 }}
            animate={{ 
              opacity: imageLoaded ? 1 : 0,
              scale: imageLoaded ? 1 : 1.05
            }}
            transition={{ duration: 0.4 }}
            style={{ willChange: 'transform, opacity' }}
          />
          <div className={`absolute inset-0 bg-gradient-to-t ${service.color} opacity-70`} />
        </div>

        <div className="absolute inset-0 flex flex-col justify-end p-5 lg:p-6 text-white">
          <div className="text-3xl lg:text-4xl mb-3 drop-shadow-lg">{service.icon}</div>
          <h3 className="text-lg lg:text-xl xl:text-2xl font-bold mb-2 drop-shadow-lg leading-tight">
            {service.title}
          </h3>
          <p className="text-white/90 mb-3 text-sm lg:text-base drop-shadow leading-relaxed">
            {service.shortDesc}
          </p>
          
          <div className="flex space-x-4 text-xs lg:text-sm">
            {service.stats.slice(0, 2).map((stat: any, i: number) => (
              <div key={i} className="text-center">
                <div className="font-bold text-base lg:text-lg drop-shadow">{stat.value}</div>
                <div className="text-white/80 drop-shadow text-xs">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>

        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ scale: 0, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0, opacity: 0 }}
              transition={{ duration: 0.15 }}
              className="absolute top-3 right-3 w-6 h-6 bg-white rounded-full flex items-center justify-center shadow-lg"
            >
              <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </motion.div>
  )
})

ServiceCard.displayName = 'ServiceCard'

const MobileServiceCard: React.FC<{
  service: any
  index: number
  language: string
  t: any
}> = React.memo(({ service, index, language, t }) => {
  const [ref, inView] = useInView({
    threshold: 0.15,
    triggerOnce: true
  })

  const [imageLoaded, setImageLoaded] = useState(false)

  const cardVariants = useMemo(() => ({
    hidden: { opacity: 0, y: 30, scale: 0.97 },
    visible: { 
      opacity: 1, 
      y: 0,
      scale: 1,
      transition: {
        duration: 0.5,
        delay: index * 0.15,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    }
  }), [index])

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={cardVariants}
      className="bg-white rounded-2xl shadow-lg overflow-hidden mb-6"
    >
      <div className="relative h-56 overflow-hidden">
        {!imageLoaded && (
          <div className="absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 animate-pulse" />
        )}
        
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-full object-cover"
          loading="lazy"
          onLoad={() => setImageLoaded(true)}
          style={{ 
            opacity: imageLoaded ? 1 : 0,
            transition: 'opacity 0.3s ease'
          }}
        />
        <div className={`absolute inset-0 bg-gradient-to-t ${service.color} opacity-70`} />
        
        <div className="absolute inset-0 flex flex-col justify-end p-5 text-white">
          <div className="text-3xl mb-2">{service.icon}</div>
          <h3 className="text-xl font-bold mb-1">{service.title}</h3>
          <p className="text-white/90 text-sm">{service.shortDesc}</p>
        </div>
      </div>

      <div className="p-5">
        <div className="mb-5">
          <p className="text-gray-700 leading-relaxed mb-3 text-sm">
            {service.description}
          </p>
          <p className="text-gray-600 leading-relaxed text-xs">
            {service.longDescription}
          </p>
        </div>

        <div className="mb-5">
          <h4 className="text-base font-semibold text-gray-900 mb-3">{t.whatWeOffer}</h4>
          <div className="space-y-2">
            {service.features.map((feature: any, featureIndex: number) => (
              <motion.div
                key={featureIndex}
                initial="hidden"
                animate={inView ? "visible" : "hidden"}
                variants={optimizedVariants.feature}
                transition={{ delay: 0.2 + featureIndex * 0.05 }}
                className={`flex items-start space-x-3 p-3 rounded-lg ${service.bgColor} border border-gray-50`}
              >
                <div className="text-lg flex-shrink-0">{feature.icon}</div>
                <div>
                  <h5 className={`font-medium ${service.textColor} mb-1 text-sm`}>{feature.title}</h5>
                  <p className="text-gray-600 text-xs leading-relaxed">{feature.desc}</p>
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-3 gap-3">
          {service.stats.map((stat: any, statIndex: number) => (
            <motion.div
              key={statIndex}
              initial="hidden"
              animate={inView ? "visible" : "hidden"}
              variants={optimizedVariants.stat}
              transition={{ delay: 0.4 + statIndex * 0.05 }}
              className="text-center p-3 bg-gray-50 rounded-lg"
            >
              <div className={`text-xl font-bold bg-gradient-to-r ${service.color} bg-clip-text text-transparent`}>
                {stat.value}
              </div>
              <div className="text-xs text-gray-600 mt-1 leading-tight">{stat.label}</div>
            </motion.div>
          ))}
        </div>
      </div>
    </motion.div>
  )
})

MobileServiceCard.displayName = 'MobileServiceCard'

const ServicesSection: React.FC<ServicesSectionProps> = ({ language, inView = true }) => {
  const [activeService, setActiveService] = useState(0)
  const [isMobile, setIsMobile] = useState(false)
  
  const t = useMemo(() => translations[language], [language])

  React.useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 1024)
    checkMobile()
    
    let timeoutId: NodeJS.Timeout
    const debouncedResize = () => {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(checkMobile, 100)
    }
    
    window.addEventListener('resize', debouncedResize)
    return () => {
      window.removeEventListener('resize', debouncedResize)
      clearTimeout(timeoutId)
    }
  }, [])

  const handleServiceClick = useCallback((index: number) => {
    setActiveService(index)
  }, [])

  return (
    <section id="services" className="py-16 lg:py-20 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
      <div className="absolute inset-0 opacity-30 pointer-events-none">
        <div className="absolute top-0 left-1/4 w-64 h-64 bg-green-200 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-64 h-64 bg-blue-200 rounded-full blur-3xl"></div>
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
          className="text-center mb-12 lg:mb-16"
        >
          <h2 className="text-3xl lg:text-4xl xl:text-5xl font-bold text-gray-900 mb-4">
            <span className="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
              {t.title}
            </span>
          </h2>
          <p className="text-lg lg:text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
            {t.subtitle}
          </p>
        </motion.div>

        {isMobile ? (
          <div>
            {t.services.map((service, index) => (
              <MobileServiceCard
                key={service.id}
                service={service}
                index={index}
                language={language}
                t={t}
              />
            ))}
          </div>
        ) : (
          <div className="grid lg:grid-cols-2 gap-10 items-start">
            <div className="space-y-5">
              {t.services.map((service, index) => (
                <ServiceCard
                  key={service.id}
                  service={service}
                  index={index}
                  isActive={activeService === index}
                  onClick={() => handleServiceClick(index)}
                />
              ))}
            </div>

            <div className="sticky top-20">
              <AnimatePresence mode="wait">
                <motion.div
                  key={activeService}
                  variants={optimizedVariants.detailsPanel}
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  className="bg-white rounded-2xl shadow-xl p-6 xl:p-8 border border-gray-100"
                  style={{ willChange: 'transform, opacity' }}
                >
                  <div className="flex items-center space-x-4 mb-6">
                    <div className={`w-14 h-14 rounded-xl bg-gradient-to-br ${t.services[activeService].color} flex items-center justify-center text-2xl shadow-lg`}>
                      {t.services[activeService].icon}
                    </div>
                    <div>
                      <h3 className="text-xl xl:text-2xl font-bold text-gray-900">
                        {t.services[activeService].title}
                      </h3>
                      <p className="text-gray-600 text-sm">{t.services[activeService].shortDesc}</p>
                    </div>
                  </div>

                  <div className="mb-6">
                    <p className="text-gray-700 leading-relaxed mb-3 text-sm lg:text-base">
                      {t.services[activeService].description}
                    </p>
                    <p className="text-gray-600 leading-relaxed text-sm">
                      {t.services[activeService].longDescription}
                    </p>
                  </div>

                  <div className="mb-6">
                    <h4 className="text-lg font-semibold text-gray-900 mb-4">{t.whatWeOffer}</h4>
                    <div className="grid grid-cols-1 xl:grid-cols-2 gap-3">
                      {t.services[activeService].features.map((feature: any, index: number) => (
                        <motion.div
                          key={index}
                          initial="hidden"
                          animate="visible"
                          variants={optimizedVariants.feature}
                          transition={{ delay: index * 0.03 }}
                          className={`flex items-start space-x-3 p-3 rounded-xl ${t.services[activeService].bgColor} border border-gray-100 hover:shadow-sm transition-shadow duration-150`}
                        >
                          <div className="text-xl flex-shrink-0">{feature.icon}</div>
                          <div>
                            <h5 className={`font-medium ${t.services[activeService].textColor} mb-1 text-sm`}>
                              {feature.title}
                            </h5>
                            <p className="text-gray-600 text-xs leading-relaxed">{feature.desc}</p>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-4">
                    {t.services[activeService].stats.map((stat: any, index: number) => (
                      <motion.div
                        key={index}
                        initial="hidden"
                        animate="visible"
                        variants={optimizedVariants.stat}
                        transition={{ delay: 0.1 + index * 0.05 }}
                        className="text-center p-3 bg-gray-50 rounded-xl"
                      >
                        <div className={`text-2xl font-bold bg-gradient-to-r ${t.services[activeService].color} bg-clip-text text-transparent`}>
                          {stat.value}
                        </div>
                        <div className="text-xs text-gray-600 mt-1 leading-tight">{stat.label}</div>
                      </motion.div>
                    ))}
                  </div>
                </motion.div>
              </AnimatePresence>
            </div>
          </div>
        )}
      </div>
    </section>
  )
}

export default ServicesSection


--- FILE: src/components/sections/Wholesalecontact.tsx ---
import React, { useState, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface WholesaleContactProps {
  language: 'it' | 'de'
  inView: boolean
}

const translations = {
  it: {
    title: 'Richiedi il Listino Ingrosso',
    subtitle: 'Partnership HORECA per la tua attività',
    description: 'Unisciti a oltre 50 ristoranti, hotel e pizzerie che si affidano alla qualità Bottamedi. Ricevi il nostro listino prezzi aggiornato e scopri le condizioni dedicate ai professionali del settore.',
    benefits: [
      {
        icon: '📋',
        title: 'Listino Personalizzato',
        desc: 'Prezzi dedicati in base ai volumi'
      },
      {
        icon: '🚚',
        title: 'Consegne Programmate',
        desc: 'Servizio 6 giorni su 7 in orari concordati'
      },
      {
        icon: '🎯',
        title: 'Selezione Premium',
        desc: 'Prodotti selezionati per il settore HORECA'
      },
      {
        icon: '🤝',
        title: 'Partnership Duratura',
        desc: 'Rapporto di fiducia e consulenza continua'
      }
    ],
    form: {
      businessName: 'Nome dell\'attività *',
      businessNamePlaceholder: 'es. Ristorante Da Mario',
      contactPerson: 'Referente *',
      contactPersonPlaceholder: 'Nome e cognome',
      phone: 'Telefono *', 
      phonePlaceholder: '+39 333 123456',
      email: 'Email *',
      emailPlaceholder: 'tua@email.it',
      businessType: 'Tipo di attività *',
      businessTypeOptions: [
        'Seleziona il tipo di attività',
        'Ristorante',
        'Pizzeria', 
        'Hotel',
        'Bar/Caffetteria',
        'Catering',
        'Mensa aziendale',
        'Negozio alimentari',
        'Altro'
      ],
      location: 'Località',
      locationPlaceholder: 'Città/Comune',
      message: 'Note aggiuntive',
      messagePlaceholder: 'Raccontaci le tue esigenze specifiche...',
      privacy: 'Accetto il trattamento dei dati personali secondo la privacy policy',
      submit: 'Richiedi Listino Ingrosso',
      sending: 'Invio in corso...',
      success: 'Richiesta inviata con successo!',
      successMessage: 'Ti contatteremo entro 24 ore per fornirti il listino personalizzato.',
      error: 'Errore nell\'invio. Riprova o contattaci direttamente.'
    },
    whyChoose: 'Perché scegliere Bottamedi per il tuo business:',
    directContacts: 'Contatti diretti:'
  },
  de: {
    title: 'Großhandels-Preisliste anfordern',
    subtitle: 'HORECA-Partnerschaft für Ihr Unternehmen',
    description: 'Schließen Sie sich über 50 Restaurants, Hotels und Pizzerien an, die auf die Qualität von Bottamedi vertrauen. Erhalten Sie unsere aktuelle Preisliste und entdecken Sie die speziellen Konditionen für Fachleute.',
    benefits: [
      {
        icon: '📋',
        title: 'Personalisierte Preisliste',
        desc: 'Dedizierte Preise basierend auf Volumen'
      },
      {
        icon: '🚚',
        title: 'Geplante Lieferungen',
        desc: 'Service 6 Tage die Woche zu vereinbarten Zeiten'
      },
      {
        icon: '🎯',
        title: 'Premium-Auswahl',
        desc: 'Für HORECA-Sektor ausgewählte Produkte'
      },
      {
        icon: '🤝',
        title: 'Dauerhafte Partnerschaft',
        desc: 'Vertrauensverhältnis und kontinuierliche Beratung'
      }
    ],
    form: {
      businessName: 'Unternehmensname *',
      businessNamePlaceholder: 'z.B. Restaurant Da Mario',
      contactPerson: 'Ansprechpartner *',
      contactPersonPlaceholder: 'Vor- und Nachname',
      phone: 'Telefon *',
      phonePlaceholder: '+39 333 123456',
      email: 'E-Mail *',
      emailPlaceholder: 'ihre@email.de',
      businessType: 'Unternehmenstyp *',
      businessTypeOptions: [
        'Unternehmenstyp wählen',
        'Restaurant',
        'Pizzeria',
        'Hotel',
        'Bar/Café',
        'Catering',
        'Betriebsmensa',
        'Lebensmittelgeschäft',
        'Andere'
      ],
      location: 'Standort',
      locationPlaceholder: 'Stadt/Gemeinde',
      message: 'Zusätzliche Notizen',
      messagePlaceholder: 'Erzählen Sie uns von Ihren spezifischen Bedürfnissen...',
      privacy: 'Ich akzeptiere die Verarbeitung personenbezogener Daten gemäß Datenschutzrichtlinie',
      submit: 'Großhandels-Preisliste anfordern',
      sending: 'Wird gesendet...',
      success: 'Anfrage erfolgreich gesendet!',
      successMessage: 'Wir werden Sie innerhalb von 24 Stunden kontaktieren, um Ihnen die personalisierte Preisliste zu liefern.',
      error: 'Fehler beim Senden. Versuchen Sie es erneut oder kontaktieren Sie uns direkt.'
    },
    whyChoose: 'Warum Bottamedi für Ihr Unternehmen wählen:',
    directContacts: 'Direkte Kontakte:'
  }
}

const WholesaleContact: React.FC<WholesaleContactProps> = ({ language, inView }) => {
  const [formData, setFormData] = useState({
    businessName: '',
    contactPerson: '',
    phone: '',
    email: '',
    businessType: '',
    location: '',
    message: ''
  })
  const [privacyAccepted, setPrivacyAccepted] = useState(false)
  const [status, setStatus] = useState<'idle' | 'sending' | 'success' | 'error'>('idle')

  const t = translations[language]

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault()
    setStatus('sending')

    try {
      const emailSubject = encodeURIComponent(`Richiesta Listino HORECA - ${formData.businessName}`)
      const emailBody = encodeURIComponent(`Buongiorno,

sono ${formData.contactPerson} di "${formData.businessName}" (${formData.businessType})${formData.location ? ` a ${formData.location}` : ''}.

Vorrei ricevere il vostro listino prezzi HORECA per valutare una collaborazione.

CONTATTI:
📱 ${formData.phone}
📧 ${formData.email}

${formData.message ? `NOTE: ${formData.message}` : ''}

Grazie,
${formData.contactPerson}`)

      const mailtoLink = `mailto:bottamedipierluigi@virgilio.it?subject=${emailSubject}&body=${emailBody}`
      window.open(mailtoLink, '_blank')
      
      setStatus('success')
      
      setTimeout(() => {
        setStatus('idle')
        setFormData({
          businessName: '',
          contactPerson: '',
          phone: '',
          email: '',
          businessType: '',
          location: '',
          message: ''
        })
        setPrivacyAccepted(false)
      }, 2000)

    } catch (error) {
      setStatus('error')
      setTimeout(() => setStatus('idle'), 2000)
    }
  }, [formData])

  const handleInputChange = useCallback((field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }, [])

  const resetButtonFocus = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {
    const target = e.currentTarget
    target.blur()
    setTimeout(() => {
      target.blur()
      target.classList.remove('active', 'focus', 'pressed')
    }, 150)
  }, [])

  const isFormValid = formData.businessName && 
                     formData.contactPerson && 
                     formData.phone && 
                     formData.email && 
                     formData.businessType &&
                     privacyAccepted

  return (
    <section id="wholesale" className="py-20 lg:py-24 bg-gradient-to-br from-blue-50 via-white to-green-50 relative overflow-hidden">
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-0 right-1/4 w-80 h-80 bg-blue-200 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 left-1/4 w-80 h-80 bg-green-200 rounded-full blur-3xl"></div>
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="max-w-6xl mx-auto">
          
          <motion.div
            initial={{ opacity: 1, y: 0 }}
            className="text-center mb-16"
          >
            <div className="inline-flex items-center space-x-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium mb-6">
              <span>🏢</span>
              <span>Servizio HORECA</span>
            </div>

            <h2 className="text-3xl lg:text-5xl font-bold text-gray-900 mb-4">
              <span className="bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent">
                {t.title}
              </span>
            </h2>

            <p className="text-lg lg:text-xl text-gray-600 mb-3">
              {t.subtitle}
            </p>

            <p className="text-gray-600 max-w-3xl mx-auto leading-relaxed">
              {t.description}
            </p>
          </motion.div>

          <div className="grid lg:grid-cols-2 gap-10 items-start">
            
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-900 mb-5">
                {t.whyChoose}
              </h3>
              
              <div className="space-y-4">
                {t.benefits.map((benefit, index) => (
                  <div
                    key={index}
                    className="flex items-start space-x-3 p-4 bg-white rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200"
                  >
                    <div className="text-2xl">{benefit.icon}</div>
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-1 text-sm">{benefit.title}</h4>
                      <p className="text-gray-600 text-xs">{benefit.desc}</p>
                    </div>
                  </div>
                ))}
              </div>

              <div className="bg-gradient-to-br from-green-50 to-blue-50 p-5 rounded-xl border border-green-200">
                <h4 className="font-semibold text-gray-900 mb-3 text-sm">{t.directContacts}</h4>
                <div className="space-y-2 text-xs text-gray-600">
                  <div className="flex items-center space-x-2">
                    <span>📞</span>
                    <span>+39 0461 602534</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span>📧</span>
                    <span>bottamedipierluigi@virgilio.it</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span>📍</span>
                    <span>Via de Gasperi 47, Mezzolombardo (TN)</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <AnimatePresence mode="wait">
                {status === 'success' ? (
                  <motion.div
                    key="success"
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.95 }}
                    className="text-center py-6"
                  >
                    <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                      <span className="text-xl">✅</span>
                    </div>
                    <h3 className="text-lg font-bold text-gray-900 mb-2">{t.form.success}</h3>
                    <p className="text-gray-600 text-sm">{t.form.successMessage}</p>
                  </motion.div>
                ) : (
                  <motion.form
                    key="form"
                    initial={{ opacity: 1 }}
                    onSubmit={handleSubmit}
                    className="space-y-4"
                  >
                    <div className="text-center mb-5">
                      <h3 className="text-lg font-bold text-gray-900 mb-1">
                        Compila il modulo
                      </h3>
                      <p className="text-gray-600 text-xs">
                        Ti contatteremo entro 24 ore con il listino personalizzato
                      </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          {t.form.businessName}
                        </label>
                        <input
                          type="text"
                          required
                          value={formData.businessName}
                          onChange={(e) => handleInputChange('businessName', e.target.value)}
                          placeholder={t.form.businessNamePlaceholder}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-sm outline-none"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          {t.form.contactPerson}
                        </label>
                        <input
                          type="text"
                          required
                          value={formData.contactPerson}
                          onChange={(e) => handleInputChange('contactPerson', e.target.value)}
                          placeholder={t.form.contactPersonPlaceholder}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-sm outline-none"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          {t.form.phone}
                        </label>
                        <input
                          type="tel"
                          required
                          value={formData.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          placeholder={t.form.phonePlaceholder}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-sm outline-none"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          {t.form.email}
                        </label>
                        <input
                          type="email"
                          required
                          value={formData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          placeholder={t.form.emailPlaceholder}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-sm outline-none"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          {t.form.businessType}
                        </label>
                        <select
                          required
                          value={formData.businessType}
                          onChange={(e) => handleInputChange('businessType', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-white text-sm outline-none"
                        >
                          {t.form.businessTypeOptions.map((option, index) => (
                            <option key={index} value={index === 0 ? '' : option}>
                              {option}
                            </option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          {t.form.location}
                        </label>
                        <input
                          type="text"
                          value={formData.location}
                          onChange={(e) => handleInputChange('location', e.target.value)}
                          placeholder={t.form.locationPlaceholder}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-sm outline-none"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        {t.form.message}
                      </label>
                      <textarea
                        rows={3}
                        value={formData.message}
                        onChange={(e) => handleInputChange('message', e.target.value)}
                        placeholder={t.form.messagePlaceholder}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none text-sm outline-none"
                      />
                    </div>

                    <div className="flex items-start space-x-2">
                      <input
                        type="checkbox"
                        id="privacy"
                        checked={privacyAccepted}
                        onChange={(e) => setPrivacyAccepted(e.target.checked)}
                        className="mt-0.5 h-3 w-3 text-blue-600 border-gray-300 rounded focus:ring-blue-500 outline-none"
                      />
                      <label htmlFor="privacy" className="text-xs text-gray-600 leading-relaxed">
                        {t.form.privacy}
                      </label>
                    </div>

                    <button
                      type="submit"
                      disabled={!isFormValid || status === 'sending'}
                      onClick={resetButtonFocus}
                      onBlur={() => {}}
                      className={`w-full py-3 px-4 rounded-xl font-semibold text-sm transition-all duration-300 outline-none focus:outline-none ${
                        isFormValid && status !== 'sending'
                          ? 'bg-gradient-to-r from-blue-600 to-green-600 text-white shadow-lg hover:shadow-xl hover:scale-[1.02] active:scale-[0.98]'
                          : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      }`}
                      style={{ 
                        WebkitTapHighlightColor: 'transparent',
                        userSelect: 'none'
                      }}
                    >
                      {status === 'sending' ? (
                        <div className="flex items-center justify-center space-x-2">
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                          <span>{t.form.sending}</span>
                        </div>
                      ) : (
                        <>
                          <span>{t.form.submit}</span>
                          <span className="ml-2">📧</span>
                        </>
                      )}
                    </button>

                    {status === 'error' && (
                      <div className="text-center text-red-600 text-xs bg-red-50 p-2 rounded-lg">
                        {t.form.error}
                      </div>
                    )}
                  </motion.form>
                )}
              </AnimatePresence>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default WholesaleContact


--- FILE: src/components/types/index.ts ---
// Base component props
export interface BaseComponentProps {
  className?: string
  children?: React.ReactNode
}

// Language types
export type Language = 'it' | 'de'

// Section props common interface
export interface SectionProps {
  language: Language
  inView: boolean
}

// Intersection Observer hook types
export interface UseIntersectionObserverOptions {
  threshold?: number | number[]
  rootMargin?: string
  root?: Element | Document | null
  triggerOnce?: boolean
}

export interface UseIntersectionObserverReturn {
  ref: (node?: Element | null) => void
  inView: boolean
  entry?: IntersectionObserverEntry
}

// Contact form data
export interface ContactFormData {
  name: string
  email: string
  phone?: string
  message: string
  businessType?: string
  location?: string
}

// Navigation item
export interface NavigationItem {
  id: string
  label: string
  href: string
  external?: boolean
}

// Product types
export interface Product {
  id: string
  name: string
  category: string
  origin?: string
  season?: string
  price?: number
  image?: string
  description?: string
}

export interface ProductCategory {
  id: string
  title: string
  description: string
  products: Product[]
  icon: string
  color: string
}

export interface ProductFeature {
  icon: string
  title: string
  description: string
}

// Service types
export interface Service {
  id: string
  title: string
  description: string
  features: ProductFeature[]
  icon: string
  image?: string
  color: string
}

// Contact info
export interface ContactInfo {
  name: string
  title: string
  phone: string
  email: string
  address: string
  hours?: string
}

// Animation variants
export interface AnimationVariant {
  hidden: {
    opacity: number
    y?: number
    x?: number
    scale?: number
  }
  visible: {
    opacity: number
    y?: number
    x?: number
    scale?: number
    transition?: {
      duration?: number
      delay?: number
      ease?: string | number[]
    }
  }
}

// Scroll info
export interface ScrollInfo {
  scrollY: number
  scrollDirection: 'up' | 'down' | 'none'
  isScrolling: boolean
}

// Header props
export interface HeaderProps {
  language: Language
  onLanguageChange: (language: Language) => void
  isMenuOpen: boolean
  onToggleMenu: () => void
}

// Mobile dock props
export interface MobileDockProps {
  language: Language
  hideInFooter: boolean
}

// Legal documents props
export interface LegalDocumentsProps {
  language: Language
}

// Footer props
export interface FooterProps {
  language: Language
}

// Cookie banner props
export interface CookieBannerProps {
  language: Language
}

// Loading component props
export interface LoadingProps {
  message?: string
  variant?: 'spinner' | 'pulse' | 'dots'
}

// Image optimization props
export interface OptimizedImageProps {
  src: string
  alt: string
  width?: number
  height?: number
  priority?: boolean
  className?: string
  loading?: 'lazy' | 'eager'
}

// SEO meta data
export interface SEOMetaData {
  title: string
  description: string
  keywords?: string[]
  image?: string
  url?: string
  type?: string
}

// Performance metrics
export interface PerformanceMetrics {
  lcp?: number // Largest Contentful Paint
  fid?: number // First Input Delay
  cls?: number // Cumulative Layout Shift
  loadTime?: number
}

// Form validation
export interface ValidationRule {
  required?: boolean
  minLength?: number
  maxLength?: number
  pattern?: RegExp
  custom?: (value: string) => boolean | string
}

export interface FormField {
  name: string
  label: string
  type: 'text' | 'email' | 'tel' | 'textarea' | 'select'
  placeholder?: string
  validation?: ValidationRule
  options?: { value: string; label: string }[]
}

// Error handling
export interface ErrorInfo {
  message: string
  code?: string | number
  type: 'warning' | 'error' | 'info'
  timestamp?: Date
}


--- FILE: src/components/layout/Footer.tsx ---
// Footer.tsx - VERSIONE CORRETTA CON LINK CHE FUNZIONANO
import React from 'react'
import { motion } from 'framer-motion'

interface FooterProps {
  language: 'it' | 'de'
}

const translations = {
  it: {
    company: {
      name: 'BOTTAMEDI',
      description: 'Tre generazioni di eccellenza nell\'ortofrutta. Qualità inarrivabile e passione familiare dal 1974.',
      tagline: 'Da oltre 50 anni, la passione per la qualità'
    },
    links: {
      about: 'La Nostra Storia',
      banchetto: 'Al Banchetto',
      services: 'Servizi Ingrosso',
      contact: 'Contatti',
      // 📝 NOMI CORRETTI E STANDARD
      privacy: 'Informativa Privacy',
      terms: 'Termini e Condizioni',
      cookies: 'Cookie Policy'
    },
    contact: {
      title: 'Contatti',
      retail: {
        title: 'Banchetto (Dettaglio)',
        address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
        phone: '351 577 6198',
        hours: 'Lun-Sab: 07:00-19:30'
      },
      horeca: {
        title: 'Ingrosso HORECA',
        address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
        phone: '0461 602534',
        email: 'bottamedipierluigi@virgilio.it'
      }
    },
    social: {
      title: 'Seguici',
      facebook: 'Facebook',
      instagram: 'Instagram',
      whatsapp: 'WhatsApp'
    },
    legal: {
      copyright: 'Tutti i diritti riservati.',
      company: 'Bottamedi Frutta e Verdura di Bottamedi Pierluigi',
      vat: 'P.IVA 02273530226',
      madeby: 'Realizzato da Bottamedi Gianluca'
    },
    quickLinks: 'Link Rapidi'
  },
  de: {
    company: {
      name: 'BOTTAMEDI',
      description: 'Drei Generationen Exzellenz in Obst und Gemüse. Unübertreffliche Qualität und familiäre Leidenschaft seit 1974.',
      tagline: 'Seit über 50 Jahren, Leidenschaft für Qualität'
    },
    links: {
      about: 'Unsere Geschichte',
      banchetto: 'Marktstand',
      services: 'Großhandel Service',
      contact: 'Kontakt',
      privacy: 'Datenschutzerklärung',
      terms: 'AGB',
      cookies: 'Cookie-Richtlinie'
    },
    contact: {
      title: 'Kontakt',
      retail: {
        title: 'Marktstand (Detail)',
        address: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
        phone: '351 577 6198',
        hours: 'Mo-Sa: 07:00-19:30'
      },
      horeca: {
        title: 'Großhandel HORECA',
        address: 'Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)',
        phone: '0461 602534',
        email: 'bottamedipierluigi@virgilio.it'
      }
    },
    social: {
      title: 'Folgen Sie uns',
      facebook: 'Facebook',
      instagram: 'Instagram',
      whatsapp: 'WhatsApp'
    },
    legal: {
      copyright: 'Alle Rechte vorbehalten.',
      company: 'Bottamedi Obst und Gemüse von Bottamedi Pierluigi',
      vat: 'MwSt-Nr. 02273530226',
      madeby: 'Erstellt von Bottamedi Gianluca'
    },
    quickLinks: 'Schnelle Links'
  }
} as const

const SocialIcon: React.FC<{
  href: string
  icon: React.ReactNode
  label: string
}> = ({ href, icon, label }) => (
  <motion.a
    href={href}
    target="_blank"
    rel="noopener noreferrer"
    aria-label={label}
    whileHover={{ scale: 1.1, y: -2 }}
    whileTap={{ scale: 0.9 }}
    className="w-12 h-12 bg-white/10 backdrop-blur-sm rounded-xl flex items-center justify-center text-white hover:bg-white/20 transition-all duration-300 group"
  >
    <motion.div
      className="w-6 h-6"
      whileHover={{ rotate: 10 }}
      transition={{ duration: 0.2 }}
    >
      {icon}
    </motion.div>
  </motion.a>
)

const Footer: React.FC<FooterProps> = ({ language }) => {
  const t = translations[language]
  const currentYear = new Date().getFullYear()

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  // 🔧 FUNZIONE CORRETTA PER APRIRE I DOCUMENTI LEGALI
  const handleLegalDocumentClick = (docType: 'privacy' | 'terms' | 'cookies') => {
    console.log('🔓 Tentativo di aprire documento:', docType, 'lingua:', language)
    
    // Dispatch evento con i parametri corretti
    const event = new CustomEvent('openLegalDocument', { 
      detail: { docType, language },
      bubbles: true,
      cancelable: true
    })
    
    // Dispatch sia su window che su document per sicurezza
    window.dispatchEvent(event)
    document.dispatchEvent(event)
    
    console.log('📤 Evento dispatched:', event.detail)
    
    // Debug: controlla se il componente LegalDocuments esiste
    const legalElement = document.getElementById('legal-documents')
    console.log('📋 Elemento legal-documents trovato:', !!legalElement)
    
    // Scroll to legal section se esiste
    setTimeout(() => {
      const element = document.getElementById('legal-documents')
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' })
        console.log('📍 Scroll verso legal-documents')
      } else {
        console.warn('⚠️ Elemento legal-documents non trovato!')
      }
    }, 100)
    
    // Analytics tracking
    if (typeof window !== 'undefined' && (window as any).gtag) {
      (window as any).gtag('event', 'legal_document_click', {
        event_category: 'footer',
        event_label: docType,
        value: 1
      })
    }
  }

  return (
    <footer className="relative bg-gradient-to-br from-neutral-900 via-neutral-800 to-neutral-900 text-white overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-green-500/10 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-green-400/10 rounded-full blur-3xl"></div>
      </div>

      {/* Main Footer Content */}
      <div className="relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 pt-16 pb-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
          
          {/* Company Info */}
          <div className="lg:col-span-2">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
            >
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center overflow-hidden">
                  <img
                    src="/favicon.svg"
                    alt="Bottamedi Favicon"
                    className="w-12 h-12 object-contain"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement
                      target.style.display = 'none'
                      target.parentElement!.innerHTML = '<span class="text-white font-bold text-2xl">B</span>'
                    }}
                  />
                </div>
                <div>
                  <h2 className="text-3xl font-bold tracking-tight">
                    {t.company.name}
                  </h2>
                  <p className="text-white/80 text-sm">
                    {t.company.tagline}
                  </p>
                </div>
              </div>
              
              <p className="text-white/80 leading-relaxed mb-6 max-w-md">
                {t.company.description}
              </p>

              {/* Social Media */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">{t.social.title}</h3>
                <div className="flex space-x-4">
                  <SocialIcon
                    href="https://www.facebook.com/profile.php?id=100063456281899"
                    label={t.social.facebook}
                    icon={
                      <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                      </svg>
                    }
                  />
                  
                  <SocialIcon
                    href="https://instagram.com/banchetto.bottamedi"
                    label={t.social.instagram}
                    icon={
                      <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                      </svg>
                    }
                  />

                  <SocialIcon
                    href="https://wa.me/393515776198"
                    label={t.social.whatsapp}
                    icon={
                      <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.097"/>
                      </svg>
                    }
                  />
                </div>
              </div>
            </motion.div>
          </div>

          {/* Quick Links */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
            viewport={{ once: true }}
          >
            <h3 className="text-lg font-semibold mb-6">{t.quickLinks}</h3>
            <ul className="space-y-3">
              {[
                { label: t.links.about, id: 'about' },
                { label: t.links.banchetto, id: 'dettaglio' },
                { label: t.links.services, id: 'services' },
                { label: t.links.contact, id: 'contact' }
              ].map((link) => (
                <li key={link.id}>
                  <button
                    onClick={() => scrollToSection(link.id)}
                    className="text-white/80 hover:text-white transition-colors duration-300 text-left hover:translate-x-1 transform transition-transform"
                  >
                    {link.label}
                  </button>
                </li>
              ))}
            </ul>
          </motion.div>
        </div>

        {/* Contact Info Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          viewport={{ once: true }}
          className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-16 pt-12 border-t border-white/20"
        >
          {/* Retail Contact */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold text-green-400">
              {t.contact.retail.title}
            </h4>
            <div className="space-y-2 text-white/80">
              <p className="flex items-start space-x-2">
                <svg className="w-5 h-5 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>{t.contact.retail.address}</span>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <a href={`tel:+39${t.contact.retail.phone.replace(/\s/g, '')}`} className="hover:text-white transition-colors">
                  +39 {t.contact.retail.phone}
                </a>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>{t.contact.retail.hours}</span>
              </p>
            </div>
          </div>

          {/* HORECA Contact */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold text-blue-400">
              {t.contact.horeca.title}
            </h4>
            <div className="space-y-2 text-white/80">
              <p className="flex items-start space-x-2">
                <svg className="w-5 h-5 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>{t.contact.horeca.address}</span>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <a href={`tel:+39${t.contact.horeca.phone.replace(/\s/g, '')}`} className="hover:text-white transition-colors">
                  +39 {t.contact.horeca.phone}
                </a>
              </p>
              <p className="flex items-center space-x-2">
                <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <a href={`mailto:${t.contact.horeca.email}`} className="hover:text-white transition-colors">
                  {t.contact.horeca.email}
                </a>
              </p>
            </div>
          </div>
        </motion.div>

        {/* 📝 BOTTOM BAR CON LINK LEGALI PICCOLI CHE FUNZIONANO */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          viewport={{ once: true }}
          className="mt-12 pt-8 border-t border-white/20"
        >
          <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
            
            {/* Copyright */}
            <div className="text-center md:text-left">
              <p className="text-white/80 text-sm">
                © {currentYear} {t.legal.company}. {t.legal.copyright}
              </p>
              <p className="text-white/60 text-sm">
                {t.legal.vat}
              </p>
            </div>
            
            {/* 🔗 LINK LEGALI PICCOLI STANDARD */}
            <div className="flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-6">
              <div className="flex flex-wrap items-center justify-center space-x-1 text-xs text-white/60">
                <motion.button 
                  onClick={() => handleLegalDocumentClick('privacy')}
                  whileHover={{ scale: 1.05, color: 'rgba(255,255,255,0.9)' }}
                  whileTap={{ scale: 0.95 }}
                  className="hover:text-white transition-colors hover:underline px-2 py-1 rounded"
                >
                  {t.links.privacy}
                </motion.button>
                <span className="text-white/40 px-1">•</span>
                <motion.button 
                  onClick={() => handleLegalDocumentClick('terms')}
                  whileHover={{ scale: 1.05, color: 'rgba(255,255,255,0.9)' }}
                  whileTap={{ scale: 0.95 }}
                  className="hover:text-white transition-colors hover:underline px-2 py-1 rounded"
                >
                  {t.links.terms}
                </motion.button>
                <span className="text-white/40 px-1">•</span>
                <motion.button 
                  onClick={() => handleLegalDocumentClick('cookies')}
                  whileHover={{ scale: 1.05, color: 'rgba(255,255,255,0.9)' }}
                  whileTap={{ scale: 0.95 }}
                  className="hover:text-white transition-colors hover:underline px-2 py-1 rounded"
                >
                  {t.links.cookies}
                </motion.button>
              </div>
              
              <p className="text-white/40 text-xs">
                {t.legal.madeby}
              </p>
            </div>
          </div>
        </motion.div>
      </div>
    </footer>
  )
}

export default Footer


--- FILE: src/components/layout/Header.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, useScroll, useMotionValueEvent } from 'framer-motion'

interface HeaderProps {
  language: 'it' | 'de'
  onLanguageChange: (language: 'it' | 'de') => void
  isMenuOpen: boolean
  onToggleMenu: () => void
}

const Header: React.FC<HeaderProps> = ({
  language,
  onLanguageChange
}) => {
  const [hidden, setHidden] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)
  const { scrollY } = useScroll()

  // Ottimizzazione: uso useMotionValueEvent per performance
  useMotionValueEvent(scrollY, "change", (latest) => {
    const previous = scrollY.getPrevious() || 0
    setIsScrolled(latest > 50)
    
    // Nascondi header solo se scroll significativo
    if (latest > previous && latest > 150) {
      setHidden(true)
    } else {
      setHidden(false)
    }
  })

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
    }
  }

  return (
    <motion.header
      variants={{
        visible: { y: 0 },
        hidden: { y: "-100%" }
      }}
      animate={hidden ? "hidden" : "visible"}
      transition={{ duration: 0.35, ease: "easeInOut" }}
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${
        isScrolled 
          ? 'bg-white/95 backdrop-blur-xl shadow-lg border-b border-neutral-200/50' 
          : 'bg-transparent'
      }`}
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-20">
          {/* Logo Grande a Sinistra - Doppio delle Dimensioni */}
          <motion.div
            onClick={() => scrollToSection('hero')}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="flex items-center cursor-pointer"
          >
            <img
              src="/logo-bottamedi.webp"
              alt="Bottamedi Logo"
              className="h-24 w-auto object-contain"
              style={{
                filter: isScrolled 
                  ? 'none' 
                  : 'drop-shadow(0 2px 8px rgba(0,0,0,0.3))'
              }}
            />
          </motion.div>

          {/* Language Selector a Destra */}
          <div className="flex items-center space-x-4">
            {/* Bandiera Italia/Germania */}
            <motion.button
              onClick={() => onLanguageChange(language === 'it' ? 'de' : 'it')}
              className={`flex items-center space-x-3 px-4 py-2 rounded-xl transition-all duration-300 ${
                isScrolled 
                  ? 'bg-neutral-100 hover:bg-neutral-200 text-neutral-700' 
                  : 'bg-white/10 backdrop-blur-sm hover:bg-white/20 text-white/90'
              }`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="text-2xl">
                {language === 'it' ? '🇮🇹' : '🇩🇪'}
              </span>
              <span className="font-medium text-sm">
                {language.toUpperCase()}
              </span>
            </motion.button>
          </div>
        </div>
      </div>
    </motion.header>
  )
}

export default Header


--- FILE: src/components/layout/MobileDock.tsx ---
import React, { useState, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface MobileDockProps {
  language: 'it' | 'de'
  hideInFooter?: boolean
}

const translations = {
  it: {
    menu: 'Menu',
    call: 'Chiama',
    directions: 'Mappa',
    close: 'Chiudi',
    sections: [
      { id: 'hero', label: 'Home', icon: '🏠' },
      { id: 'about', label: 'Storia', icon: '📖' },
      { id: 'dettaglio', label: 'Banchetto', icon: '🛒' },
      { id: 'services', label: 'Servizi', icon: '⚡' },
      { id: 'products', label: 'Prodotti', icon: '🍎' },
      { id: 'wholesale', label: 'Listino', icon: '📋' },
      { id: 'contact', label: 'Contatti', icon: '📞' }
    ],
    contacts: {
      banchetto: 'Banchetto',
      ingrosso: 'Ingrosso HORECA',
      banchettoPhone: '351 577 6198',
      ingrossoPhone: '0461 602534',
      banchettoAddress: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
      ingrossoAddress: 'Via A. de Gasperi, 47, 38017 Mezzolombardo (TN)',
      banchettoHours: 'Lun-Sab: 7:00-19:30'
    }
  },
  de: {
    menu: 'Menü',
    call: 'Anrufen',
    directions: 'Karte',
    close: 'Schließen',
    sections: [
      { id: 'hero', label: 'Home', icon: '🏠' },
      { id: 'about', label: 'Geschichte', icon: '📖' },
      { id: 'dettaglio', label: 'Marktstand', icon: '🛒' },
      { id: 'services', label: 'Service', icon: '⚡' },
      { id: 'products', label: 'Produkte', icon: '🍎' },
      { id: 'wholesale', label: 'Preisliste', icon: '📋' },
      { id: 'contact', label: 'Kontakt', icon: '📞' }
    ],
    contacts: {
      banchetto: 'Marktstand',
      ingrosso: 'Großhandel HORECA',
      banchettoPhone: '351 577 6198',
      ingrossoPhone: '0461 602534',
      banchettoAddress: 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)',
      ingrossoAddress: 'Via A. de Gasperi, 47, 38017 Mezzolombardo (TN)',
      banchettoHours: 'Mo-Sa: 7:00-19:30'
    }
  }
}

// Icone SVG
const MenuIcon = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="w-7 h-7">
    <path d="M4 6h16M4 12h16M4 18h16" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
)

const PhoneIcon = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="w-7 h-7">
    <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
  </svg>
)

const MapIcon = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="w-7 h-7">
    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
    <circle cx="12" cy="10" r="3"/>
  </svg>
)

const WhatsAppIcon = () => (
  <svg viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.097"/>
  </svg>
)

const CloseIcon = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2.5" className="w-5 h-5">
    <path d="M18 6L6 18M6 6l12 12" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
)

const ClockIcon = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="w-4 h-4">
    <circle cx="12" cy="12" r="10"/>
    <polyline points="12,6 12,12 16,14"/>
  </svg>
)

const useScrollDetection = (hideInFooter: boolean) => {
  const [isVisible, setIsVisible] = useState(false)
  const [currentSection, setCurrentSection] = useState('hero')
  const [isScrolling, setIsScrolling] = useState(false)

  useEffect(() => {
    let timeoutId: NodeJS.Timeout
    let scrollTimeoutId: NodeJS.Timeout
    
    const detectSection = () => {
      // Indica che stiamo scrollando
      setIsScrolling(true)
      
      // Cancella il timeout precedente
      clearTimeout(scrollTimeoutId)
      
      // Imposta un nuovo timeout per indicare che lo scroll è finito
      scrollTimeoutId = setTimeout(() => {
        setIsScrolling(false)
      }, 800) // Aumentato a 800ms per evitare apparizioni durante la navigazione

      const sections = ['hero', 'about', 'dettaglio', 'services', 'products', 'wholesale', 'contact']
      const scrollPosition = window.scrollY + window.innerHeight / 2

      for (const sectionId of sections) {
        const element = document.getElementById(sectionId)
        if (element) {
          const { offsetTop, offsetHeight } = element
          if (scrollPosition >= offsetTop && scrollPosition < offsetTop + offsetHeight) {
            setCurrentSection(sectionId)
            break
          }
        }
      }
    }

    // Funzione separata per controllare la visibilità
    const updateVisibility = () => {
      const isInHero = currentSection === 'hero'
      
      // Nascondi il dock se:
      // - Siamo nella hero section
      // - Siamo nel footer (hideInFooter è true)
      // - Stiamo attualmente scrollando
      const shouldHide = isInHero || hideInFooter || isScrolling
      setIsVisible(!shouldHide)
    }

    const handleScroll = () => {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(detectSection, 10)
    }

    detectSection()
    window.addEventListener('scroll', handleScroll, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', handleScroll)
      clearTimeout(timeoutId)
      clearTimeout(scrollTimeoutId)
    }
  }, [hideInFooter])

  // Aggiorna la visibilità quando cambiano le condizioni
  useEffect(() => {
    const isInHero = currentSection === 'hero'
    const shouldHide = isInHero || hideInFooter || isScrolling
    setIsVisible(!shouldHide)
  }, [currentSection, hideInFooter, isScrolling])

  return { isVisible, currentSection }
}

const PremiumMobileDock: React.FC<MobileDockProps> = ({ language, hideInFooter = false }) => {
  const [activeMenu, setActiveMenu] = useState<'none' | 'menu' | 'call' | 'directions'>('none')
  const [isMobile, setIsMobile] = useState(false)
  const { isVisible, currentSection } = useScrollDetection(hideInFooter)
  const t = translations[language]

  useEffect(() => {
    const checkMobile = () => {
      const mobile = window.innerWidth < 1024
      setIsMobile(mobile)
      if (!mobile) {
        setActiveMenu('none')
      }
    }
    
    checkMobile()
    window.addEventListener('resize', checkMobile, { passive: true })
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  const scrollToSection = useCallback((sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      const offset = sectionId === 'hero' ? 0 : 80
      const elementPosition = element.getBoundingClientRect().top + window.pageYOffset - offset
      window.scrollTo({
        top: Math.max(0, elementPosition),
        behavior: 'smooth'
      })
      setActiveMenu('none')
      
      if ('vibrate' in navigator) {
        navigator.vibrate(25)
      }
    }
  }, [])

  const handleCall = useCallback((phone: string) => {
    window.open(`tel:${phone.replace(/\s/g, '')}`, '_self')
    setActiveMenu('none')
    
    if ('vibrate' in navigator) {
      navigator.vibrate(50)
    }
  }, [])

  const handleWhatsApp = useCallback((phone: string) => {
    const message = encodeURIComponent(
      language === 'it' 
        ? 'Ciao! Sono interessato ai vostri prodotti.' 
        : 'Hallo! Ich interessiere mich für Ihre Produkte.'
    )
    window.open(`https://wa.me/39${phone.replace(/\s/g, '')}?text=${message}`, '_blank')
    setActiveMenu('none')
    
    if ('vibrate' in navigator) {
      navigator.vibrate(25)
    }
  }, [language])

  const handleDirections = useCallback((type: 'banchetto' | 'ingrosso') => {
    const urls = {
      banchetto: 'https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN',
      ingrosso: 'https://maps.app.goo.gl/TFV4cgnEvcFjBHfD6'
    }
    window.open(urls[type], '_blank')
    setActiveMenu('none')
    
    if ('vibrate' in navigator) {
      navigator.vibrate(30)
    }
  }, [])

  const toggleMenu = useCallback((menu: 'menu' | 'call' | 'directions') => {
    setActiveMenu(prev => prev === menu ? 'none' : menu)
    
    if ('vibrate' in navigator) {
      navigator.vibrate(25)
    }
  }, [])

  const closeAllMenus = useCallback(() => {
    setActiveMenu('none')
  }, [])

  if (!isMobile) return null

  return (
    <div className="lg:hidden pointer-events-none">
      {/* Backdrop */}
      <AnimatePresence>
        {activeMenu !== 'none' && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[999] pointer-events-auto"
            onClick={closeAllMenus}
          />
        )}
      </AnimatePresence>

      {/* Menu Popup */}
      <AnimatePresence>
        {activeMenu === 'menu' && isVisible && (
          <motion.div
            initial={{ y: 100, opacity: 0, scale: 0.9 }}
            animate={{ y: 0, opacity: 1, scale: 1 }}
            exit={{ y: 100, opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', damping: 30, stiffness: 400 }}
            className="fixed bottom-32 left-4 right-4 z-[1000] pointer-events-auto"
          >
            <div 
              className="relative overflow-hidden"
              style={{
                background: 'linear-gradient(145deg, rgba(255,255,255,0.98) 0%, rgba(248,250,252,0.98) 100%)',
                backdropFilter: 'blur(25px)',
                WebkitBackdropFilter: 'blur(25px)',
                borderRadius: '28px',
                boxShadow: '0 25px 50px -12px rgba(0,0,0,0.35), 0 0 0 1px rgba(255,255,255,0.2), inset 0 1px 0 rgba(255,255,255,0.9)',
                border: '1px solid rgba(255,255,255,0.3)'
              }}
            >
              <div 
                className="px-6 py-5 border-b border-white/30"
                style={{
                  background: 'linear-gradient(135deg, rgba(59,130,246,0.08) 0%, rgba(34,197,94,0.08) 100%)'
                }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div 
                      className="w-10 h-10 rounded-2xl flex items-center justify-center text-white"
                      style={{
                        background: 'linear-gradient(135deg, #3b82f6 0%, #10b981 100%)',
                        boxShadow: '0 4px 12px -2px rgba(59,130,246,0.4)'
                      }}
                    >
                      <MenuIcon />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-gray-900">{t.menu}</h3>
                      <p className="text-sm text-gray-600">Naviga il sito</p>
                    </div>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1, rotate: 90 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={closeAllMenus}
                    className="w-11 h-11 flex items-center justify-center rounded-2xl bg-white/90 backdrop-blur-sm shadow-lg text-gray-600 hover:text-red-500 transition-colors border border-white/40"
                  >
                    <CloseIcon />
                  </motion.button>
                </div>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-2 gap-4">
                  {t.sections.map((item, index) => (
                    <motion.button
                      key={item.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.04, duration: 0.3, type: 'spring' }}
                      whileHover={{ 
                        scale: 1.03, 
                        y: -2,
                        transition: { duration: 0.2 }
                      }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => scrollToSection(item.id)}
                      className={`
                        relative flex items-center p-4 rounded-2xl transition-all duration-300 min-h-[70px] group
                        ${currentSection === item.id 
                          ? 'text-white' 
                          : 'text-gray-700 hover:text-gray-900'
                        }
                      `}
                      style={{
                        background: currentSection === item.id 
                          ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                          : 'linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.9) 100%)',
                        boxShadow: currentSection === item.id
                          ? '0 8px 25px -8px rgba(16,185,129,0.5), inset 0 1px 0 rgba(255,255,255,0.3)'
                          : '0 4px 15px -4px rgba(0,0,0,0.12), inset 0 1px 0 rgba(255,255,255,0.9)',
                        border: currentSection === item.id 
                          ? '1px solid rgba(255,255,255,0.3)'
                          : '1px solid rgba(255,255,255,0.4)'
                      }}
                    >
                      <div className="flex items-center space-x-3">
                        <div className="text-2xl">{item.icon}</div>
                        <span className="text-sm font-bold leading-tight">
                          {item.label}
                        </span>
                      </div>
                      
                      {currentSection === item.id && (
                        <motion.div
                          className="absolute right-3 w-2 h-2 bg-white rounded-full"
                          initial={{ scale: 0 }}
                          animate={{ scale: 1 }}
                          transition={{ delay: 0.2 }}
                        />
                      )}
                    </motion.button>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Call Popup */}
      <AnimatePresence>
        {activeMenu === 'call' && isVisible && (
          <motion.div
            initial={{ y: 100, opacity: 0, scale: 0.9 }}
            animate={{ y: 0, opacity: 1, scale: 1 }}
            exit={{ y: 100, opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', damping: 30, stiffness: 400 }}
            className="fixed bottom-32 left-4 right-4 z-[1000] pointer-events-auto"
          >
            <div 
              className="relative overflow-hidden"
              style={{
                background: 'linear-gradient(145deg, rgba(255,255,255,0.98) 0%, rgba(248,250,252,0.98) 100%)',
                backdropFilter: 'blur(25px)',
                WebkitBackdropFilter: 'blur(25px)',
                borderRadius: '28px',
                boxShadow: '0 25px 50px -12px rgba(0,0,0,0.35), inset 0 1px 0 rgba(255,255,255,0.9)',
                border: '1px solid rgba(255,255,255,0.3)'
              }}
            >
              <div 
                className="px-6 py-5 border-b border-white/30"
                style={{
                  background: 'linear-gradient(135deg, rgba(59,130,246,0.08) 0%, rgba(147,51,234,0.08) 100%)'
                }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div 
                      className="w-10 h-10 rounded-2xl flex items-center justify-center text-white"
                      style={{
                        background: 'linear-gradient(135deg, #3b82f6 0%, #9333ea 100%)',
                        boxShadow: '0 4px 12px -2px rgba(59,130,246,0.4)'
                      }}
                    >
                      <PhoneIcon />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-gray-900">{t.call}</h3>
                      <p className="text-sm text-gray-600">Contattaci direttamente</p>
                    </div>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1, rotate: 90 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={closeAllMenus}
                    className="w-11 h-11 flex items-center justify-center rounded-2xl bg-white/90 shadow-lg text-gray-600 hover:text-red-500 transition-colors"
                  >
                    <CloseIcon />
                  </motion.button>
                </div>
              </div>
              
              <div className="p-6 space-y-4">
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 }}
                  className="relative p-5 rounded-3xl overflow-hidden"
                  style={{
                    background: 'linear-gradient(135deg, rgba(16,185,129,0.1) 0%, rgba(5,150,105,0.1) 100%)',
                    border: '1px solid rgba(16,185,129,0.2)',
                    boxShadow: '0 8px 25px -8px rgba(16,185,129,0.2)'
                  }}
                >
                  <div className="flex items-start space-x-4 mb-4">
                    <div 
                      className="w-14 h-14 rounded-2xl flex items-center justify-center text-white text-xl shadow-lg"
                      style={{
                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                      }}
                    >
                      🛒
                    </div>
                    <div className="flex-1">
                      <h4 className="font-bold text-green-900 text-lg mb-1">{t.contacts.banchetto}</h4>
                      <p className="text-green-600 text-sm mb-2">{t.contacts.banchettoAddress}</p>
                      <div className="flex items-center text-green-600 text-sm">
                        <ClockIcon />
                        <span className="ml-2">{t.contacts.banchettoHours}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 gap-3">
                    <motion.button
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleCall(t.contacts.banchettoPhone)}
                      className="flex items-center justify-center p-3 rounded-xl bg-green-500 text-white font-semibold shadow-md hover:shadow-lg transition-all"
                    >
                      <PhoneIcon />
                      <span className="ml-2 text-sm">Chiama</span>
                    </motion.button>
                  </div>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.2 }}
                  className="relative p-5 rounded-3xl overflow-hidden"
                  style={{
                    background: 'linear-gradient(135deg, rgba(59,130,246,0.1) 0%, rgba(37,99,235,0.1) 100%)',
                    border: '1px solid rgba(59,130,246,0.2)',
                    boxShadow: '0 8px 25px -8px rgba(59,130,246,0.2)'
                  }}
                >
                  <div className="flex items-start space-x-4 mb-4">
                    <div 
                      className="w-14 h-14 rounded-2xl flex items-center justify-center text-white text-xl shadow-lg"
                      style={{
                        background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)'
                      }}
                    >
                      🚛
                    </div>
                    <div className="flex-1">
                      <h4 className="font-bold text-blue-900 text-lg mb-1">{t.contacts.ingrosso}</h4>
                      <p className="text-blue-600 text-sm">{t.contacts.ingrossoAddress}</p>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 gap-3">
                    <motion.button
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleCall(t.contacts.ingrossoPhone)}
                      className="flex items-center justify-center p-3 rounded-xl bg-blue-500 text-white font-semibold shadow-md hover:shadow-lg transition-all"
                    >
                      <PhoneIcon />
                      <span className="ml-2 text-sm">Chiama</span>
                    </motion.button>
                  </div>
                </motion.div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Directions Popup */}
      <AnimatePresence>
        {activeMenu === 'directions' && isVisible && (
          <motion.div
            initial={{ y: 100, opacity: 0, scale: 0.9 }}
            animate={{ y: 0, opacity: 1, scale: 1 }}
            exit={{ y: 100, opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', damping: 30, stiffness: 400 }}
            className="fixed bottom-32 left-4 right-4 z-[1000] pointer-events-auto"
          >
            <div 
              className="relative overflow-hidden"
              style={{
                background: 'linear-gradient(145deg, rgba(255,255,255,0.98) 0%, rgba(248,250,252,0.98) 100%)',
                backdropFilter: 'blur(25px)',
                WebkitBackdropFilter: 'blur(25px)',
                borderRadius: '28px',
                boxShadow: '0 25px 50px -12px rgba(0,0,0,0.35), 0 0 0 1px rgba(255,255,255,0.2), inset 0 1px 0 rgba(255,255,255,0.9)',
                border: '1px solid rgba(255,255,255,0.3)'
              }}
            >
              <div 
                className="px-6 py-5 border-b border-white/30"
                style={{
                  background: 'linear-gradient(135deg, rgba(59,130,246,0.08) 0%, rgba(34,197,94,0.08) 100%)'
                }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div 
                      className="w-10 h-10 rounded-2xl flex items-center justify-center text-white"
                      style={{
                        background: 'linear-gradient(135deg, #9333ea 0%, #a855f7 100%)',
                        boxShadow: '0 4px 12px -2px rgba(147,51,234,0.4)'
                      }}
                    >
                      <MapIcon />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-gray-900">{t.directions}</h3>
                      <p className="text-sm text-gray-600">Come raggiungerci</p>
                    </div>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1, rotate: 90 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={closeAllMenus}
                    className="w-11 h-11 flex items-center justify-center rounded-2xl bg-white/90 shadow-lg text-gray-600 hover:text-red-500 transition-colors"
                  >
                    <CloseIcon />
                  </motion.button>
                </div>
              </div>
              
              <div className="p-6 space-y-4">
                <motion.button
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleDirections('banchetto')}
                  className="w-full p-5 rounded-3xl text-left transition-all duration-300"
                  style={{
                    background: 'linear-gradient(135deg, rgba(16,185,129,0.1) 0%, rgba(5,150,105,0.1) 100%)',
                    border: '1px solid rgba(16,185,129,0.2)',
                    boxShadow: '0 8px 25px -8px rgba(16,185,129,0.2)'
                  }}
                >
                  <div className="flex items-center space-x-4">
                    <div 
                      className="w-14 h-14 rounded-2xl flex items-center justify-center text-white shadow-lg"
                      style={{
                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                      }}
                    >
                      <MapIcon />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-bold text-green-900 text-lg mb-1">{t.contacts.banchetto}</h4>
                      <p className="text-green-600 text-sm leading-relaxed">{t.contacts.banchettoAddress}</p>
                      <div className="flex items-center text-green-500 text-sm mt-2 font-semibold">
                        <span>📍 Apri in Google Maps</span>
                      </div>
                    </div>
                  </div>
                </motion.button>

                <motion.button
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleDirections('ingrosso')}
                  className="w-full p-5 rounded-3xl text-left transition-all duration-300"
                  style={{
                    background: 'linear-gradient(135deg, rgba(59,130,246,0.1) 0%, rgba(37,99,235,0.1) 100%)',
                    border: '1px solid rgba(59,130,246,0.2)',
                    boxShadow: '0 8px 25px -8px rgba(59,130,246,0.2)'
                  }}
                >
                  <div className="flex items-center space-x-4">
                    <div 
                      className="w-14 h-14 rounded-2xl flex items-center justify-center text-white shadow-lg"
                      style={{
                        background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)'
                      }}
                    >
                      <MapIcon />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-bold text-blue-900 text-lg mb-1">{t.contacts.ingrosso}</h4>
                      <p className="text-blue-600 text-sm leading-relaxed">{t.contacts.ingrossoAddress}</p>
                      <div className="flex items-center text-blue-500 text-sm mt-2 font-semibold">
                        <span>📍 Apri in Google Maps</span>
                      </div>
                    </div>
                  </div>
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* DOCK PRINCIPALE */}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            initial={{ y: 100, opacity: 0, scale: 0.8 }}
            animate={{ y: 0, opacity: 1, scale: 1 }}
            exit={{ y: 100, opacity: 0, scale: 0.8 }}
            transition={{ 
              type: 'spring', 
              damping: 25, 
              stiffness: 350,
              opacity: { duration: 0.3 }
            }}
            className="fixed bottom-0 left-0 right-0 z-[1001] pointer-events-none"
            style={{
              paddingBottom: 'max(20px, env(safe-area-inset-bottom))',
              paddingLeft: 'env(safe-area-inset-left)',
              paddingRight: 'env(safe-area-inset-right)'
            }}
          >
            <div className="flex justify-center px-4">
              <div 
                className="relative pointer-events-auto"
                style={{
                  background: 'linear-gradient(135deg, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.08) 100%)',
                  backdropFilter: 'blur(25px)',
                  WebkitBackdropFilter: 'blur(25px)',
                  borderRadius: '32px',
                  padding: '12px',
                  boxShadow: '0 30px 60px -12px rgba(0,0,0,0.4), 0 0 0 1px rgba(255,255,255,0.15), inset 0 1px 0 rgba(255,255,255,0.25)',
                  border: '1px solid rgba(255,255,255,0.15)'
                }}
              >
                <div 
                  className="absolute inset-3 rounded-3xl"
                  style={{
                    background: 'linear-gradient(135deg, rgba(0,0,0,0.08) 0%, rgba(0,0,0,0.04) 100%)',
                    boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.1)'
                  }}
                />
                
                <div className="relative flex items-center space-x-4">
                  {/* Menu Button */}
                  <motion.button
                    whileHover={{ 
                      scale: 1.12, 
                      y: -6,
                      rotateY: 12,
                      transition: { duration: 0.2, type: 'spring', stiffness: 400 }
                    }}
                    whileTap={{ 
                      scale: 0.95, 
                      y: 0,
                      transition: { duration: 0.1 }
                    }}
                    onClick={() => toggleMenu('menu')}
                    className={`
                      relative flex flex-col items-center justify-center rounded-3xl
                      transition-all duration-300 group overflow-hidden
                      ${activeMenu === 'menu' ? 'text-white' : 'text-gray-700'}
                    `}
                    style={{
                      background: activeMenu === 'menu' 
                        ? 'linear-gradient(135deg, #3b82f6 0%, #10b981 100%)'
                        : 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.95) 100%)',
                      boxShadow: activeMenu === 'menu'
                        ? '0 15px 35px -8px rgba(59,130,246,0.6), inset 0 1px 0 rgba(255,255,255,0.4), 0 0 0 1px rgba(255,255,255,0.15)'
                        : '0 10px 30px -8px rgba(0,0,0,0.3), inset 0 1px 0 rgba(255,255,255,0.9), 0 0 0 1px rgba(255,255,255,0.25)',
                      transform: 'perspective(500px) translateZ(6px)',
                      width: '72px',
                      height: '72px'
                    }}
                  >
                    <motion.div 
                      animate={activeMenu === 'menu' ? { rotate: 180, scale: 1.1 } : { rotate: 0, scale: 1 }}
                      className="mb-1"
                    >
                      <MenuIcon />
                    </motion.div>
                    <span className="text-xs font-bold opacity-90">{t.menu}</span>
                    
                    <AnimatePresence>
                      {activeMenu === 'menu' && (
                        <motion.div
                          className="absolute inset-0 rounded-3xl"
                          initial={{ opacity: 0, scale: 0.8 }}
                          animate={{ opacity: 1, scale: 1.2 }}
                          exit={{ opacity: 0, scale: 0.8 }}
                          style={{
                            background: 'linear-gradient(135deg, rgba(59,130,246,0.4) 0%, rgba(16,185,129,0.4) 100%)',
                            filter: 'blur(12px)',
                            zIndex: -1
                          }}
                        />
                      )}
                    </AnimatePresence>
                  </motion.button>

                  {/* Call Button */}
                  <motion.button
                    whileHover={{ 
                      scale: 1.12, 
                      y: -6,
                      rotateY: -12,
                      transition: { duration: 0.2, type: 'spring', stiffness: 400 }
                    }}
                    whileTap={{ 
                      scale: 0.95, 
                      y: 0,
                      transition: { duration: 0.1 }
                    }}
                    onClick={() => toggleMenu('call')}
                    className={`
                      relative flex flex-col items-center justify-center rounded-3xl
                      transition-all duration-300 group overflow-hidden
                      ${activeMenu === 'call' ? 'text-white' : 'text-gray-700'}
                    `}
                    style={{
                      background: activeMenu === 'call' 
                        ? 'linear-gradient(135deg, #f59e0b 0%, #dc2626 100%)'
                        : 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.95) 100%)',
                      boxShadow: activeMenu === 'call'
                        ? '0 15px 35px -8px rgba(245,158,11,0.6), inset 0 1px 0 rgba(255,255,255,0.4), 0 0 0 1px rgba(255,255,255,0.15)'
                        : '0 10px 30px -8px rgba(0,0,0,0.3), inset 0 1px 0 rgba(255,255,255,0.9), 0 0 0 1px rgba(255,255,255,0.25)',
                      transform: 'perspective(500px) translateZ(6px)',
                      width: '72px',
                      height: '72px'
                    }}
                  >
                    <motion.div 
                      animate={activeMenu === 'call' ? { rotate: 8, scale: 1.1 } : { rotate: 0, scale: 1 }}
                      className="mb-1"
                    >
                      <PhoneIcon />
                    </motion.div>
                    <span className="text-xs font-bold opacity-90">{t.call}</span>
                    
                    <AnimatePresence>
                      {activeMenu === 'call' && (
                        <motion.div
                          className="absolute inset-0 rounded-3xl"
                          initial={{ opacity: 0, scale: 0.8 }}
                          animate={{ opacity: 1, scale: 1.2 }}
                          exit={{ opacity: 0, scale: 0.8 }}
                          style={{
                            background: 'linear-gradient(135deg, rgba(245,158,11,0.4) 0%, rgba(220,38,38,0.4) 100%)',
                            filter: 'blur(12px)',
                            zIndex: -1
                          }}
                        />
                      )}
                    </AnimatePresence>
                  </motion.button>

                  {/* Directions Button */}
                  <motion.button
                    whileHover={{ 
                      scale: 1.12, 
                      y: -6,
                      rotateY: 12,
                      transition: { duration: 0.2, type: 'spring', stiffness: 400 }
                    }}
                    whileTap={{ 
                      scale: 0.95, 
                      y: 0,
                      transition: { duration: 0.1 }
                    }}
                    onClick={() => toggleMenu('directions')}
                    className={`
                      relative flex flex-col items-center justify-center rounded-3xl
                      transition-all duration-300 group overflow-hidden
                      ${activeMenu === 'directions' ? 'text-white' : 'text-gray-700'}
                    `}
                    style={{
                      background: activeMenu === 'directions' 
                        ? 'linear-gradient(135deg, #8b5cf6 0%, #ec4899 100%)'
                        : 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.95) 100%)',
                      boxShadow: activeMenu === 'directions'
                        ? '0 15px 35px -8px rgba(139,92,246,0.6), inset 0 1px 0 rgba(255,255,255,0.4), 0 0 0 1px rgba(255,255,255,0.15)'
                        : '0 10px 30px -8px rgba(0,0,0,0.3), inset 0 1px 0 rgba(255,255,255,0.9), 0 0 0 1px rgba(255,255,255,0.25)',
                      transform: 'perspective(500px) translateZ(6px)',
                      width: '72px',
                      height: '72px'
                    }}
                  >
                    <motion.div 
                      animate={activeMenu === 'directions' ? { rotate: -8, scale: 1.1 } : { rotate: 0, scale: 1 }}
                      className="mb-1"
                    >
                      <MapIcon />
                    </motion.div>
                    <span className="text-xs font-bold opacity-90">{t.directions}</span>
                    
                    <AnimatePresence>
                      {activeMenu === 'directions' && (
                        <motion.div
                          className="absolute inset-0 rounded-3xl"
                          initial={{ opacity: 0, scale: 0.8 }}
                          animate={{ opacity: 1, scale: 1.2 }}
                          exit={{ opacity: 0, scale: 0.8 }}
                          style={{
                            background: 'linear-gradient(135deg, rgba(139,92,246,0.4) 0%, rgba(236,72,153,0.4) 100%)',
                            filter: 'blur(12px)',
                            zIndex: -1
                          }}
                        />
                      )}
                    </AnimatePresence>
                  </motion.button>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}

export default PremiumMobileDock


--- FILE: src/components/layout/Navigation.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface NavigationProps {
  language: 'it' | 'de'
  onLanguageChange: (lang: 'it' | 'de') => void
}

const translations = {
  it: {
    menu: {
      home: 'Home',
      market: 'Al Banchetto',
      wholesale: 'Ingrosso',
      about: 'Chi Siamo',
      contact: 'Contatti'
    },
    cta: 'Richiedi Listino',
    phone: '+39 351 577 6198'
  },
  de: {
    menu: {
      home: 'Home',
      market: 'Marktstand',
      wholesale: 'Großhandel',
      about: 'Über uns',
      contact: 'Kontakt'
    },
    cta: 'Preisliste anfordern',
    phone: '+39 351 577 6198'
  }
}

const Navigation: React.FC<NavigationProps> = ({ language, onLanguageChange }) => {
  const [isScrolled, setIsScrolled] = useState(false)
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [activeSection, setActiveSection] = useState('hero')

  const t = translations[language]

  // Scroll detection ottimizzato
  useEffect(() => {
    let ticking = false
    
    const handleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          setIsScrolled(window.scrollY > 50)
          ticking = false
        })
        ticking = true
      }
    }

    // Intersection Observer per sezioni attive
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '-80px 0px -80px 0px'
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setActiveSection(entry.target.id)
        }
      })
    }, observerOptions)

    // Osserva tutte le sezioni
    const sections = ['hero', 'market', 'wholesale', 'about']
    sections.forEach(id => {
      const element = document.getElementById(id)
      if (element) observer.observe(element)
    })

    window.addEventListener('scroll', handleScroll, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', handleScroll)
      observer.disconnect()
    }
  }, [])

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' })
      setIsMobileMenuOpen(false)
    }
  }

  const menuItems = [
    { id: 'hero', label: t.menu.home, icon: '🏠' },
    { id: 'market', label: t.menu.market, icon: '🛒' },
    { id: 'wholesale', label: t.menu.wholesale, icon: '🏢' },
    { id: 'about', label: t.menu.about, icon: '🌱' }
  ]

  return (
    <>
      {/* Desktop Navigation */}
      <motion.nav
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
          isScrolled 
            ? 'bg-white/95 backdrop-blur-md shadow-lg border-b border-green-100' 
            : 'bg-transparent'
        }`}
      >
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-20">
            {/* Logo */}
            <motion.div
              onClick={() => scrollToSection('hero')}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center space-x-3 cursor-pointer"
            >
              <img
                src="/logo-bottamedi.png"
                alt="Bottamedi Logo"
                className="h-10 w-auto"
              />
              <div className={`font-bold text-xl transition-colors ${
                isScrolled ? 'text-green-600' : 'text-white'
              }`}>
                BOTTAMEDI
              </div>
            </motion.div>

            {/* Desktop Menu */}
            <div className="hidden lg:flex items-center space-x-8">
              {menuItems.map((item) => (
                <motion.button
                  key={item.id}
                  onClick={() => scrollToSection(item.id)}
                  whileHover={{ y: -2 }}
                  className={`relative px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                    activeSection === item.id
                      ? isScrolled 
                        ? 'text-green-600 bg-green-50' 
                        : 'text-white bg-white/20'
                      : isScrolled 
                        ? 'text-gray-700 hover:text-green-600 hover:bg-green-50' 
                        : 'text-white/80 hover:text-white hover:bg-white/10'
                  }`}
                >
                  {item.label}
                  {activeSection === item.id && (
                    <motion.div
                      layoutId="activeIndicator"
                      className={`absolute bottom-0 left-0 right-0 h-0.5 rounded-full ${
                        isScrolled ? 'bg-green-500' : 'bg-white'
                      }`}
                    />
                  )}
                </motion.button>
              ))}
            </div>

            {/* Language & CTA */}
            <div className="hidden lg:flex items-center space-x-4">
              {/* Language Switcher */}
              <div className="flex items-center bg-white/10 rounded-lg p-1">
                <button
                  onClick={() => onLanguageChange('it')}
                  className={`px-3 py-1 rounded text-sm font-medium transition-all ${
                    language === 'it' 
                      ? 'bg-white text-green-600' 
                      : isScrolled ? 'text-gray-600 hover:text-green-600' : 'text-white/70 hover:text-white'
                  }`}
                >
                  IT
                </button>
                <button
                  onClick={() => onLanguageChange('de')}
                  className={`px-3 py-1 rounded text-sm font-medium transition-all ${
                    language === 'de' 
                      ? 'bg-white text-green-600' 
                      : isScrolled ? 'text-gray-600 hover:text-green-600' : 'text-white/70 hover:text-white'
                  }`}
                >
                  DE
                </button>
              </div>

              {/* CTA Button */}
              <motion.button
                onClick={() => scrollToSection('wholesale')}
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
                className="bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-2 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300"
              >
                {t.cta}
              </motion.button>
            </div>

            {/* Mobile Menu Button */}
            <motion.button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              whileTap={{ scale: 0.95 }}
              className={`lg:hidden p-2 rounded-lg transition-colors ${
                isScrolled ? 'text-gray-700 hover:bg-gray-100' : 'text-white hover:bg-white/10'
              }`}
            >
              <div className="w-6 h-6 relative">
                <motion.span
                  animate={isMobileMenuOpen ? { rotate: 45, y: 8 } : { rotate: 0, y: 0 }}
                  className="absolute top-0 left-0 w-full h-0.5 bg-current rounded-full"
                />
                <motion.span
                  animate={isMobileMenuOpen ? { opacity: 0 } : { opacity: 1 }}
                  className="absolute top-2.5 left-0 w-full h-0.5 bg-current rounded-full"
                />
                <motion.span
                  animate={isMobileMenuOpen ? { rotate: -45, y: -8 } : { rotate: 0, y: 0 }}
                  className="absolute top-5 left-0 w-full h-0.5 bg-current rounded-full"
                />
              </div>
            </motion.button>
          </div>
        </div>
      </motion.nav>

      {/* Mobile Menu Overlay */}
      <AnimatePresence>
        {isMobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-40 lg:hidden"
          >
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setIsMobileMenuOpen(false)}
              className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            />

            {/* Menu Panel */}
            <motion.div
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: 'tween', duration: 0.3 }}
              className="absolute right-0 top-0 h-full w-80 max-w-sm bg-white shadow-2xl"
            >
              <div className="p-6">
                {/* Header */}
                <div className="flex items-center justify-between mb-8">
                  <div className="flex items-center space-x-3">
                    <img
                      src="/logo-bottamedi.png"
                      alt="Bottamedi Logo"
                      className="h-8 w-auto"
                    />
                    <span className="font-bold text-lg text-green-600">BOTTAMEDI</span>
                  </div>
                  <button
                    onClick={() => setIsMobileMenuOpen(false)}
                    className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg"
                  >
                    ✕
                  </button>
                </div>

                {/* Menu Items */}
                <div className="space-y-4 mb-8">
                  {menuItems.map((item, index) => (
                    <motion.button
                      key={item.id}
                      onClick={() => scrollToSection(item.id)}
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className={`w-full flex items-center space-x-4 p-4 rounded-2xl transition-all duration-300 ${
                        activeSection === item.id
                          ? 'bg-green-50 text-green-600 border-2 border-green-200'
                          : 'text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      <span className="text-2xl">{item.icon}</span>
                      <span className="font-medium text-lg">{item.label}</span>
                      {activeSection === item.id && (
                        <motion.div
                          layoutId="mobileActiveIndicator"
                          className="ml-auto w-2 h-2 bg-green-500 rounded-full"
                        />
                      )}
                    </motion.button>
                  ))}
                </div>

                {/* Language Switcher */}
                <div className="mb-6">
                  <p className="text-sm text-gray-500 mb-3">Lingua / Sprache</p>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => onLanguageChange('it')}
                      className={`flex-1 py-2 px-4 rounded-xl font-medium transition-all ${
                        language === 'it' 
                          ? 'bg-green-500 text-white' 
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      🇮🇹 Italiano
                    </button>
                    <button
                      onClick={() => onLanguageChange('de')}
                      className={`flex-1 py-2 px-4 rounded-xl font-medium transition-all ${
                        language === 'de' 
                          ? 'bg-green-500 text-white' 
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      🇩🇪 Deutsch
                    </button>
                  </div>
                </div>

                {/* CTA Button */}
                <motion.button
                  onClick={() => scrollToSection('wholesale')}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                  className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 px-6 rounded-2xl font-semibold text-lg shadow-lg"
                >
                  {t.cta}
                </motion.button>

                {/* Contact Info */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5 }}
                  className="mt-8 pt-6 border-t border-gray-200"
                >
                  <div className="space-y-3 text-sm text-gray-600">
                    <div className="flex items-center space-x-3">
                      <span>📞</span>
                      <a href={`tel:${t.phone}`} className="hover:text-green-600">
                        {t.phone}
                      </a>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span>📧</span>
                      <a href="mailto:bottamedipierluigi@virgilio.it" className="hover:text-green-600">
                        bottamedipierluigi@virgilio.it
                      </a>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span>📍</span>
                      <span>Via Cavalleggeri Udine, Mezzolombardo</span>
                    </div>
                  </div>
                </motion.div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Spacer for fixed navigation */}
      <div className="h-20" />
    </>
  )
}

export default Navigation

--- FILE: src/components/navigation/BreadcrumbNavigation.tsx ---
import React, { useMemo } from 'react'
import { motion } from 'framer-motion'

interface BreadcrumbItem {
  label: string
  href: string
  active?: boolean
  icon?: string
}

interface BreadcrumbNavigationProps {
  items: BreadcrumbItem[]
  language: 'it' | 'de'
  currentSection: string
  className?: string
}

const BreadcrumbNavigation: React.FC<BreadcrumbNavigationProps> = ({
  items: customItems,
  language,
  currentSection,
  className = ''
}) => {
  const translations = {
    it: {
      home: 'Home',
      about: 'Chi Siamo',
      dettaglio: 'Il Banchetto',
      services: 'Servizi',
      products: 'Prodotti',
      wholesale: 'Ingrosso HORECA',
      contact: 'Contatti',
      breadcrumbAriaLabel: 'Percorso di navigazione'
    },
    de: {
      home: 'Startseite',
      about: 'Über Uns',
      dettaglio: 'Marktstand',
      services: 'Dienstleistungen',
      products: 'Produkte',
      wholesale: 'Großhandel HORECA',
      contact: 'Kontakt',
      breadcrumbAriaLabel: 'Navigationspfad'
    }
  }

  const t = translations[language]

  // Generate breadcrumb items based on current section
  const breadcrumbItems = useMemo(() => {
    if (customItems && customItems.length > 0) {
      return customItems
    }

    const baseItems: BreadcrumbItem[] = [
      {
        label: t.home,
        href: '#hero',
        icon: '🏠'
      }
    ]

    const sectionMap: Record<string, BreadcrumbItem> = {
      hero: {
        label: t.home,
        href: '#hero',
        icon: '🏠',
        active: true
      },
      about: {
        label: t.about,
        href: '#about',
        icon: '👨‍👩‍👧‍👦'
      },
      dettaglio: {
        label: t.dettaglio,
        href: '#dettaglio',
        icon: '🛒'
      },
      services: {
        label: t.services,
        href: '#services',
        icon: '⚙️'
      },
      products: {
        label: t.products,
        href: '#products',
        icon: '🍎'
      },
      wholesale: {
        label: t.wholesale,
        href: '#wholesale',
        icon: '🏢'
      },
      contact: {
        label: t.contact,
        href: '#contact',
        icon: '📞'
      }
    }

    if (currentSection === 'hero') {
      return [{ ...sectionMap.hero }]
    }

    const currentItem = sectionMap[currentSection]
    if (currentItem) {
      return [
        baseItems[0],
        { ...currentItem, active: true }
      ]
    }

    return baseItems
  }, [customItems, currentSection, t])

  const handleNavigation = (href: string, label: string) => {
    // Track breadcrumb navigation
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'breadcrumb_navigation', {
        event_category: 'navigation',
        event_label: label,
        custom_parameter_section: href.replace('#', ''),
        value: 1
      })
    }

    // Smooth scroll to section
    const element = document.querySelector(href)
    if (element) {
      const offset = 80 // Header height
      const elementPosition = element.getBoundingClientRect().top + window.pageYOffset - offset
      
      window.scrollTo({
        top: elementPosition,
        behavior: 'smooth'
      })
    }

    // Haptic feedback
    if ('vibrate' in navigator) {
      try {
        navigator.vibrate([15])
      } catch (e) {
        console.log('Haptic non disponibile')
      }
    }
  }

  if (breadcrumbItems.length <= 1) {
    return null // Don't show breadcrumb for home only
  }

  return (
    <nav 
      aria-label={t.breadcrumbAriaLabel}
      className={`bg-white/80 backdrop-blur-md border-b border-gray-200/50 ${className}`}
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <ol className="flex items-center space-x-2 py-3 text-sm">
          {breadcrumbItems.map((item, index) => (
            <motion.li
              key={`${item.href}-${index}`}
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.2, delay: index * 0.05 }}
              className="flex items-center"
            >
              {/* Separator */}
              {index > 0 && (
                <svg 
                  className="w-4 h-4 text-gray-400 mx-2" 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M9 5l7 7-7 7" 
                  />
                </svg>
              )}

              {/* Breadcrumb item */}
              {item.active ? (
                <span 
                  className="flex items-center space-x-1 text-green-600 font-medium"
                  aria-current="page"
                >
                  {item.icon && <span className="text-base">{item.icon}</span>}
                  <span>{item.label}</span>
                </span>
              ) : (
                <motion.button
                  onClick={() => handleNavigation(item.href, item.label)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.98 }}
                  className="flex items-center space-x-1 text-gray-600 hover:text-green-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1 rounded px-1 py-0.5"
                >
                  {item.icon && <span className="text-base">{item.icon}</span>}
                  <span className="hover:underline">{item.label}</span>
                </motion.button>
              )}
            </motion.li>
          ))}
        </ol>
      </div>

      {/* Structured data for SEO */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify({
            "@context": "https://schema.org",
            "@type": "BreadcrumbList",
            "itemListElement": breadcrumbItems.map((item, index) => ({
              "@type": "ListItem",
              "position": index + 1,
              "name": item.label,
              "item": `https://www.bottamedi.eu${item.href}`
            }))
          })
        }}
      />
    </nav>
  )
}

export default React.memo(BreadcrumbNavigation)

// Hook per gestire il breadcrumb automaticamente
export const useBreadcrumb = (currentSection: string) => {
  const [breadcrumbVisible, setBreadcrumbVisible] = React.useState(false)

  React.useEffect(() => {
    const handleScroll = () => {
      const shouldShow = window.scrollY > 100 && currentSection !== 'hero'
      setBreadcrumbVisible(shouldShow)
    }

    window.addEventListener('scroll', handleScroll, { passive: true })
    handleScroll() // Initial check

    return () => window.removeEventListener('scroll', handleScroll)
  }, [currentSection])

  return breadcrumbVisible
}

--- FILE: src/components/legal/CookieBanner.tsx ---
import React, { useState, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

// Declare gtag function for TypeScript
declare global {
  interface Window {
    gtag: (...args: any[]) => void;
  }
}

interface CookieBannerProps {
  language: 'it' | 'de'
}

const CookieBanner: React.FC<CookieBannerProps> = ({ language }) => {
  const [isVisible, setIsVisible] = useState(false)
  const [showSettings, setShowSettings] = useState(false)
  const [preferences, setPreferences] = useState({
    necessary: true,
    analytics: false,
    marketing: false
  })

  useEffect(() => {
    const consent = localStorage.getItem('bottamedi-cookie-consent')
    if (!consent) {
      // Mostra il banner dopo 2 secondi dal caricamento
      const timer = setTimeout(() => setIsVisible(true), 2000)
      return () => clearTimeout(timer)
    }
  }, [])

  const translations = {
    it: {
      title: 'Utilizziamo i Cookie',
      description: 'Utilizziamo cookie tecnici e, previo consenso, cookie di profilazione per migliorare la tua esperienza di navigazione e offrirti contenuti personalizzati.',
      necessary: 'Cookie Tecnici (Necessari)',
      analytics: 'Cookie Analytics',
      marketing: 'Cookie di Marketing',
      acceptAll: 'Accetta Tutti',
      acceptSelected: 'Accetta Selezionati',
      reject: 'Rifiuta Non Necessari',
      settings: 'Impostazioni Cookie',
      moreInfo: 'Maggiori informazioni nella nostra',
      privacyPolicy: 'Privacy Policy',
      details: {
        necessary: 'Essenziali per il funzionamento del sito web',
        analytics: 'Ci aiutano a migliorare il sito (Google Analytics)',
        marketing: 'Per annunci personalizzati e remarketing'
      }
    },
    de: {
      title: 'Wir verwenden Cookies',
      description: 'Wir verwenden technische Cookies und nach Zustimmung Profiling-Cookies, um Ihr Navigationserlebnis zu verbessern und Ihnen personalisierte Inhalte anzubieten.',
      necessary: 'Technische Cookies (Notwendig)',
      analytics: 'Analytics-Cookies',
      marketing: 'Marketing-Cookies',
      acceptAll: 'Alle Akzeptieren',
      acceptSelected: 'Ausgewählte Akzeptieren',
      reject: 'Nicht Notwendige Ablehnen',
      settings: 'Cookie-Einstellungen',
      moreInfo: 'Weitere Informationen in unserer',
      privacyPolicy: 'Datenschutzerklärung',
      details: {
        necessary: 'Wesentlich für das Funktionieren der Website',
        analytics: 'Helfen uns, die Website zu verbessern (Google Analytics)',
        marketing: 'Für personalisierte Werbung und Remarketing'
      }
    }
  }

  const t = translations[language]

  const handleAcceptAll = useCallback(() => {
    const consent = {
      necessary: true,
      analytics: true,
      marketing: true,
      timestamp: Date.now()
    }
    localStorage.setItem('bottamedi-cookie-consent', JSON.stringify(consent))
    
    // Attiva Google Analytics
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('consent', 'update', {
        analytics_storage: 'granted',
        ad_storage: 'granted'
      })
      window.gtag('event', 'cookie_consent', {
        event_category: 'privacy',
        event_label: 'accept_all',
        value: 1
      })
    }
    
    setIsVisible(false)
  }, [])

  const handleAcceptSelected = useCallback(() => {
    const consent = {
      ...preferences,
      timestamp: Date.now()
    }
    localStorage.setItem('bottamedi-cookie-consent', JSON.stringify(consent))
    
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('consent', 'update', {
        analytics_storage: preferences.analytics ? 'granted' : 'denied',
        ad_storage: preferences.marketing ? 'granted' : 'denied'
      })
      window.gtag('event', 'cookie_consent', {
        event_category: 'privacy',
        event_label: 'accept_selected',
        custom_parameters: {
          analytics: preferences.analytics,
          marketing: preferences.marketing
        }
      })
    }
    
    setIsVisible(false)
  }, [preferences])

  const handleReject = useCallback(() => {
    const consent = {
      necessary: true,
      analytics: false,
      marketing: false,
      timestamp: Date.now()
    }
    localStorage.setItem('bottamedi-cookie-consent', JSON.stringify(consent))
    
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('consent', 'update', {
        analytics_storage: 'denied',
        ad_storage: 'denied'
      })
      window.gtag('event', 'cookie_consent', {
        event_category: 'privacy',
        event_label: 'reject_optional',
        value: 1
      })
    }
    
    setIsVisible(false)
  }, [])

  if (!isVisible) return null

  return (
    <AnimatePresence>
      <motion.div
        initial={{ y: 100, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        exit={{ y: 100, opacity: 0 }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        className="fixed bottom-0 left-0 right-0 z-50 bg-white shadow-2xl border-t border-gray-200"
        style={{ maxHeight: '90vh', overflowY: 'auto' }}
      >
        <div className="container mx-auto px-4 py-6">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div className="flex-1">
              <div className="flex items-center space-x-2 mb-2">
                <span className="text-2xl">🍪</span>
                <h3 className="text-lg font-bold text-gray-900">{t.title}</h3>
              </div>
              <p className="text-sm text-gray-600 mb-3 leading-relaxed">
                {t.description}
              </p>
              <p className="text-xs text-gray-500">
                {t.moreInfo} <button 
                  onClick={() => {
                    if (typeof window !== 'undefined' && window.gtag) {
                      window.gtag('event', 'privacy_policy_click', {
                        event_category: 'engagement',
                        event_label: 'cookie_banner'
                      })
                    }
                  }} 
                  className="text-green-600 underline hover:text-green-700 transition-colors"
                >
                  {t.privacyPolicy}
                </button>
              </p>
            </div>

            <div className="flex flex-col sm:flex-row gap-2 lg:flex-shrink-0">
              <button
                onClick={() => setShowSettings(!showSettings)}
                className="px-4 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium"
              >
                {t.settings}
              </button>
              <button
                onClick={handleReject}
                className="px-4 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium"
              >
                {t.reject}
              </button>
              <button
                onClick={handleAcceptAll}
                className="px-6 py-2 text-sm bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium shadow-md"
              >
                {t.acceptAll}
              </button>
            </div>
          </div>

          {/* Cookie Settings */}
          <AnimatePresence>
            {showSettings && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                transition={{ duration: 0.2 }}
                className="mt-4 pt-4 border-t border-gray-200"
              >
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                    <div className="flex items-center justify-between mb-2">
                      <label className="text-sm font-medium text-gray-900">{t.necessary}</label>
                      <input 
                        type="checkbox" 
                        checked={true} 
                        disabled 
                        className="rounded border-gray-300 text-green-600"
                      />
                    </div>
                    <p className="text-xs text-gray-600 leading-relaxed">{t.details.necessary}</p>
                  </div>

                  <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                    <div className="flex items-center justify-between mb-2">
                      <label className="text-sm font-medium text-gray-900">{t.analytics}</label>
                      <input 
                        type="checkbox" 
                        checked={preferences.analytics}
                        onChange={(e) => setPreferences(prev => ({ ...prev, analytics: e.target.checked }))}
                        className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                      />
                    </div>
                    <p className="text-xs text-gray-600 leading-relaxed">{t.details.analytics}</p>
                  </div>

                  <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                    <div className="flex items-center justify-between mb-2">
                      <label className="text-sm font-medium text-gray-900">{t.marketing}</label>
                      <input 
                        type="checkbox" 
                        checked={preferences.marketing}
                        onChange={(e) => setPreferences(prev => ({ ...prev, marketing: e.target.checked }))}
                        className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                      />
                    </div>
                    <p className="text-xs text-gray-600 leading-relaxed">{t.details.marketing}</p>
                  </div>
                </div>

                <div className="flex justify-end">
                  <button
                    onClick={handleAcceptSelected}
                    className="px-6 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors font-medium shadow-md"
                  >
                    {t.acceptSelected}
                  </button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </AnimatePresence>
  )
}

export default React.memo(CookieBanner)

--- FILE: src/components/legal/LegalDocuments.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface LegalDocumentsProps {
  language: 'it' | 'de'
}

const LegalDocuments: React.FC<LegalDocumentsProps> = ({ language }) => {
  const [isUnlocked, setIsUnlocked] = useState(false)
  const [activeDoc, setActiveDoc] = useState<string | null>(null)
  const [selectedCategory, setSelectedCategory] = useState('privacy')

  const translations = {
    it: {
      title: 'Documenti Legali',
      subtitle: 'Informazioni legali e normative',
      description: 'Consulta tutti i documenti legali relativi al nostro sito e ai nostri servizi.',
      tabs: {
        privacy: 'Privacy Policy',
        terms: 'Termini di Servizio', 
        cookies: 'Cookie Policy'
      },
      lastUpdated: 'Ultimo aggiornamento',
      close: 'Chiudi Sezione',
      backToFooter: 'Torna al Footer',
      readTime: 'Lettura',
      expandAll: 'Espandi Tutto',
      collapseAll: 'Chiudi Tutto',
      contact: 'Per domande',
      documents: {
        privacy: {
          title: 'Privacy Policy',
          lastUpdated: 'Dicembre 2024',
          readTime: '3-4 min',
          summary: 'Informazioni complete su come raccogliamo, utilizziamo e proteggiamo i tuoi dati personali secondo il GDPR.',
          sections: [
            {
              title: '1. Titolare del Trattamento',
              content: `**Bottamedi Pierluigi**
P.IVA: 02273530226
Via Alcide de Gasperi, 47
38017 Mezzolombardo (TN)
Tel: +39 0461 602534
Email: bottamedipierluigi@virgilio.it

Siamo responsabili del trattamento dei tuoi dati personali e ci impegniamo a proteggerli secondo le normative vigenti.`,
              icon: '🏢'
            },
            {
              title: '2. Dati Personali Raccolti',
              content: `**Dati di Contatto:**
• Nome e cognome
• Indirizzo email
• Numero di telefono
• Nome dell'attività (per clienti HORECA)

**Dati di Navigazione:**
• Indirizzo IP
• Tipo di browser e dispositivo
• Pagine visitate e tempo di permanenza
• Preferenze linguistiche

**Cookie Tecnici:**
• Sessione di navigazione
• Preferenze sito
• Funzionalità carrello (se presente)`,
              icon: '📊'
            },
            {
              title: '3. Finalità del Trattamento',
              content: `**Finalità Principali:**
• Evasione richieste commerciali e preventivi
• Gestione rapporti commerciali HORECA
• Risposta a quesiti e supporto clienti
• Miglioramento dell'esperienza utente

**Finalità Secondarie (con consenso):**
• Invio newsletter e comunicazioni commerciali
• Analisi statistiche anonime
• Personalizzazione contenuti

**Base Giuridica:**
• Consenso esplicito (newsletter)
• Interesse legittimo (miglioramento servizi)
• Adempimento contrattuale (ordini)`,
              icon: '🎯'
            },
            {
              title: '4. Tempi di Conservazione',
              content: `**Dati di Contatto Commerciali:**
2 anni dall'ultimo contatto o transazione

**Dati Newsletter:**
Fino alla revoca del consenso

**Cookie Tecnici:**
Durata della sessione di navigazione

**Dati Contrattuali:**
10 anni per obblighi fiscali

**Statistiche Analytics:**
26 mesi in forma anonima

I dati vengono cancellati automaticamente alla scadenza dei termini indicati.`,
              icon: '⏰'
            },
            {
              title: '5. I Tuoi Diritti',
              content: `**Diritti Garantiti dal GDPR:**

**📋 Diritto di Accesso**
Puoi richiedere una copia di tutti i dati che abbiamo su di te

**✏️ Diritto di Rettifica**
Puoi correggere dati inesatti o incompleti

**🗑️ Diritto alla Cancellazione**
Puoi richiedere la rimozione dei tuoi dati ("diritto all'oblio")

**🔒 Diritto di Limitazione**
Puoi limitare il trattamento in casi specifici

**📦 Diritto alla Portabilità**
Puoi ottenere i dati in formato leggibile

**🚫 Diritto di Opposizione**
Puoi opporti al trattamento per marketing

**Come Esercitare i Diritti:**
Email: bottamedipierluigi@virgilio.it
Risposta entro 30 giorni dalla richiesta`,
              icon: '⚖️'
            },
            {
              title: '6. Sicurezza e Protezione',
              content: `**Misure di Sicurezza Adottate:**

**Sicurezza Tecnica:**
• Connessioni HTTPS crittografate
• Server protetti e aggiornati
• Backup regolari e sicuri
• Firewall e sistemi antimalware

**Sicurezza Organizzativa:**
• Accesso limitato ai dati
• Formazione del personale
• Procedure di gestione incidenti
• Audit periodici

**In Caso di Violazione:**
Ti informeremo entro 72 ore se i tuoi dati sono compromessi, con dettagli su misure adottate e azioni da intraprendere.`,
              icon: '🔐'
            }
          ]
        },
        terms: {
          title: 'Termini di Servizio',
          lastUpdated: 'Dicembre 2024',
          readTime: '4-5 min',
          summary: 'Condizioni generali per l\'utilizzo del nostro sito web e per i rapporti commerciali con Bottamedi.',
          sections: [
            {
              title: '1. Informazioni Aziendali',
              content: `**Bottamedi Pierluigi**
Ditta individuale fondata nel 1974
P.IVA: 02273530226
Codice Fiscale: BTTPLG74M15F205X

**Sede Legale e Operativa:**
Via Alcide de Gasperi, 47
38017 Mezzolombardo (TN) - Italia

**Contatti:**
Tel: +39 0461 602534
Mobile: +39 351 577 6198
Email: bottamedipierluigi@virgilio.it

**Attività:** Commercio all'ingrosso e al dettaglio di prodotti ortofrutticoli freschi`,
              icon: '🏪'
            },
            {
              title: '2. Servizi Offerti',
              content: `**Vendita al Dettaglio:**
• Banchetto frutta e verdura fresca
• Via Cavalleggeri Udine, Mezzolombardo
• Orari: Lunedì-Sabato 07:00-19:30
• Oltre 150 varietà stagionali

**Servizio Ingrosso HORECA:**
• Fornitura ristoranti, hotel, pizzerie
• Consegne programmate 6 giorni/settimana
• Listini dedicati per professionisti
• Consulenza personalizzata

**Servizi Aggiuntivi:**
• Consulenza per selezione prodotti
• Preventivi personalizzati
• Supporto per menu stagionali`,
              icon: '🛒'
            },
            {
              title: '3. Modalità di Ordinazione',
              content: `**Per Clienti Dettaglio:**
• Acquisto diretto presso il banchetto
• Pagamento: contanti, carte di credito/debito
• Consigli personalizzati dal nostro staff

**Per Clienti HORECA:**
• Ordini via telefono: +39 0461 602534
• Ordini via email: bottamedipierluigi@virgilio.it
• Ordini via WhatsApp: +39 351 577 6198
• Conferma sempre richiesta prima della preparazione

**Tempi di Preparazione:**
• Ordini entro le 16:00 per consegna giorno successivo
• Ordini urgenti da concordare telefonicamente`,
              icon: '📱'
            },
            {
              title: '4. Disponibilità e Prezzi',
              content: `**Disponibilità Prodotti:**
• Soggetta a stagionalità naturale
• Dipendente dalle condizioni meteorologiche
• Limitata dalle quantità di mercato
• Selezione quotidiana alle prime ore

**Politica Prezzi:**
• Prezzi variabili secondo mercato ortofrutticolo
• Listini HORECA personalizzati su richiesta
• Prezzi validi salvo errori ed omissioni
• Eventuali variazioni comunicate preventivamente

**Promozioni e Sconti:**
• Sconti quantità per clienti HORECA
• Promozioni stagionali
• Condizioni speciali per clienti fidelizzati`,
              icon: '💰'
            },
            {
              title: '5. Consegne e Trasporto',
              content: `**Area di Consegna:**
• Trentino Alto Adige (zona prioritaria)
• Veneto settentrionale (su richiesta)
• Zone limitrofe da concordare

**Modalità di Consegna:**
• Mezzi refrigerati per mantenere freschezza
• Orari da concordare con il cliente
• Consegne dal lunedì al sabato
• Servizio di emergenza su richiesta

**Responsabilità Trasporto:**
• Merce viaggia a rischio dell'acquirente
• Verifiche obbligatorie alla consegna
• Reclami da comunicare immediatamente
• Trasporto assicurato per grandi forniture`,
              icon: '🚚'
            },
            {
              title: '6. Qualità e Garanzie',
              content: `**Standard di Qualità:**
• Selezione manuale quotidiana
• Controllo temperatura dalla raccolta alla vendita
• Rotazione prodotti per massima freschezza
• 50 anni di esperienza nel settore

**Garanzie Offerte:**
• Qualità garantita al momento della consegna
• Sostituzione prodotti non conformi
• Supporto post-vendita per clienti HORECA

**Limitazioni:**
• Deperibilità naturale esclusa da garanzia
• Conservazione prodotti a carico dell'acquirente
• Consumo entro tempi naturali consigliati`,
              icon: '✅'
            },
            {
              title: '7. Pagamenti e Fatturazione',
              content: `**Modalità di Pagamento:**

**Clienti Dettaglio:**
• Contanti
• Carte di credito/debito
• Buoni pasto (dove accettati)

**Clienti HORECA:**
• Bonifico bancario
• Rimessa diretta
• Condizioni di pagamento da concordare
• Fatturazione elettronica disponibile

**Termini di Pagamento:**
• Dettaglio: pagamento immediato
• HORECA: termini concordati (standard 30 giorni)
• Interessi di mora su ritardi oltre 60 giorni`,
              icon: '💳'
            },
            {
              title: '8. Responsabilità e Limitazioni',
              content: `**Nostra Responsabilità:**
• Limitata al valore della merce fornita
• Esclusione danni indiretti o conseguenti
• Massimale assicurativo per grandi forniture

**Responsabilità del Cliente:**
• Conservazione adeguata dei prodotti
• Verifica merce alla consegna
• Comunicazione tempestiva di problemi
• Rispetto delle modalità di pagamento

**Cause di Forza Maggiore:**
• Condizioni meteorologiche avverse
• Problemi di approvvigionamento di mercato
• Scioperi e problemi logistici
• Emergenze sanitarie o normative`,
              icon: '⚠️'
            },
            {
              title: '9. Risoluzione Controversie',
              content: `**Procedura di Risoluzione:**

**1° Livello - Conciliazione Diretta:**
• Contatto diretto con Pierluigi Bottamedi
• Tentativo di risoluzione amichevole
• Proposta di soluzioni alternative

**2° Livello - Mediazione:**
• Camera di Commercio di Trento
• Procedura di mediazione civile
• Soluzione alternativa alla causa

**3° Livello - Foro Competente:**
• Tribunale di Trento
• Applicazione legge italiana
• Esclusione di altri fori

**Contatti per Controversie:**
Email: bottamedipierluigi@virgilio.it
Tel: +39 0461 602534`,
              icon: '⚖️'
            }
          ]
        },
        cookies: {
          title: 'Cookie Policy',
          lastUpdated: 'Dicembre 2024',
          readTime: '2-3 min',
          summary: 'Informazioni dettagliate sui cookie utilizzati sul nostro sito web e come gestirli.',
          sections: [
            {
              title: '1. Cosa Sono i Cookie',
              content: `**Definizione:**
I cookie sono piccoli file di testo che vengono memorizzati sul tuo dispositivo (computer, tablet, smartphone) quando visiti un sito web.

**Funzioni dei Cookie:**
• Memorizzare le tue preferenze
• Riconoscerti nelle visite successive
• Migliorare l'esperienza di navigazione
• Raccogliere statistiche anonime

**Tipologie:**
• **Cookie di sessione:** cancellati alla chiusura del browser
• **Cookie persistenti:** rimangono fino alla scadenza
• **Cookie di prima parte:** nostri
• **Cookie di terze parti:** di altri servizi che utilizziamo`,
              icon: '🍪'
            },
            {
              title: '2. Cookie Tecnici (Sempre Attivi)',
              content: `Questi cookie sono necessari per il funzionamento del sito e non possono essere disattivati.

**Cookie di Navigazione:**
• Gestione sessione utente
• Funzionalità del carrello (se presente)
• Memorizzazione temporanea dati form

**Cookie di Sicurezza:**
• Protezione contro attacchi CSRF
• Autenticazione sicura
• Prevenzione spam nei moduli contatti

**Cookie Funzionali:**
• Lingua selezionata (IT/DE)
• Preferenze di visualizzazione
• Stato mobile dock
• Consensi cookie memorizzati

**Durata:** Sessione di navigazione o fino a 30 giorni per le preferenze`,
              icon: '⚙️'
            },
            {
              title: '3. Cookie Analytics',
              content: `**Google Analytics 4 (GA4):**
Utilizziamo Google Analytics per capire come i visitatori utilizzano il nostro sito.

**Dati Raccolti (Anonimi):**
• Pagine visitate e tempo di permanenza
• Dispositivo e browser utilizzato
• Paese e città di provenienza
• Percorsi di navigazione

**Finalità:**
• Migliorare l'esperienza utente
• Ottimizzare i contenuti
• Identificare problemi tecnici
• Statistiche di utilizzo

**Durata:** 26 mesi
**Privacy:** Dati aggregati e anonimi
**Opt-out:** tools.google.com/dlpage/gaoptout`,
              icon: '📊'
            },
            {
              title: '4. Cookie di Terze Parti',
              content: `**Google Maps:**
• Per visualizzare le mappe dei nostri punti vendita
• Cookie: maps.googleapis.com
• Privacy: policies.google.com/privacy

**Google Fonts:**
• Per caricare i caratteri tipografici del sito
• Migliora la leggibilità e l'estetica
• Privacy: policies.google.com/privacy

**Social Media (se presenti):**
• Bottoni di condivisione Facebook/Instagram
• Cookie solo se interagisci con i bottoni
• Privacy: normative dei rispettivi social

**Nessun Cookie Pubblicitario:**
Non utilizziamo cookie per pubblicità o profilazione.`,
              icon: '🌐'
            },
            {
              title: '5. Gestione Cookie nel Browser',
              content: `**Google Chrome:**
1. Menu (⋮) → Impostazioni
2. Privacy e sicurezza → Cookie
3. Gestisci eccezioni o blocca tutti

**Mozilla Firefox:**
1. Menu (☰) → Impostazioni
2. Privacy e sicurezza
3. Cookie e dati dei siti web

**Safari (Mac/iPhone):**
1. Preferenze → Privacy
2. Gestisci dati siti web
3. Blocca tutti i cookie

**Microsoft Edge:**
1. Menu (⋯) → Impostazioni
2. Privacy, ricerca e servizi
3. Cookie e autorizzazioni sito

**Conseguenze della Disattivazione:**
Disattivando i cookie tecnici, alcune funzionalità potrebbero non funzionare correttamente.`,
              icon: '🔧'
            },
            {
              title: '6. I Tuoi Diritti sui Cookie',
              content: `**Diritto all'Informazione:**
Hai il diritto di essere informato sui cookie che utilizziamo (questo documento).

**Diritto di Scelta:**
Puoi accettare o rifiutare i cookie non essenziali tramite le impostazioni del browser.

**Diritto di Accesso:**
Puoi verificare quali cookie sono attivi ispezionando il tuo browser.

**Diritto alla Cancellazione:**
Puoi cancellare tutti i cookie dalle impostazioni del browser.

**Modifiche alla Policy:**
Ti informeremo di eventuali modifiche importanti a questa policy.

**Contatti:**
Per domande sui cookie: bottamedipierluigi@virgilio.it`,
              icon: '🛡️'
            }
          ]
        }
      }
    },
    de: {
      // Versione tedesca simile ma adattata...
      title: 'Rechtsdokumente',
      subtitle: 'Rechtliche Informationen und Bestimmungen',
      description: 'Konsultieren Sie alle rechtlichen Dokumente zu unserer Website und unseren Dienstleistungen.',
      tabs: {
        privacy: 'Datenschutzerklärung',
        terms: 'Nutzungsbedingungen', 
        cookies: 'Cookie-Richtlinie'
      },
      lastUpdated: 'Zuletzt aktualisiert',
      close: 'Bereich schließen',
      backToFooter: 'Zurück zum Footer',
      readTime: 'Lesezeit',
      expandAll: 'Alle erweitern',
      collapseAll: 'Alle schließen',
      contact: 'Für Fragen',
      documents: {
        privacy: {
          title: 'Datenschutzerklärung',
          lastUpdated: 'Dezember 2024',
          readTime: '3-4 Min.',
          summary: 'Vollständige Informationen darüber, wie wir Ihre persönlichen Daten gemäß DSGVO sammeln, verwenden und schützen.',
          sections: [
            {
              title: '1. Verantwortlicher',
              content: `**Bottamedi Pierluigi**
MwSt-Nr.: 02273530226
Via Alcide de Gasperi, 47
38017 Mezzolombardo (TN), Italien
Tel: +39 0461 602534
Email: bottamedipierluigi@virgilio.it

Wir sind für die Verarbeitung Ihrer persönlichen Daten verantwortlich und verpflichten uns, diese nach geltendem Recht zu schützen.`,
              icon: '🏢'
            }
            // ... altre sezioni tedesche
          ]
        }
        // ... altri documenti tedeschi
      }
    }
  }

  const t = translations[language]

  // Listen for unlock events from footer
  useEffect(() => {
    const handleUnlockEvent = (event: CustomEvent) => {
      const { docType, language: eventLang } = event.detail
      if (eventLang === language) {
        setIsUnlocked(true)
        setSelectedCategory(docType)
        
        // Scroll to legal section
        setTimeout(() => {
          const element = document.getElementById('legal-documents')
          if (element) {
            element.scrollIntoView({ behavior: 'smooth' })
          }
        }, 200)
      }
    }

    window.addEventListener('openLegalDocument', handleUnlockEvent as EventListener)
    return () => window.removeEventListener('openLegalDocument', handleUnlockEvent as EventListener)
  }, [language])

  const handleLockSection = () => {
    setIsUnlocked(false)
    setActiveDoc(null)
    
    // Scroll back to footer
    setTimeout(() => {
      const footer = document.querySelector('footer')
      if (footer) {
        footer.scrollIntoView({ behavior: 'smooth' })
      }
    }, 300)
  }

  const handleDocClick = (docId: string) => {
    setActiveDoc(activeDoc === docId ? null : docId)
  }

  const toggleAllSections = (expand: boolean) => {
    if (expand) {
      // Espandi tutte le sezioni del documento corrente
      const sections = t.documents[selectedCategory as keyof typeof t.documents].sections
      const allIds = sections.map((_, index) => `${selectedCategory}-${index}`)
      setActiveDoc(allIds[0]) // Imposta il primo come riferimento
      // In una implementazione reale, useresti un array per multiple sezioni aperte
    } else {
      setActiveDoc(null)
    }
  }

  // Se non è sbloccato, non renderizzare nulla
  if (!isUnlocked) {
    return <div id="legal-documents" className="hidden" />
  }

  const currentDoc = t.documents[selectedCategory as keyof typeof t.documents]

  return (
    <motion.section
      id="legal-documents"
      initial={{ opacity: 0, height: 0 }}
      animate={{ opacity: 1, height: 'auto' }}
      exit={{ opacity: 0, height: 0 }}
      transition={{ duration: 0.5, ease: 'easeInOut' }}
      className="bg-gradient-to-br from-neutral-900 via-neutral-800 to-neutral-900 text-white py-12 lg:py-20"
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        
        {/* Header migliorato con unlock indicator */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8 lg:mb-12"
        >
          <div className="inline-flex items-center space-x-2 bg-green-500/20 text-green-400 px-4 py-2 rounded-full text-sm font-medium mb-6">
            <motion.span
              animate={{ rotate: [0, 15, -15, 0] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              🔓
            </motion.span>
            <span>Sezione Sbloccata</span>
          </div>
          
          <h2 className="text-3xl lg:text-5xl font-bold mb-4">
            <span className="bg-gradient-to-r from-white via-green-200 to-green-400 bg-clip-text text-transparent">
              {t.title}
            </span>
          </h2>
          <p className="text-white/80 text-lg max-w-3xl mx-auto mb-6 leading-relaxed">
            {t.description}
          </p>
          
          {/* Close button prominente */}
          <motion.button
            onClick={handleLockSection}
            whileHover={{ scale: 1.05, y: -2 }}
            whileTap={{ scale: 0.95 }}
            className="inline-flex items-center space-x-2 bg-white/10 hover:bg-white/20 px-6 py-3 rounded-xl transition-all duration-300 border border-white/20 backdrop-blur-sm"
          >
            <span className="text-xl">×</span>
            <span className="font-medium">{t.close}</span>
          </motion.button>
        </motion.div>

        {/* Tabs migliorati con design mobile-first */}
        <div className="flex justify-center mb-8">
          <div className="bg-white/5 rounded-2xl p-2 backdrop-blur-sm border border-white/10 w-full max-w-2xl">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
              {Object.entries(t.tabs).map(([docType, label]) => (
                <motion.button
                  key={docType}
                  onClick={() => setSelectedCategory(docType)}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className={`px-4 py-3 rounded-xl font-medium transition-all duration-300 text-center ${
                    selectedCategory === docType
                      ? 'bg-white text-gray-900 shadow-lg'
                      : 'text-white/70 hover:text-white hover:bg-white/10'
                  }`}
                >
                  <div className="text-sm lg:text-base">{label}</div>
                </motion.button>
              ))}
            </div>
          </div>
        </div>

        {/* Document info card migliorata */}
        <AnimatePresence mode="wait">
          <motion.div
            key={selectedCategory}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="max-w-5xl mx-auto"
          >
            {/* Info card del documento */}
            <div className="bg-gradient-to-br from-white/10 to-white/5 rounded-2xl p-6 lg:p-8 mb-8 border border-white/10 backdrop-blur-sm">
              <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-4">
                <div className="flex-1">
                  <h3 className="text-2xl lg:text-3xl font-bold text-white mb-2">
                    {currentDoc.title}
                  </h3>
                  <div className="flex flex-wrap items-center gap-4 text-sm text-white/60">
                    <span className="flex items-center space-x-1">
                      <span>🕒</span>
                      <span>{t.readTime}: {currentDoc.readTime}</span>
                    </span>
                    <span className="flex items-center space-x-1">
                      <span>📅</span>
                      <span>{t.lastUpdated}: {currentDoc.lastUpdated}</span>
                    </span>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  <div className="bg-green-500/20 text-green-400 px-3 py-1 rounded-full text-xs font-medium">
                    Aggiornato
                  </div>
                  <div className="hidden lg:flex space-x-2">
                    <button
                      onClick={() => toggleAllSections(true)}
                      className="text-xs text-white/60 hover:text-white transition-colors px-2 py-1 rounded border border-white/20 hover:border-white/40"
                    >
                      {t.expandAll}
                    </button>
                    <button
                      onClick={() => toggleAllSections(false)}
                      className="text-xs text-white/60 hover:text-white transition-colors px-2 py-1 rounded border border-white/20 hover:border-white/40"
                    >
                      {t.collapseAll}
                    </button>
                  </div>
                </div>
              </div>
              
              <p className="text-white/80 leading-relaxed text-base lg:text-lg">
                {currentDoc.summary}
              </p>
            </div>

            {/* Sezioni espandibili - OTTIMIZZATE PER MOBILE */}
            <div className="space-y-3 lg:space-y-4">
              {currentDoc.sections.map((section, index) => {
                const sectionId = `${selectedCategory}-${index}`
                const isOpen = activeDoc === sectionId
                
                return (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="bg-gradient-to-br from-white/8 to-white/4 rounded-xl lg:rounded-2xl border border-white/10 overflow-hidden backdrop-blur-sm hover:border-white/20 transition-all duration-300"
                  >
                    <motion.button
                      onClick={() => handleDocClick(sectionId)}
                      whileHover={{ backgroundColor: 'rgba(255,255,255,0.05)' }}
                      className="w-full p-4 lg:p-6 text-left transition-colors duration-200"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3 lg:space-x-4 flex-1 min-w-0">
                          <div className="text-2xl lg:text-3xl flex-shrink-0">
                            {section.icon}
                          </div>
                          <h4 className="text-base lg:text-lg font-semibold text-white leading-tight break-words">
                            {section.title}
                          </h4>
                        </div>
                        <motion.div
                          animate={{ rotate: isOpen ? 180 : 0 }}
                          transition={{ duration: 0.2 }}
                          className="text-white/60 flex-shrink-0 ml-2"
                        >
                          <svg className="w-5 h-5 lg:w-6 lg:h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </motion.div>
                      </div>
                    </motion.button>
                    
                    <AnimatePresence>
                      {isOpen && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: 'auto', opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          transition={{ duration: 0.3, ease: 'easeInOut' }}
                          className="overflow-hidden"
                        >
                          <div className="px-4 lg:px-6 pb-4 lg:pb-6">
                            <div className="pt-4 border-t border-white/10">
                              <div className="prose prose-invert prose-sm lg:prose-base max-w-none">
                                <div 
                                  className="text-white/90 leading-relaxed space-y-4 text-sm lg:text-base"
                                  style={{
                                    lineHeight: '1.7',
                                    wordBreak: 'break-word'
                                  }}
                                >
                                  {section.content.split('\n\n').map((paragraph, pIndex) => {
                                    // Gestione titoli in grassetto
                                    if (paragraph.startsWith('**') && paragraph.endsWith('**') && paragraph.length < 100) {
                                      return (
                                        <h5 key={pIndex} className="text-white font-bold text-base lg:text-lg mt-6 mb-3 first:mt-0">
                                          {paragraph.replace(/\*\*/g, '')}
                                        </h5>
                                      )
                                    }
                                    
                                    // Gestione liste puntate
                                    if (paragraph.includes('•') || paragraph.includes('📋') || paragraph.includes('✏️')) {
                                      const lines = paragraph.split('\n')
                                      return (
                                        <div key={pIndex} className="space-y-2">
                                          {lines.map((line, lIndex) => {
                                            if (line.trim().startsWith('•') || line.includes('📋') || line.includes('✏️') || line.includes('🗑️') || line.includes('🔒') || line.includes('📦') || line.includes('🚫')) {
                                              return (
                                                <div key={lIndex} className="flex items-start space-x-3 py-1">
                                                  <span className="flex-shrink-0 text-green-400 mt-1">
                                                    {line.includes('📋') ? '📋' : 
                                                     line.includes('✏️') ? '✏️' : 
                                                     line.includes('🗑️') ? '🗑️' :
                                                     line.includes('🔒') ? '🔒' :
                                                     line.includes('📦') ? '📦' :
                                                     line.includes('🚫') ? '🚫' : '•'}
                                                  </span>
                                                  <span className="flex-1 text-white/90 break-words">
                                                    {line.replace(/^•\s*/, '').replace(/📋|✏️|🗑️|🔒|📦|🚫/g, '').trim()}
                                                  </span>
                                                </div>
                                              )
                                            }
                                            return (
                                              <p key={lIndex} className="text-white/90 break-words">
                                                {line}
                                              </p>
                                            )
                                          })}
                                        </div>
                                      )
                                    }
                                    
                                    // Gestione paragrafi normali
                                    return (
                                      <p key={pIndex} className="text-white/90 break-words leading-relaxed">
                                        {paragraph.split('**').map((part, partIndex) => 
                                          partIndex % 2 === 1 ? (
                                            <strong key={partIndex} className="text-white font-semibold">
                                              {part}
                                            </strong>
                                          ) : (
                                            <span key={partIndex}>{part}</span>
                                          )
                                        )}
                                      </p>
                                    )
                                  })}
                                </div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </motion.div>
                )
              })}
            </div>

            {/* Footer della sezione migliorato */}
            <div className="mt-8 lg:mt-12 pt-6 lg:pt-8 border-t border-white/20">
              <div className="text-center space-y-4">
                <div className="bg-white/5 rounded-xl p-4 lg:p-6 border border-white/10">
                  <p className="text-white/80 text-sm lg:text-base mb-2">
                    <span className="font-semibold">{t.contact}:</span>
                  </p>
                  <div className="flex flex-col sm:flex-row items-center justify-center space-y-2 sm:space-y-0 sm:space-x-6 text-sm">
                    <a 
                      href="mailto:bottamedipierluigi@virgilio.it"
                      className="flex items-center space-x-2 text-green-400 hover:text-green-300 transition-colors"
                    >
                      <span>📧</span>
                      <span>bottamedipierluigi@virgilio.it</span>
                    </a>
                    <a 
                      href="tel:+390461602534"
                      className="flex items-center space-x-2 text-green-400 hover:text-green-300 transition-colors"
                    >
                      <span>📞</span>
                      <span>+39 0461 602534</span>
                    </a>
                  </div>
                </div>
                
                <motion.button
                  onClick={handleLockSection}
                  whileHover={{ scale: 1.05, y: -2 }}
                  whileTap={{ scale: 0.95 }}
                  className="inline-flex items-center space-x-2 text-white/60 hover:text-white transition-colors bg-white/5 hover:bg-white/10 px-4 py-2 rounded-lg"
                >
                  <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                  </svg>
                  <span className="text-sm">{t.backToFooter}</span>
                </motion.button>
              </div>
            </div>
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.section>
  )
}

export default LegalDocuments


--- FILE: src/components/legal/PrivacySettings.tsx ---
import React, { useState, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

// Declare gtag function for TypeScript
declare global {
  interface Window {
    gtag: (...args: any[]) => void;
  }
}

interface PrivacySettingsProps {
  language: 'it' | 'de'
  className?: string
}

const PrivacySettings: React.FC<PrivacySettingsProps> = ({ language, className = '' }) => {
  const [showModal, setShowModal] = useState(false)
  const [currentConsent, setCurrentConsent] = useState<any>(null)

  const translations = {
    it: {
      manage: 'Gestisci Cookie',
      reset: 'Reimposta Preferenze',
      modalTitle: 'Impostazioni Privacy e Cookie',
      modalDescription: 'Gestisci le tue preferenze sui cookie e la privacy',
      currentSettings: 'Impostazioni Attuali:',
      analytics: 'Cookie Analytics',
      marketing: 'Cookie Marketing',
      necessary: 'Cookie Tecnici',
      enabled: 'Abilitati',
      disabled: 'Disabilitati',
      always: 'Sempre attivi',
      lastUpdated: 'Ultimo aggiornamento:',
      resetConfirm: 'Vuoi reimpostare tutte le preferenze sui cookie?',
      resetWarning: 'Questo mostrerà di nuovo il banner dei cookie.',
      resetAction: 'Reimposta',
      cancel: 'Annulla',
      close: 'Chiudi',
      viewDocuments: 'Visualizza Documenti Legali'
    },
    de: {
      manage: 'Cookies Verwalten',
      reset: 'Einstellungen Zurücksetzen',
      modalTitle: 'Datenschutz- und Cookie-Einstellungen',
      modalDescription: 'Verwalten Sie Ihre Cookie- und Datenschutzeinstellungen',
      currentSettings: 'Aktuelle Einstellungen:',
      analytics: 'Analytics-Cookies',
      marketing: 'Marketing-Cookies',
      necessary: 'Technische Cookies',
      enabled: 'Aktiviert',
      disabled: 'Deaktiviert',
      always: 'Immer aktiv',
      lastUpdated: 'Letzte Aktualisierung:',
      resetConfirm: 'Möchten Sie alle Cookie-Einstellungen zurücksetzen?',
      resetWarning: 'Dies wird das Cookie-Banner erneut anzeigen.',
      resetAction: 'Zurücksetzen',
      cancel: 'Abbrechen',
      close: 'Schließen',
      viewDocuments: 'Rechtsdokumente Anzeigen'
    }
  }

  const t = translations[language]

  React.useEffect(() => {
    const consent = localStorage.getItem('bottamedi-cookie-consent')
    if (consent) {
      try {
        setCurrentConsent(JSON.parse(consent))
      } catch (e) {
        console.warn('Invalid cookie consent data')
      }
    }
  }, [])

  const openCookieSettings = useCallback(() => {
    // Tracciamento apertura impostazioni cookie
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'cookie_settings_open', {
        event_category: 'privacy',
        event_label: 'footer_link'
      })
    }
    
    setShowModal(true)
  }, [])

  const resetCookieSettings = useCallback(() => {
    // Tracciamento reset impostazioni
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'cookie_settings_reset', {
        event_category: 'privacy',
        event_label: 'user_action'
      })
    }
    
    // Reset cookie consent to show banner again
    localStorage.removeItem('bottamedi-cookie-consent')
    setShowModal(false)
    
    // Reload to show banner
    setTimeout(() => {
      window.location.reload()
    }, 500)
  }, [])

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString(language === 'it' ? 'it-IT' : 'de-DE', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const scrollToLegalDocs = useCallback(() => {
    // Track legal docs navigation
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'legal_docs_navigation', {
        event_category: 'privacy',
        event_label: 'from_privacy_settings'
      })
    }
    
    // Scroll to legal documents (assumes they're at the bottom of the page)
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior: 'smooth'
    })
    
    setShowModal(false)
  }, [])

  return (
    <>
      <div className={`flex flex-col sm:flex-row gap-2 text-sm ${className}`}>
        <button
          onClick={openCookieSettings}
          className="text-gray-400 hover:text-gray-600 transition-colors underline flex items-center space-x-1"
        >
          <span>🍪</span>
          <span>{t.manage}</span>
        </button>
        
        <span className="hidden sm:inline text-gray-400">•</span>
        
        <button
          onClick={scrollToLegalDocs}
          className="text-gray-400 hover:text-gray-600 transition-colors underline flex items-center space-x-1"
        >
          <span>📄</span>
          <span>{t.viewDocuments}</span>
        </button>
      </div>

      {/* Privacy Settings Modal */}
      <AnimatePresence>
        {showModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setShowModal(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              transition={{ duration: 0.2 }}
              className="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-6">
                {/* Header */}
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-bold text-gray-900">{t.modalTitle}</h3>
                  <button
                    onClick={() => setShowModal(false)}
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <p className="text-gray-600 mb-6 text-sm">{t.modalDescription}</p>

                {/* Current Settings */}
                {currentConsent && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-gray-900 mb-3">{t.currentSettings}</h4>
                    
                    <div className="space-y-3">
                      <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">🔧</span>
                          <span className="text-sm font-medium">{t.necessary}</span>
                        </div>
                        <span className="text-xs px-2 py-1 bg-green-100 text-green-700 rounded-full">
                          {t.always}
                        </span>
                      </div>

                      <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">📊</span>
                          <span className="text-sm font-medium">{t.analytics}</span>
                        </div>
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          currentConsent.analytics 
                            ? 'bg-green-100 text-green-700' 
                            : 'bg-red-100 text-red-700'
                        }`}>
                          {currentConsent.analytics ? t.enabled : t.disabled}
                        </span>
                      </div>

                      <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">🎯</span>
                          <span className="text-sm font-medium">{t.marketing}</span>
                        </div>
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          currentConsent.marketing 
                            ? 'bg-green-100 text-green-700' 
                            : 'bg-red-100 text-red-700'
                        }`}>
                          {currentConsent.marketing ? t.enabled : t.disabled}
                        </span>
                      </div>
                    </div>

                    {currentConsent.timestamp && (
                      <p className="text-xs text-gray-500 mt-3">
                        {t.lastUpdated} {formatDate(currentConsent.timestamp)}
                      </p>
                    )}
                  </div>
                )}

                {/* Actions */}
                <div className="space-y-3">
                  <button
                    onClick={resetCookieSettings}
                    className="w-full py-3 px-4 bg-orange-500 hover:bg-orange-600 text-white rounded-lg font-medium transition-colors flex items-center justify-center space-x-2"
                  >
                    <span>🔄</span>
                    <span>{t.reset}</span>
                  </button>

                  <div className="text-xs text-gray-500 text-center">
                    {t.resetWarning}
                  </div>

                  <button
                    onClick={scrollToLegalDocs}
                    className="w-full py-2 px-4 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors flex items-center justify-center space-x-2"
                  >
                    <span>📄</span>
                    <span>{t.viewDocuments}</span>
                  </button>

                  <button
                    onClick={() => setShowModal(false)}
                    className="w-full py-2 px-4 text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    {t.close}
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

export default React.memo(PrivacySettings)

--- FILE: src/components/legal/index.ts ---
// Export all legal components
export { default as CookieBanner } from './CookieBanner'
export { default as LegalDocuments } from './LegalDocuments' 
export { default as PrivacySettings } from './PrivacySettings'

// Export types if needed
export interface CookieConsent {
  necessary: boolean
  analytics: boolean
  marketing: boolean
  timestamp: number
}

export interface LegalComponentProps {
  language: 'it' | 'de'
}

// Utility functions for cookie management
export const getCookieConsent = (): CookieConsent | null => {
  try {
    const consent = localStorage.getItem('bottamedi-cookie-consent')
    return consent ? JSON.parse(consent) : null
  } catch (e) {
    console.warn('Invalid cookie consent data')
    return null
  }
}

export const setCookieConsent = (consent: CookieConsent): void => {
  localStorage.setItem('bottamedi-cookie-consent', JSON.stringify(consent))
}

export const resetCookieConsent = (): void => {
  localStorage.removeItem('bottamedi-cookie-consent')
}

export const hasValidConsent = (): boolean => {
  const consent = getCookieConsent()
  if (!consent) return false
  
  // Check if consent is older than 13 months (GDPR requirement)
  const thirteenMonthsAgo = Date.now() - (13 * 30 * 24 * 60 * 60 * 1000)
  return consent.timestamp > thirteenMonthsAgo
}

--- FILE: src/components/assets/icons/index.ts ---
[File vuoto o solo spazi bianchi]

--- FILE: src/components/assets/fonts/clash-display.woff2 ---
[File vuoto o solo spazi bianchi]

--- FILE: src/hooks/useIntersectionObserver.ts ---
import { useEffect, useRef, useState } from 'react'
import type { UseIntersectionObserverOptions, UseIntersectionObserverReturn } from '../types'

export const useIntersectionObserver = (
  options: UseIntersectionObserverOptions = {}
): UseIntersectionObserverReturn => {
  const {
    threshold = 0.1,
    root = null,
    rootMargin = '0px',
    triggerOnce = false
  } = options

  const [inView, setInView] = useState(false)
  const [entry, setEntry] = useState<IntersectionObserverEntry>()
  const ref = useRef<Element>(null)

  useEffect(() => {
    const element = ref.current
    if (!element) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        const isIntersecting = entry.isIntersecting
        
        setInView(isIntersecting)
        setEntry(entry)

        // If triggerOnce is true and element is in view, disconnect observer
        if (triggerOnce && isIntersecting) {
          observer.disconnect()
        }
      },
      {
        threshold,
        root,
        rootMargin
      }
    )

    observer.observe(element)

    return () => {
      observer.disconnect()
    }
  }, [threshold, root, rootMargin, triggerOnce])

  return { ref, inView, entry }
}

// Advanced hook with multiple thresholds
export const useIntersectionObserverAdvanced = (
  thresholds: number[] = [0, 0.25, 0.5, 0.75, 1],
  options: Omit<UseIntersectionObserverOptions, 'threshold'> = {}
) => {
  const { root = null, rootMargin = '0px', triggerOnce = false } = options
  
  const [intersectionRatio, setIntersectionRatio] = useState(0)
  const [isIntersecting, setIsIntersecting] = useState(false)
  const [entry, setEntry] = useState<IntersectionObserverEntry>()
  const ref = useRef<Element>(null)

  useEffect(() => {
    const element = ref.current
    if (!element) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        setIntersectionRatio(entry.intersectionRatio)
        setIsIntersecting(entry.isIntersecting)
        setEntry(entry)

        if (triggerOnce && entry.isIntersecting) {
          observer.disconnect()
        }
      },
      {
        threshold: thresholds,
        root,
        rootMargin
      }
    )

    observer.observe(element)

    return () => {
      observer.disconnect()
    }
  }, [thresholds, root, rootMargin, triggerOnce])

  return {
    ref,
    intersectionRatio,
    isIntersecting,
    entry,
    isPartiallyVisible: intersectionRatio > 0,
    isFullyVisible: intersectionRatio === 1
  }
}

// Hook for lazy loading images
export const useLazyImage = (src: string, placeholder?: string) => {
  const [imageSrc, setImageSrc] = useState(placeholder || '')
  const [isLoaded, setIsLoaded] = useState(false)
  const [isError, setIsError] = useState(false)
  const { ref, inView } = useIntersectionObserver({ triggerOnce: true })

  useEffect(() => {
    if (inView && src) {
      const img = new Image()
      
      img.onload = () => {
        setImageSrc(src)
        setIsLoaded(true)
      }
      
      img.onerror = () => {
        setIsError(true)
      }
      
      img.src = src
    }
  }, [inView, src])

  return {
    ref,
    src: imageSrc,
    isLoaded,
    isError,
    inView
  }
}

// Hook for animating elements on scroll
export const useScrollAnimation = (
  options: UseIntersectionObserverOptions & {
    animationClass?: string
    delay?: number
  } = {}
) => {
  const { animationClass = 'animate-in', delay = 0, ...observerOptions } = options
  const [hasAnimated, setHasAnimated] = useState(false)
  const { ref, inView } = useIntersectionObserver({
    ...observerOptions,
    triggerOnce: true
  })

  useEffect(() => {
    if (inView && !hasAnimated) {
      const timer = setTimeout(() => {
        setHasAnimated(true)
      }, delay)

      return () => clearTimeout(timer)
    }
  }, [inView, hasAnimated, delay])

  return {
    ref,
    shouldAnimate: hasAnimated,
    inView,
    animationClass: hasAnimated ? animationClass : ''
  }
}

// Hook for progressive loading content
export const useProgressiveContent = <T>(
  content: T[],
  options: UseIntersectionObserverOptions & {
    itemsPerLoad?: number
    loadDelay?: number
  } = {}
) => {
  const { itemsPerLoad = 5, loadDelay = 0, ...observerOptions } = options
  const [visibleItems, setVisibleItems] = useState<T[]>(content.slice(0, itemsPerLoad))
  const [isLoadingMore, setIsLoadingMore] = useState(false)
  const { ref, inView } = useIntersectionObserver(observerOptions)

  const hasMore = visibleItems.length < content.length

  useEffect(() => {
    if (inView && hasMore && !isLoadingMore) {
      setIsLoadingMore(true)
      
      const timer = setTimeout(() => {
        const nextItems = content.slice(
          visibleItems.length,
          visibleItems.length + itemsPerLoad
        )
        setVisibleItems(prev => [...prev, ...nextItems])
        setIsLoadingMore(false)
      }, loadDelay)

      return () => clearTimeout(timer)
    }
  }, [inView, hasMore, isLoadingMore, content, visibleItems.length, itemsPerLoad, loadDelay])

  return {
    ref,
    visibleItems,
    hasMore,
    isLoadingMore,
    loadedCount: visibleItems.length,
    totalCount: content.length
  }
}

// Hook for section navigation highlighting
export const useSectionObserver = (sectionIds: string[]) => {
  const [activeSection, setActiveSection] = useState<string>('')
  
  useEffect(() => {
    const observers = sectionIds.map(id => {
      const element = document.getElementById(id)
      if (!element) return null

      const observer = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            setActiveSection(id)
          }
        },
        {
          threshold: 0.3,
          rootMargin: '-20% 0px -70% 0px'
        }
      )

      observer.observe(element)
      return observer
    }).filter(Boolean)

    return () => {
      observers.forEach(observer => observer?.disconnect())
    }
  }, [sectionIds])

  return activeSection
}

// Hook for parallax effects
export const useParallax = (speed: number = 0.5) => {
  const [offset, setOffset] = useState(0)
  const { ref, inView } = useIntersectionObserver()

  useEffect(() => {
    if (!inView) return

    const handleScroll = () => {
      const element = ref.current
      if (!element) return

      const rect = element.getBoundingClientRect()
      const scrolled = window.pageYOffset
      const rate = scrolled * -speed
      
      setOffset(rate)
    }

    window.addEventListener('scroll', handleScroll, { passive: true })
    return () => window.removeEventListener('scroll', handleScroll)
  }, [inView, speed])

  return {
    ref,
    offset,
    style: {
      transform: `translateY(${offset}px)`
    }
  }
}

// Hook for counting animations
export const useCountUp = (
  endValue: number,
  options: {
    startValue?: number
    duration?: number
    easing?: 'linear' | 'easeOut' | 'easeInOut'
    formatNumber?: (value: number) => string
    triggerOnce?: boolean
  } = {}
) => {
  const {
    startValue = 0,
    duration = 2000,
    easing = 'easeOut',
    formatNumber = (v) => Math.round(v).toString(),
    triggerOnce = true
  } = options

  const [count, setCount] = useState(startValue)
  const { ref, inView } = useIntersectionObserver({ triggerOnce })

  useEffect(() => {
    if (!inView) return

    const startTime = Date.now()
    const difference = endValue - startValue

    const easingFunctions = {
      linear: (t: number) => t,
      easeOut: (t: number) => 1 - Math.pow(1 - t, 3),
      easeInOut: (t: number) => t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2
    }

    const animate = () => {
      const elapsed = Date.now() - startTime
      const progress = Math.min(elapsed / duration, 1)
      const easedProgress = easingFunctions[easing](progress)
      
      const currentValue = startValue + (difference * easedProgress)
      setCount(currentValue)

      if (progress < 1) {
        requestAnimationFrame(animate)
      }
    }

    animate()
  }, [inView, endValue, startValue, duration, easing])

  return {
    ref,
    count,
    formattedCount: formatNumber(count),
    isComplete: count === endValue
  }
}

export default useIntersectionObserver


--- FILE: src/hooks/useLocalStorage.ts ---
import { useState, useEffect, useCallback } from 'react'
import { handleError, safeJsonParse } from '../utils/helpers'

// Basic localStorage hook
export const useLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] => {
  // Get initial value from localStorage or use provided initial value
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      return item ? safeJsonParse(item, initialValue) : initialValue
    } catch (error) {
      handleError(error, `useLocalStorage get ${key}`)
      return initialValue
    }
  })

  // Return a wrapped version of useState's setter function that persists the new value to localStorage
  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      // Save state
      setStoredValue(valueToStore)
      
      // Save to localStorage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      handleError(error, `useLocalStorage set ${key}`)
    }
  }, [key, storedValue])

  // Remove item from localStorage
  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue]
}

// Advanced localStorage hook with expiration
export const useLocalStorageWithExpiry = <T>(
  key: string,
  initialValue: T,
  ttl: number = 86400000 // 24 hours in milliseconds
): [T, (value: T | ((val: T) => T)) => void, () => void, boolean] => {
  const [isExpired, setIsExpired] = useState(false)

  // Get initial value with expiry check
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      if (!item) return initialValue

      const data = safeJsonParse(item, null)
      if (!data || typeof data !== 'object' || data === null) {
        return initialValue
      }

      // Type assertion for data object
      const parsedData = data as { value?: T; timestamp?: number }
      
      if (!parsedData.hasOwnProperty('value') || !parsedData.hasOwnProperty('timestamp')) {
        return initialValue
      }

      const now = new Date().getTime()
      if (parsedData.timestamp && now - parsedData.timestamp > ttl) {
        // Data expired, remove it
        window.localStorage.removeItem(key)
        setIsExpired(true)
        return initialValue
      }

      return parsedData.value || initialValue
    } catch (error) {
      handleError(error, `useLocalStorageWithExpiry get ${key}`)
      return initialValue
    }
  })

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      setStoredValue(valueToStore)
      setIsExpired(false)
      
      if (typeof window !== 'undefined') {
        const data = {
          value: valueToStore,
          timestamp: new Date().getTime()
        }
        window.localStorage.setItem(key, JSON.stringify(data))
      }
    } catch (error) {
      handleError(error, `useLocalStorageWithExpiry set ${key}`)
    }
  }, [key, storedValue])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      setIsExpired(false)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useLocalStorageWithExpiry remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue, isExpired]
}

// Hook for managing multiple localStorage items
export const useMultipleLocalStorage = <T extends Record<string, any>>(
  keys: (keyof T)[],
  initialValues: T
): [T, (key: keyof T, value: T[keyof T]) => void, (key: keyof T) => void, () => void] => {
  const [values, setValues] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValues
    }

    const result = { ...initialValues }
    keys.forEach(key => {
      try {
        const item = window.localStorage.getItem(String(key))
        if (item) {
          result[key] = safeJsonParse(item, initialValues[key])
        }
      } catch (error) {
        handleError(error, `useMultipleLocalStorage get ${String(key)}`)
      }
    })
    return result
  })

  const setValue = useCallback((key: keyof T, value: T[keyof T]) => {
    try {
      setValues(prev => ({ ...prev, [key]: value }))
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(String(key), JSON.stringify(value))
      }
    } catch (error) {
      handleError(error, `useMultipleLocalStorage set ${String(key)}`)
    }
  }, [])

  const removeValue = useCallback((key: keyof T) => {
    try {
      setValues(prev => ({ ...prev, [key]: initialValues[key] }))
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(String(key))
      }
    } catch (error) {
      handleError(error, `useMultipleLocalStorage remove ${String(key)}`)
    }
  }, [initialValues])

  const clearAll = useCallback(() => {
    try {
      setValues(initialValues)
      if (typeof window !== 'undefined') {
        keys.forEach(key => {
          window.localStorage.removeItem(String(key))
        })
      }
    } catch (error) {
      handleError(error, 'useMultipleLocalStorage clearAll')
    }
  }, [keys, initialValues])

  return [values, setValue, removeValue, clearAll]
}

// Hook for localStorage with validation
export const useValidatedLocalStorage = <T>(
  key: string,
  initialValue: T,
  validator: (value: any) => value is T
): [T, (value: T | ((val: T) => T)) => void, () => void, string | null] => {
  const [error, setError] = useState<string | null>(null)

  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      if (!item) return initialValue

      const parsed = safeJsonParse(item, null)
      if (validator(parsed)) {
        setError(null)
        return parsed
      } else {
        setError('Invalid data format in localStorage')
        return initialValue
      }
    } catch (error) {
      setError('Failed to parse localStorage data')
      handleError(error, `useValidatedLocalStorage get ${key}`)
      return initialValue
    }
  })

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      if (!validator(valueToStore)) {
        setError('Invalid value provided')
        return
      }

      setStoredValue(valueToStore)
      setError(null)
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      setError('Failed to save to localStorage')
      handleError(error, `useValidatedLocalStorage set ${key}`)
    }
  }, [key, storedValue, validator])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      setError(null)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      setError('Failed to remove from localStorage')
      handleError(error, `useValidatedLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue, error]
}

// Hook for localStorage with sync across tabs
export const useSyncedLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] => {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      return item ? safeJsonParse(item, initialValue) : initialValue
    } catch (error) {
      handleError(error, `useSyncedLocalStorage get ${key}`)
      return initialValue
    }
  })

  // Listen for storage events to sync across tabs
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === key && e.newValue !== null) {
        try {
          const newValue = safeJsonParse(e.newValue, initialValue)
          setStoredValue(newValue)
        } catch (error) {
          handleError(error, `useSyncedLocalStorage sync ${key}`)
        }
      }
    }

    window.addEventListener('storage', handleStorageChange)
    return () => window.removeEventListener('storage', handleStorageChange)
  }, [key, initialValue])

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      setStoredValue(valueToStore)
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      handleError(error, `useSyncedLocalStorage set ${key}`)
    }
  }, [key, storedValue])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useSyncedLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue]
}

// Hook for localStorage with compression (for large data)
export const useCompressedLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] => {
  const compress = (data: string): string => {
    // Simple compression - in production you might want to use a proper compression library
    return btoa(data)
  }

  const decompress = (data: string): string => {
    try {
      return atob(data)
    } catch {
      return data // Return original if decompression fails
    }
  }

  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      if (!item) return initialValue

      const decompressed = decompress(item)
      return safeJsonParse(decompressed, initialValue)
    } catch (error) {
      handleError(error, `useCompressedLocalStorage get ${key}`)
      return initialValue
    }
  })

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      
      setStoredValue(valueToStore)
      
      if (typeof window !== 'undefined') {
        const compressed = compress(JSON.stringify(valueToStore))
        window.localStorage.setItem(key, compressed)
      }
    } catch (error) {
      handleError(error, `useCompressedLocalStorage set ${key}`)
    }
  }, [key, storedValue])

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue)
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key)
      }
    } catch (error) {
      handleError(error, `useCompressedLocalStorage remove ${key}`)
    }
  }, [key, initialValue])

  return [storedValue, setValue, removeValue]
}

export default useLocalStorage


--- FILE: src/hooks/useScrollDirection.ts ---
import { useState, useEffect, useCallback, useRef } from 'react'
import { throttle } from '../utils/helpers'

export type ScrollDirection = 'up' | 'down' | null

interface UseScrollDirectionOptions {
  threshold?: number
  throttleDelay?: number
}

interface ScrollInfo {
  scrollY: number
  direction: ScrollDirection
  isScrolling: boolean
  scrollPercentage: number
  velocity: number
  isNearTop?: boolean
}

// Basic scroll direction detection
export const useScrollDirection = (options: UseScrollDirectionOptions = {}): ScrollDirection => {
  const { threshold = 10, throttleDelay = 100 } = options
  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>(null)
  const lastScrollY = useRef(0)
  const ticking = useRef(false)

  const updateScrollDirection = useCallback(() => {
    const scrollY = window.pageYOffset || document.documentElement.scrollTop
    
    if (Math.abs(scrollY - lastScrollY.current) < threshold) {
      ticking.current = false
      return
    }

    setScrollDirection(scrollY > lastScrollY.current ? 'down' : 'up')
    lastScrollY.current = scrollY > 0 ? scrollY : 0
    ticking.current = false
  }, [threshold])

  const onScroll = useCallback(
    throttle(() => {
      if (!ticking.current) {
        requestAnimationFrame(updateScrollDirection)
        ticking.current = true
      }
    }, throttleDelay),
    [updateScrollDirection, throttleDelay]
  )

  useEffect(() => {
    lastScrollY.current = window.pageYOffset || document.documentElement.scrollTop

    window.addEventListener('scroll', onScroll, { passive: true })
    return () => window.removeEventListener('scroll', onScroll)
  }, [onScroll])

  return scrollDirection
}

// Advanced scroll information hook
export const useScrollInfo = (options: UseScrollDirectionOptions = {}): ScrollInfo => {
  const { threshold = 10, throttleDelay = 100 } = options
  const [scrollInfo, setScrollInfo] = useState<ScrollInfo>({
    scrollY: 0,
    direction: null,
    isScrolling: false,
    scrollPercentage: 0,
    velocity: 0,
    isNearTop: true
  })

  const lastScrollY = useRef(0)
  const lastTimestamp = useRef(Date.now())
  const scrollTimeout = useRef<NodeJS.Timeout>()
  const ticking = useRef(false)

  const updateScrollInfo = useCallback(() => {
    const scrollY = window.pageYOffset || document.documentElement.scrollTop
    const now = Date.now()
    const deltaY = scrollY - lastScrollY.current
    const deltaTime = now - lastTimestamp.current
    
    // Calculate scroll percentage
    const scrollHeight = document.documentElement.scrollHeight - window.innerHeight
    const scrollPercentage = scrollHeight > 0 ? (scrollY / scrollHeight) * 100 : 0
    
    // Calculate velocity (pixels per millisecond)
    const velocity = deltaTime > 0 ? Math.abs(deltaY) / deltaTime : 0

    // Determine direction
    let direction: ScrollDirection = null
    if (Math.abs(deltaY) >= threshold) {
      direction = deltaY > 0 ? 'down' : 'up'
    }

    // Calculate isNearTop
    const isNearTop = scrollY <= 100

    setScrollInfo({
      scrollY,
      direction,
      isScrolling: true,
      scrollPercentage: Math.min(100, Math.max(0, scrollPercentage)),
      velocity,
      isNearTop
    })

    // Clear existing timeout
    if (scrollTimeout.current) {
      clearTimeout(scrollTimeout.current)
    }

    // Set isScrolling to false after scrolling stops
    scrollTimeout.current = setTimeout(() => {
      setScrollInfo(prev => ({ ...prev, isScrolling: false }))
    }, 150)

    lastScrollY.current = scrollY > 0 ? scrollY : 0
    lastTimestamp.current = now
    ticking.current = false
  }, [threshold])

  const onScroll = useCallback(
    throttle(() => {
      if (!ticking.current) {
        requestAnimationFrame(updateScrollInfo)
        ticking.current = true
      }
    }, throttleDelay),
    [updateScrollInfo, throttleDelay]
  )

  useEffect(() => {
    lastScrollY.current = window.pageYOffset || document.documentElement.scrollTop
    lastTimestamp.current = Date.now()

    window.addEventListener('scroll', onScroll, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', onScroll)
      if (scrollTimeout.current) {
        clearTimeout(scrollTimeout.current)
      }
    }
  }, [onScroll])

  return scrollInfo
}

// Hook for detecting scroll boundaries
export const useScrollBoundaries = (options: { offset?: number } = {}) => {
  const { offset = 100 } = options
  const [boundaries, setBoundaries] = useState({
    isAtTop: true,
    isAtBottom: false,
    isNearTop: true,
    isNearBottom: false
  })

  const updateBoundaries = useCallback(() => {
    const scrollY = window.pageYOffset || document.documentElement.scrollTop
    const windowHeight = window.innerHeight
    const documentHeight = document.documentElement.scrollHeight

    const isAtTop = scrollY <= 0
    const isAtBottom = scrollY + windowHeight >= documentHeight - 1
    const isNearTop = scrollY <= offset
    const isNearBottom = scrollY + windowHeight >= documentHeight - offset

    setBoundaries({
      isAtTop,
      isAtBottom,
      isNearTop,
      isNearBottom
    })
  }, [offset])

  const onScroll = useCallback(
    throttle(updateBoundaries, 100),
    [updateBoundaries]
  )

  useEffect(() => {
    updateBoundaries() // Initial check
    window.addEventListener('scroll', onScroll, { passive: true })
    window.addEventListener('resize', updateBoundaries, { passive: true })
    
    return () => {
      window.removeEventListener('scroll', onScroll)
      window.removeEventListener('resize', updateBoundaries)
    }
  }, [onScroll, updateBoundaries])

  return boundaries
}

// Hook for scroll-based header visibility
export const useScrollHeader = (options: {
  hideOnScrollDown?: boolean
  showOnScrollUp?: boolean
  threshold?: number
  offset?: number
} = {}) => {
  const {
    hideOnScrollDown = true,
    showOnScrollUp = true,
    threshold = 10,
    offset = 100
  } = options

  const [isVisible, setIsVisible] = useState(true)
  const [isTransparent, setIsTransparent] = useState(true)
  const direction = useScrollDirection({ threshold })
  const { isNearTop, scrollY } = useScrollInfo()

  useEffect(() => {
    setIsTransparent(isNearTop || false)
    
    if (scrollY < offset) {
      setIsVisible(true)
      return
    }

    if (hideOnScrollDown && direction === 'down') {
      setIsVisible(false)
    } else if (showOnScrollUp && direction === 'up') {
      setIsVisible(true)
    }
  }, [direction, isNearTop, scrollY, offset, hideOnScrollDown, showOnScrollUp])

  return {
    isVisible,
    isTransparent,
    direction,
    scrollY
  }
}

// Hook for element reveal on scroll
export const useScrollReveal = (elements: string[], options: {
  threshold?: number
  rootMargin?: string
} = {}) => {
  const { threshold = 0.1, rootMargin = '0px' } = options
  const [revealedElements, setRevealedElements] = useState<Set<string>>(new Set())

  useEffect(() => {
    const observers = new Map<string, IntersectionObserver>()

    elements.forEach(elementId => {
      const element = document.getElementById(elementId)
      if (!element) return

      const observer = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            setRevealedElements(prev => new Set([...prev, elementId]))
            observer.disconnect() // One-time reveal
          }
        },
        { threshold, rootMargin }
      )

      observer.observe(element)
      observers.set(elementId, observer)
    })

    return () => {
      observers.forEach(observer => observer.disconnect())
    }
  }, [elements, threshold, rootMargin])

  return {
    revealedElements,
    isRevealed: (elementId: string) => revealedElements.has(elementId)
  }
}

// Hook for scroll-triggered animations
export const useScrollTrigger = (
  trigger: 'scrollDown' | 'scrollUp' | 'reachBottom' | 'reachTop' | 'custom',
  callback: () => void,
  options: {
    threshold?: number
    offset?: number
    once?: boolean
    customCondition?: (scrollInfo: ScrollInfo) => boolean
  } = {}
) => {
  const { threshold = 10, offset = 100, once = false, customCondition } = options
  const scrollInfo = useScrollInfo({ threshold })
  const hasTriggered = useRef(false)

  useEffect(() => {
    if (once && hasTriggered.current) return

    let shouldTrigger = false

    switch (trigger) {
      case 'scrollDown':
        shouldTrigger = scrollInfo.direction === 'down' && scrollInfo.scrollY > offset
        break
      case 'scrollUp':
        shouldTrigger = scrollInfo.direction === 'up' && scrollInfo.scrollY > offset
        break
      case 'reachBottom':
        shouldTrigger = scrollInfo.scrollPercentage >= 95
        break
      case 'reachTop':
        shouldTrigger = scrollInfo.scrollY <= offset
        break
      case 'custom':
        shouldTrigger = customCondition ? customCondition(scrollInfo) : false
        break
    }

    if (shouldTrigger) {
      callback()
      if (once) {
        hasTriggered.current = true
      }
    }
  }, [scrollInfo, trigger, callback, offset, once, customCondition])

  return scrollInfo
}

// Hook for smooth scrolling to elements
export const useSmoothScroll = () => {
  const scrollToElement = useCallback((
    elementId: string,
    options: {
      offset?: number
      behavior?: ScrollBehavior
      block?: ScrollLogicalPosition
    } = {}
  ) => {
    const { offset = 0, behavior = 'smooth', block = 'start' } = options
    const element = document.getElementById(elementId)
    
    if (element) {
      const elementPosition = element.getBoundingClientRect().top + window.pageYOffset
      const offsetPosition = elementPosition - offset

      window.scrollTo({
        top: offsetPosition,
        behavior
      })
    }
  }, [])

  const scrollToTop = useCallback((behavior: ScrollBehavior = 'smooth') => {
    window.scrollTo({
      top: 0,
      behavior
    })
  }, [])

  const scrollToBottom = useCallback((behavior: ScrollBehavior = 'smooth') => {
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior
    })
  }, [])

  const scrollBy = useCallback((
    amount: number,
    behavior: ScrollBehavior = 'smooth'
  ) => {
    window.scrollBy({
      top: amount,
      behavior
    })
  }, [])

  return {
    scrollToElement,
    scrollToTop,
    scrollToBottom,
    scrollBy
  }
}

// Hook for reading progress indicator
export const useReadingProgress = (contentSelector?: string) => {
  const [progress, setProgress] = useState(0)

  useEffect(() => {
    const calculateProgress = () => {
      let scrollHeight: number
      let scrollTop: number
      let clientHeight: number

      if (contentSelector) {
        const element = document.querySelector(contentSelector)
        if (element) {
          const rect = element.getBoundingClientRect()
          const elementTop = window.pageYOffset + rect.top
          const elementHeight = element.scrollHeight
          scrollTop = window.pageYOffset - elementTop
          scrollHeight = elementHeight - window.innerHeight
          clientHeight = window.innerHeight
        } else {
          return
        }
      } else {
        scrollTop = document.documentElement.scrollTop || document.body.scrollTop
        scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight
        clientHeight = document.documentElement.clientHeight
      }

      if (scrollHeight <= 0) {
        setProgress(0)
        return
      }

      const progress = Math.min(100, Math.max(0, (scrollTop / scrollHeight) * 100))
      setProgress(progress)
    }

    const onScroll = throttle(calculateProgress, 50)
    
    calculateProgress() // Initial calculation
    window.addEventListener('scroll', onScroll, { passive: true })
    window.addEventListener('resize', calculateProgress, { passive: true })

    return () => {
      window.removeEventListener('scroll', onScroll)
      window.removeEventListener('resize', calculateProgress)
    }
  }, [contentSelector])

  return progress
}

// Hook for scroll-based parallax effects
export const useScrollParallax = (speed: number = 0.5, elementRef?: React.RefObject<HTMLElement>) => {
  const [offset, setOffset] = useState(0)
  const [isInView, setIsInView] = useState(false)

  useEffect(() => {
    const element = elementRef?.current
    
    const handleScroll = () => {
      if (element) {
        const rect = element.getBoundingClientRect()
        const isVisible = rect.bottom >= 0 && rect.top <= window.innerHeight
        setIsInView(isVisible)
        
        if (isVisible) {
          const scrolled = window.pageYOffset
          const rate = scrolled * -speed
          setOffset(rate)
        }
      } else {
        const scrolled = window.pageYOffset
        const rate = scrolled * -speed
        setOffset(rate)
        setIsInView(true)
      }
    }

    const onScroll = throttle(handleScroll, 16) // ~60fps
    
    handleScroll() // Initial calculation
    window.addEventListener('scroll', onScroll, { passive: true })

    return () => {
      window.removeEventListener('scroll', onScroll)
    }
  }, [speed, elementRef])

  return {
    offset,
    isInView,
    style: {
      transform: `translateY(${offset}px)`,
      willChange: 'transform'
    }
  }
}

export default useScrollDirection
